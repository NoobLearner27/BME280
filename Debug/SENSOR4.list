
SENSOR4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08006f00  08006f00  00007f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b0  080073b0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000083b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073b4  080073b4  000083b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080073b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000001c8  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000039c  2000039c  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073ee  00000000  00000000  000091fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a4  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00011c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e0  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f42  00000000  00000000  00012a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095e9  00000000  00000000  0003399a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4dc6  00000000  00000000  0003cf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101d49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fc4  00000000  00000000  00101d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00104d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ee4 	.word	0x08006ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006ee4 	.word	0x08006ee4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <user_delay_us>:
/* USER CODE BEGIN PFP */
SPI_HandleTypeDef hspi1; // SPI Handle for SPI1
int8_t read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr); // to read the data from sensor
int8_t write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);  // to write data to sensor

void user_delay_us(uint32_t period, void *intf_ptr) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);  //  for millisecond delay
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <user_delay_us+0x24>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	099b      	lsrs	r3, r3, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fe31 	bl	8002b14 <HAL_Delay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	10624dd3 	.word	0x10624dd3

08000ec0 <main>:

int main(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09c      	sub	sp, #112	@ 0x70
 8000ec4:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ec6:	f001 fdb7 	bl	8002a38 <HAL_Init>
	SystemClock_Config();
 8000eca:	f000 f92b 	bl	8001124 <SystemClock_Config>
	MX_GPIO_Init();
 8000ece:	f000 f9c9 	bl	8001264 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000ed2:	f000 f991 	bl	80011f8 <MX_SPI1_Init>
	struct bme280_dev dev;
	struct bme280_settings settings;
	struct bme280_data comp_data;

	int8_t rslt;
	uint8_t cs_pin = GPIO_PIN_4;  // chip select pin / NSS pin
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	71fb      	strb	r3, [r7, #7]



	// Initialize the sensor

	dev.intf_ptr = &cs_pin;
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
	dev.intf = BME280_SPI_INTF;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	dev.read = read;
 8000ee4:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <main+0xec>)
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
	dev.write = write;
 8000ee8:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <main+0xf0>)
 8000eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	dev.delay_us = user_delay_us;
 8000eec:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <main+0xf4>)
 8000eee:	643b      	str	r3, [r7, #64]	@ 0x40

	rslt = bme280_init(&dev);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fbb0 	bl	800165a <bme280_init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	// Check if the initialization was successful
	if (rslt == BME280_OK) {
 8000f00:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d124      	bne.n	8000f52 <main+0x92>
		printf("BME280 initialization successful!\n");
 8000f08:	482b      	ldr	r0, [pc, #172]	@ (8000fb8 <main+0xf8>)
 8000f0a:	f004 f87f 	bl	800500c <puts>
		printf("BME280 initialization failed with code: %d\n", rslt);
		return 0;
	}
	// settings configuration for BME280
	uint8_t settings_sel;
	settings.osr_h = BME280_OVERSAMPLING_16X;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	settings.osr_p = BME280_OVERSAMPLING_16X;
 8000f14:	2305      	movs	r3, #5
 8000f16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	settings.osr_t = BME280_OVERSAMPLING_16X;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	settings.filter = BME280_FILTER_COEFF_16;
 8000f20:	2304      	movs	r3, #4
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	settings.standby_time = BME280_STANDBY_TIME_1000_MS;
 8000f26:	2305      	movs	r3, #5
 8000f28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

	settings_sel = BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP| BME280_SEL_OSR_HUM | BME280_SEL_FILTER | BME280_SEL_STANDBY;
 8000f2c:	231f      	movs	r3, #31
 8000f2e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	bme280_set_sensor_settings(settings_sel, &settings, &dev); // applying setting configurations to sensor
 8000f32:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000f36:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f3a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fc65 	bl	800180e <bme280_set_sensor_settings>
	bme280_set_sensor_mode(BME280_POWERMODE_NORMAL, &dev); // applying sensor mode
 8000f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f000 fcae 	bl	80018ac <bme280_set_sensor_mode>
 8000f50:	e007      	b.n	8000f62 <main+0xa2>
		printf("BME280 initialization failed with code: %d\n", rslt);
 8000f52:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8000f56:	4619      	mov	r1, r3
 8000f58:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <main+0xfc>)
 8000f5a:	f003 ffef 	bl	8004f3c <iprintf>
		return 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e01f      	b.n	8000fa2 <main+0xe2>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev); // reading and compensating temperature,pressure and humidity values from the sensor
 8000f62:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	2007      	movs	r0, #7
 8000f6e:	f000 fd2e 	bl	80019ce <bme280_get_sensor_data>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		printf("Temperature: %0.2f°C\n", comp_data.temperature);
 8000f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f7c:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <main+0x100>)
 8000f7e:	f003 ffdd 	bl	8004f3c <iprintf>
		printf("Pressure: %0.2f hPa\n", comp_data.pressure);
 8000f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f86:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <main+0x104>)
 8000f88:	f003 ffd8 	bl	8004f3c <iprintf>
		printf("Humidity: %0.2f %%\n", comp_data.humidity);
 8000f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f90:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <main+0x108>)
 8000f92:	f003 ffd3 	bl	8004f3c <iprintf>
		HAL_Delay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f9a:	f001 fdbb 	bl	8002b14 <HAL_Delay>
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev); // reading and compensating temperature,pressure and humidity values from the sensor
 8000f9e:	bf00      	nop
 8000fa0:	e7df      	b.n	8000f62 <main+0xa2>
	}

}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3770      	adds	r7, #112	@ 0x70
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08000fcd 	.word	0x08000fcd
 8000fb0:	08001085 	.word	0x08001085
 8000fb4:	08000e99 	.word	0x08000e99
 8000fb8:	08006f00 	.word	0x08006f00
 8000fbc:	08006f24 	.word	0x08006f24
 8000fc0:	08006f50 	.word	0x08006f50
 8000fc4:	08006f68 	.word	0x08006f68
 8000fc8:	08006f80 	.word	0x08006f80

08000fcc <read>:

int8_t read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
	{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
		uint8_t cs_pin = *(uint8_t*) intf_ptr;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	75fb      	strb	r3, [r7, #23]

		// Set the MSB of reg_addr for reading (MSB = 1)
		reg_addr |= 0x80;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	73fb      	strb	r3, [r7, #15]
		//  HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);

		// Pull CS low to select the sensor
		HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_RESET);
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481f      	ldr	r0, [pc, #124]	@ (8001074 <read+0xa8>)
 8000ff6:	f002 f82f 	bl	8003058 <HAL_GPIO_WritePin>

		// Send the register address
		if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000ffa:	f107 010f 	add.w	r1, r7, #15
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2201      	movs	r2, #1
 8001004:	481c      	ldr	r0, [pc, #112]	@ (8001078 <read+0xac>)
 8001006:	f002 fd32 	bl	8003a6e <HAL_SPI_Transmit>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00c      	beq.n	800102a <read+0x5e>
			printf("Failed to send read register address\n");
 8001010:	481a      	ldr	r0, [pc, #104]	@ (800107c <read+0xb0>)
 8001012:	f003 fffb 	bl	800500c <puts>
			HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET); // Pull CS high on error
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	b29b      	uxth	r3, r3
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	4815      	ldr	r0, [pc, #84]	@ (8001074 <read+0xa8>)
 8001020:	f002 f81a 	bl	8003058 <HAL_GPIO_WritePin>
			return BME280_E_COMM_FAIL;
 8001024:	f06f 0301 	mvn.w	r3, #1
 8001028:	e01f      	b.n	800106a <read+0x9e>
		}

		// Receive the data
		if (HAL_SPI_Receive(&hspi1, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	b29a      	uxth	r2, r3
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <read+0xac>)
 8001036:	f002 fe5d 	bl	8003cf4 <HAL_SPI_Receive>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00c      	beq.n	800105a <read+0x8e>
			printf("Failed to receive data\n");
 8001040:	480f      	ldr	r0, [pc, #60]	@ (8001080 <read+0xb4>)
 8001042:	f003 ffe3 	bl	800500c <puts>
			HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET); // Pull CS high on error
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	4809      	ldr	r0, [pc, #36]	@ (8001074 <read+0xa8>)
 8001050:	f002 f802 	bl	8003058 <HAL_GPIO_WritePin>
			return BME280_E_COMM_FAIL;
 8001054:	f06f 0301 	mvn.w	r3, #1
 8001058:	e007      	b.n	800106a <read+0x9e>
		}

		// Pull CS high to deselect the sensor
		HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	b29b      	uxth	r3, r3
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	4804      	ldr	r0, [pc, #16]	@ (8001074 <read+0xa8>)
 8001064:	f001 fff8 	bl	8003058 <HAL_GPIO_WritePin>
		return BME280_OK;
 8001068:	2300      	movs	r3, #0
	}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000
 8001078:	200001f0 	.word	0x200001f0
 800107c:	08006f94 	.word	0x08006f94
 8001080:	08006fbc 	.word	0x08006fbc

08001084 <write>:

	int8_t write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
		uint8_t cs_pin = *(uint8_t*) intf_ptr;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	75fb      	strb	r3, [r7, #23]

		HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_RESET);
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	b29b      	uxth	r3, r3
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	481b      	ldr	r0, [pc, #108]	@ (8001110 <write+0x8c>)
 80010a4:	f001 ffd8 	bl	8003058 <HAL_GPIO_WritePin>

		// Printing register address
		printf("Writing to register 0x%02X\n", reg_addr);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4819      	ldr	r0, [pc, #100]	@ (8001114 <write+0x90>)
 80010ae:	f003 ff45 	bl	8004f3c <iprintf>

		if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80010b2:	f107 010f 	add.w	r1, r7, #15
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	2201      	movs	r2, #1
 80010bc:	4816      	ldr	r0, [pc, #88]	@ (8001118 <write+0x94>)
 80010be:	f002 fcd6 	bl	8003a6e <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <write+0x50>
			printf("Failed to send register address\n");
 80010c8:	4814      	ldr	r0, [pc, #80]	@ (800111c <write+0x98>)
 80010ca:	f003 ff9f 	bl	800500c <puts>
			return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e018      	b.n	8001106 <write+0x82>
		}

		if (HAL_SPI_Transmit(&hspi1, (uint8_t*) reg_data, len, HAL_MAX_DELAY)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <write+0x94>)
 80010e0:	f002 fcc5 	bl	8003a6e <HAL_SPI_Transmit>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <write+0x72>
				!= HAL_OK) {
			printf("Failed to send data\n");
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <write+0x9c>)
 80010ec:	f003 ff8e 	bl	800500c <puts>
			return -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	e007      	b.n	8001106 <write+0x82>
		}

		HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	4804      	ldr	r0, [pc, #16]	@ (8001110 <write+0x8c>)
 8001100:	f001 ffaa 	bl	8003058 <HAL_GPIO_WritePin>

		return 0;
 8001104:	2300      	movs	r3, #0
	}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020000 	.word	0x40020000
 8001114:	08006fd4 	.word	0x08006fd4
 8001118:	200001f0 	.word	0x200001f0
 800111c:	08006ff0 	.word	0x08006ff0
 8001120:	08007010 	.word	0x08007010

08001124 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	@ 0x50
 8001128:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2230      	movs	r2, #48	@ 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f004 f84a 	bl	80051cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <SystemClock_Config+0xcc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <SystemClock_Config+0xcc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	@ 0x40
 8001158:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <SystemClock_Config+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <SystemClock_Config+0xd0>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001194:	2308      	movs	r3, #8
 8001196:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001198:	2332      	movs	r3, #50	@ 0x32
 800119a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800119c:	2304      	movs	r3, #4
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff6d 	bl	8003088 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x94>
		Error_Handler();
 80011b4:	f000 f898 	bl	80012e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80011ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f9ce 	bl	8003578 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
		Error_Handler();
 80011e2:	f000 f881 	bl	80012e8 <Error_Handler>
	}
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	@ 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_SPI1_Init+0x64>)
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <MX_SPI1_Init+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001208:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_SPI1_Init+0x64>)
 8001224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001228:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_SPI1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_SPI1_Init+0x64>)
 8001244:	220a      	movs	r2, #10
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_SPI1_Init+0x64>)
 800124a:	f002 fb87 	bl	800395c <HAL_SPI_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001254:	f000 f848 	bl	80012e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001f0 	.word	0x200001f0
 8001260:	40013000 	.word	0x40013000

08001264 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_GPIO_Init+0x7c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <MX_GPIO_Init+0x7c>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_GPIO_Init+0x7c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_GPIO_Init+0x7c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <MX_GPIO_Init+0x7c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_GPIO_Init+0x7c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2110      	movs	r1, #16
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <MX_GPIO_Init+0x80>)
 80012b8:	f001 fece 	bl	8003058 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012bc:	2310      	movs	r3, #16
 80012be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <MX_GPIO_Init+0x80>)
 80012d4:	f001 fd26 	bl	8002d24 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <Error_Handler+0x8>

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f001 fcc2 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_SPI_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12b      	bne.n	80013be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800139e:	23e0      	movs	r3, #224	@ 0xe0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ae:	2305      	movs	r3, #5
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <HAL_SPI_MspInit+0x8c>)
 80013ba:	f001 fcb3 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013000 	.word	0x40013000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f001 fb5a 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <ITM_SendChar+0x44>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <ITM_SendChar+0x44>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001440:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <ITM_SendChar+0x48>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <ITM_SendChar+0x48>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800144e:	bf00      	nop
 8001450:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f8      	beq.n	8001450 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800145e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	e000edfc 	.word	0xe000edfc
 8001474:	e0000e00 	.word	0xe0000e00

08001478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <_kill>:

int _kill(int pid, int sig)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001490:	f003 feee 	bl	8005270 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	2216      	movs	r2, #22
 8001498:	601a      	str	r2, [r3, #0]
  return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_exit>:

void _exit (int status)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ae:	f04f 31ff 	mov.w	r1, #4294967295
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffe7 	bl	8001486 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <_exit+0x12>

080014bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e00a      	b.n	80014e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	4601      	mov	r1, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf0      	blt.n	80014ce <_read+0x12>
  }

  return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e009      	b.n	800151c <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff8b 	bl	800142c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf1      	blt.n	8001508 <_write+0x12>
  }
  return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001554:	605a      	str	r2, [r3, #4]
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <_isatty>:

int _isatty(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f003 fe56 	bl	8005270 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20020000 	.word	0x20020000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	20000248 	.word	0x20000248
 80015f8:	200003a0 	.word	0x200003a0

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001640 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800160c:	f7ff fff6 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	@ (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	@ (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f003 fe21 	bl	800527c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fc41 	bl	8000ec0 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800164c:	080073b8 	.word	0x080073b8
  ldr r2, =_sbss
 8001650:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001654:	2000039c 	.word	0x2000039c

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>

0800165a <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	73bb      	strb	r3, [r7, #14]

    /* Read the chip-id of bme280 sensor */
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
 8001666:	f107 010e 	add.w	r1, r7, #14
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	20d0      	movs	r0, #208	@ 0xd0
 8001670:	f000 f823 	bl	80016ba <bme280_get_regs>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]

    /* Check for chip id validity */
    if (rslt == BME280_OK)
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d116      	bne.n	80016ae <bme280_init+0x54>
    {
        if (chip_id == BME280_CHIP_ID)
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	2b60      	cmp	r3, #96	@ 0x60
 8001684:	d111      	bne.n	80016aa <bme280_init+0x50>
        {
            dev->chip_id = chip_id;
 8001686:	7bba      	ldrb	r2, [r7, #14]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	701a      	strb	r2, [r3, #0]

            /* Reset the sensor */
            rslt = bme280_soft_reset(dev);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f958 	bl	8001942 <bme280_soft_reset>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME280_OK)
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <bme280_init+0x54>
            {
                /* Read the calibration data */
                rslt = get_calib_data(dev);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 f824 	bl	80026ec <get_calib_data>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e001      	b.n	80016ae <bme280_init+0x54>
            }
        }
        else
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80016aa:	23fc      	movs	r3, #252	@ 0xfc
 80016ac:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 80016ba:	b590      	push	{r4, r7, lr}
 80016bc:	b087      	sub	sp, #28
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80016ca:	6838      	ldr	r0, [r7, #0]
 80016cc:	f001 f995 	bl	80029fa <null_ptr_check>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BME280_OK) && (reg_data != NULL))
 80016d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11e      	bne.n	800171a <bme280_get_regs+0x60>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01b      	beq.n	800171a <bme280_get_regs+0x60>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d003      	beq.n	80016f2 <bme280_get_regs+0x38>
        {
            reg_addr = reg_addr | 0x80;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016f0:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68dc      	ldr	r4, [r3, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	7bf8      	ldrb	r0, [r7, #15]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	47a0      	blx	r4
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	721a      	strb	r2, [r3, #8]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <bme280_get_regs+0x64>
        {
            rslt = BME280_E_COMM_FAIL;
 8001714:	23fe      	movs	r3, #254	@ 0xfe
 8001716:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001718:	e001      	b.n	800171e <bme280_get_regs+0x64>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800171a:	23ff      	movs	r3, #255	@ 0xff
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800171e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001722:	4618      	mov	r0, r3
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}

0800172a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 800172a:	b590      	push	{r4, r7, lr}
 800172c:	b08d      	sub	sp, #52	@ 0x34
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */
    uint32_t temp_len;
    uint32_t reg_addr_cnt;

    if (len > BME280_MAX_LEN)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b0a      	cmp	r3, #10
 800173c:	d901      	bls.n	8001742 <bme280_set_regs+0x18>
    {
        len = BME280_MAX_LEN;
 800173e:	230a      	movs	r3, #10
 8001740:	607b      	str	r3, [r7, #4]
    }

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f001 f959 	bl	80029fa <null_ptr_check>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800174e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001752:	2b00      	cmp	r3, #0
 8001754:	d150      	bne.n	80017f8 <bme280_set_regs+0xce>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d04d      	beq.n	80017f8 <bme280_set_regs+0xce>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d04a      	beq.n	80017f8 <bme280_set_regs+0xce>
    {
        if (len != 0)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d043      	beq.n	80017f0 <bme280_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	743b      	strb	r3, [r7, #16]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d014      	beq.n	80017a0 <bme280_set_regs+0x76>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	e00d      	b.n	8001798 <bme280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	4413      	add	r3, r2
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	440b      	add	r3, r1
 800178a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	3301      	adds	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3ed      	bcc.n	800177c <bme280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d90b      	bls.n	80017be <bme280_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80017a6:	f107 0110 	add.w	r1, r7, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 ffe1 	bl	8002776 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017bc:	e001      	b.n	80017c2 <bme280_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691c      	ldr	r4, [r3, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	7818      	ldrb	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f107 0110 	add.w	r1, r7, #16
 80017d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017d4:	47a0      	blx	r4
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	721a      	strb	r2, [r3, #8]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <bme280_set_regs+0xd6>
            {
                rslt = BME280_E_COMM_FAIL;
 80017e8:	23fe      	movs	r3, #254	@ 0xfe
 80017ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 80017ee:	e007      	b.n	8001800 <bme280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80017f0:	23fd      	movs	r3, #253	@ 0xfd
 80017f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 80017f6:	e003      	b.n	8001800 <bme280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80017f8:	23ff      	movs	r3, #255	@ 0xff
 80017fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017fe:	e000      	b.n	8001802 <bme280_set_regs+0xd8>
        if (len != 0)
 8001800:	bf00      	nop
    }

    return rslt;
 8001802:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001806:	4618      	mov	r0, r3
 8001808:	3734      	adds	r7, #52	@ 0x34
 800180a:	46bd      	mov	sp, r7
 800180c:	bd90      	pop	{r4, r7, pc}

0800180e <bme280_set_sensor_settings>:
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings,
                                  const struct bme280_settings *settings,
                                  struct bme280_dev *dev)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t sensor_mode;

    if (settings != NULL)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03c      	beq.n	800189c <bme280_set_sensor_settings+0x8e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001822:	f107 0316 	add.w	r3, r7, #22
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f86a 	bl	8001902 <bme280_get_sensor_mode>
 800182e:	4603      	mov	r3, r0
 8001830:	75fb      	strb	r3, [r7, #23]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_POWERMODE_SLEEP))
 8001832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <bme280_set_sensor_settings+0x3c>
 800183a:	7dbb      	ldrb	r3, [r7, #22]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <bme280_set_sensor_settings+0x3c>
        {
            rslt = put_device_to_sleep(dev);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fb4c 	bl	8001ede <put_device_to_sleep>
 8001846:	4603      	mov	r3, r0
 8001848:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BME280_OK)
 800184a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d126      	bne.n	80018a0 <bme280_set_sensor_settings+0x92>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	4619      	mov	r1, r3
 8001856:	2007      	movs	r0, #7
 8001858:	f001 f8b4 	bl	80029c4 <are_settings_changed>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <bme280_set_sensor_settings+0x64>
            {
                rslt = set_osr_settings(desired_settings, settings, dev);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f94a 	bl	8001b02 <set_osr_settings>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d112      	bne.n	80018a0 <bme280_set_sensor_settings+0x92>
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4619      	mov	r1, r3
 800187e:	2018      	movs	r0, #24
 8001880:	f001 f8a0 	bl	80029c4 <are_settings_changed>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <bme280_set_sensor_settings+0x92>
            {
                rslt = set_filter_standby_settings(desired_settings, settings, dev);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f9d3 	bl	8001c3c <set_filter_standby_settings>
 8001896:	4603      	mov	r3, r0
 8001898:	75fb      	strb	r3, [r7, #23]
 800189a:	e001      	b.n	80018a0 <bme280_set_sensor_settings+0x92>
            }
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800189c:	23ff      	movs	r3, #255	@ 0xff
 800189e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80018a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80018b8:	f107 030e 	add.w	r3, r7, #14
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f81f 	bl	8001902 <bme280_get_sensor_mode>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]

    /* If the sensor is not in sleep mode put the device to sleep
     * mode
     */
    if ((rslt == BME280_OK) && (last_set_mode != BME280_POWERMODE_SLEEP))
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <bme280_set_sensor_mode+0x34>
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <bme280_set_sensor_mode+0x34>
    {
        rslt = put_device_to_sleep(dev);
 80018d6:	6838      	ldr	r0, [r7, #0]
 80018d8:	f000 fb01 	bl	8001ede <put_device_to_sleep>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the power mode */
    if (rslt == BME280_OK)
 80018e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <bme280_set_sensor_mode+0x4a>
    {
        rslt = write_power_mode(sensor_mode, dev);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fac3 	bl	8001e78 <write_power_mode>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (sensor_mode != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00f      	beq.n	8001932 <bme280_get_sensor_mode+0x30>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_REG_PWR_CTRL, sensor_mode, 1, dev);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	20f4      	movs	r0, #244	@ 0xf4
 800191a:	f7ff fece 	bl	80016ba <bme280_get_regs>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode to variable */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e001      	b.n	8001936 <bme280_get_sensor_mode+0x34>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001932:	23ff      	movs	r3, #255	@ 0xff
 8001934:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_RESET;
 800194a:	23e0      	movs	r3, #224	@ 0xe0
 800194c:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8001952:	2305      	movs	r3, #5
 8001954:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001956:	23b6      	movs	r3, #182	@ 0xb6
 8001958:	72fb      	strb	r3, [r7, #11]

    /* Write the soft reset command in the sensor */
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800195a:	f107 010b 	add.w	r1, r7, #11
 800195e:	f107 000d 	add.w	r0, r7, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f7ff fee0 	bl	800172a <bme280_set_regs>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d125      	bne.n	80019c2 <bme280_soft_reset+0x80>
    {
        /* If NVM not copied yet, Wait for NVM to copy */
        do
        {
            /* As per data sheet - Table 1, startup time is 2 ms. */
            dev->delay_us(BME280_STARTUP_DELAY, dev->intf_ptr);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6852      	ldr	r2, [r2, #4]
 800197e:	4611      	mov	r1, r2
 8001980:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001984:	4798      	blx	r3
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
 8001986:	f107 010c 	add.w	r1, r7, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	20f3      	movs	r0, #243	@ 0xf3
 8001990:	f7ff fe93 	bl	80016ba <bme280_get_regs>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]

        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <bme280_soft_reset+0x72>
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	73ba      	strb	r2, [r7, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <bme280_soft_reset+0x72>
 80019aa:	7b3b      	ldrb	r3, [r7, #12]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e0      	bne.n	8001976 <bme280_soft_reset+0x34>

        if (status_reg & BME280_STATUS_IM_UPDATE)
 80019b4:	7b3b      	ldrb	r3, [r7, #12]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <bme280_soft_reset+0x80>
        {
            rslt = BME280_E_NVM_COPY_FAILED;
 80019be:	23fa      	movs	r3, #250	@ 0xfa
 80019c0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b08a      	sub	sp, #40	@ 0x28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]

    if (comp_data != NULL)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d021      	beq.n	8001a3a <bme280_get_sensor_data+0x6c>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 80019f6:	f107 011c 	add.w	r1, r7, #28
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2208      	movs	r2, #8
 80019fe:	20f7      	movs	r0, #247	@ 0xf7
 8001a00:	f7ff fe5b 	bl	80016ba <bme280_get_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 8001a0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <bme280_get_sensor_data+0x72>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f9e6 	bl	8001dee <parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3318      	adds	r3, #24
 8001a26:	f107 0110 	add.w	r1, r7, #16
 8001a2a:	7bf8      	ldrb	r0, [r7, #15]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	f000 f80d 	bl	8001a4c <bme280_compensate_data>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a38:	e002      	b.n	8001a40 <bme280_get_sensor_data+0x72>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001a3a:	23ff      	movs	r3, #255	@ 0xff
 8001a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	@ 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d045      	beq.n	8001af2 <bme280_compensate_data+0xa6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d042      	beq.n	8001af2 <bme280_compensate_data+0xa6>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03f      	beq.n	8001af2 <bme280_compensate_data+0xa6>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f000 fa65 	bl	8001f78 <compensate_temperature>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        if (sensor_comp & BME280_PRESS)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <bme280_compensate_data+0x88>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	68b8      	ldr	r0, [r7, #8]
 8001ac6:	f000 fb27 	bl	8002118 <compensate_pressure>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BME280_HUM)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <bme280_compensate_data+0xaa>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f000 fce7 	bl	80024b4 <compensate_humidity>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (sensor_comp & BME280_HUM)
 8001af0:	e001      	b.n	8001af6 <bme280_compensate_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001af2:	23ff      	movs	r3, #255	@ 0xff
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001b10:	2301      	movs	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_SEL_OSR_HUM)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f000 f815 	bl	8001b50 <set_osr_humidity_settings>
 8001b26:	4603      	mov	r3, r0
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP))
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f842 	bl	8001bc4 <set_osr_press_temp_settings>
 8001b40:	4603      	mov	r3, r0
 8001b42:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_REG_CTRL_HUM;
 8001b5a:	23f2      	movs	r3, #242	@ 0xf2
 8001b5c:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	789b      	ldrb	r3, [r3, #2]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001b6a:	f107 010e 	add.w	r1, r7, #14
 8001b6e:	f107 000c 	add.w	r0, r7, #12
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f7ff fdd8 	bl	800172a <bme280_set_regs>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_REG_CTRL_MEAS;
 8001b86:	23f4      	movs	r3, #244	@ 0xf4
 8001b88:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001b8a:	7b38      	ldrb	r0, [r7, #12]
 8001b8c:	f107 010d 	add.w	r1, r7, #13
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f7ff fd91 	bl	80016ba <bme280_get_regs>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001ba4:	f107 010d 	add.w	r1, r7, #13
 8001ba8:	f107 000c 	add.w	r0, r7, #12
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f7ff fdbb 	bl	800172a <bme280_set_regs>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CTRL_MEAS;
 8001bd2:	23f4      	movs	r3, #244	@ 0xf4
 8001bd4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001bd6:	7db8      	ldrb	r0, [r7, #22]
 8001bd8:	f107 0115 	add.w	r1, r7, #21
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f7ff fd6b 	bl	80016ba <bme280_get_regs>
 8001be4:	4603      	mov	r3, r0
 8001be6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11f      	bne.n	8001c30 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_OSR_PRESS)
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001bfa:	f107 0315 	add.w	r3, r7, #21
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f88c 	bl	8001d1e <fill_osr_press_settings>
        }

        if (desired_settings & BME280_SEL_OSR_TEMP)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001c10:	f107 0315 	add.w	r3, r7, #21
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f89d 	bl	8001d56 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001c1c:	f107 0115 	add.w	r1, r7, #21
 8001c20:	f107 0016 	add.w	r0, r7, #22
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f7ff fd7f 	bl	800172a <bme280_set_regs>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CONFIG;
 8001c4a:	23f5      	movs	r3, #245	@ 0xf5
 8001c4c:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001c4e:	7db8      	ldrb	r0, [r7, #22]
 8001c50:	f107 0115 	add.w	r1, r7, #21
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f7ff fd2f 	bl	80016ba <bme280_get_regs>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11f      	bne.n	8001ca8 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_FILTER)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001c72:	f107 0315 	add.w	r3, r7, #21
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f81b 	bl	8001cb4 <fill_filter_settings>
        }

        if (desired_settings & BME280_SEL_STANDBY)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001c88:	f107 0315 	add.w	r3, r7, #21
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f82c 	bl	8001cec <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001c94:	f107 0115 	add.w	r1, r7, #21
 8001c98:	f107 0016 	add.w	r0, r7, #22
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f7ff fd43 	bl	800172a <bme280_set_regs>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f023 031c 	bic.w	r3, r3, #28
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	78db      	ldrb	r3, [r3, #3]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 031c 	and.w	r3, r3, #28
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	791b      	ldrb	r3, [r3, #4]
 8001d06:	015b      	lsls	r3, r3, #5
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	701a      	strb	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	f023 031c 	bic.w	r3, r3, #28
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	f003 031c 	and.w	r3, r3, #28
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	701a      	strb	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	701a      	strb	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * bme280_settings structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3302      	adds	r3, #2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	109b      	asrs	r3, r3, #2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3302      	adds	r3, #2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	109b      	asrs	r3, r3, #2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3303      	adds	r3, #3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	711a      	strb	r2, [r3, #4]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	031b      	lsls	r3, r3, #12
 8001dfe:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3303      	adds	r3, #3
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3305      	adds	r3, #5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3306      	adds	r3, #6
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3307      	adds	r3, #7
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	609a      	str	r2, [r3, #8]
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_PWR_CTRL;
 8001e84:	23f4      	movs	r3, #244	@ 0xf4
 8001e86:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001e88:	7bb8      	ldrb	r0, [r7, #14]
 8001e8a:	f107 010d 	add.w	r1, r7, #13
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f7ff fc12 	bl	80016ba <bme280_get_regs>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d117      	bne.n	8001ed2 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001ebe:	f107 010d 	add.w	r1, r7, #13
 8001ec2:	f107 000e 	add.w	r0, r7, #14
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f7ff fc2e 	bl	800172a <bme280_set_regs>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 8001ee6:	f107 0110 	add.w	r1, r7, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	20f2      	movs	r0, #242	@ 0xf2
 8001ef0:	f7ff fbe3 	bl	80016ba <bme280_get_regs>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d118      	bne.n	8001f32 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001f00:	f107 0208 	add.w	r2, r7, #8
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff3c 	bl	8001d88 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fd16 	bl	8001942 <bme280_soft_reset>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f808 	bl	8001f3e <reload_device_settings>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	201f      	movs	r0, #31
 8001f4e:	f7ff fdd8 	bl	8001b02 <set_osr_settings>
 8001f52:	4603      	mov	r3, r0
 8001f54:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	201f      	movs	r0, #31
 8001f64:	f7ff fe6a 	bl	8001c3c <set_filter_standby_settings>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b08c      	sub	sp, #48	@ 0x30
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b5d      	ldr	r3, [pc, #372]	@ (80020fc <compensate_temperature+0x184>)
 8001f88:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b5b      	ldr	r3, [pc, #364]	@ (8002100 <compensate_temperature+0x188>)
 8001f92:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fab2 	bl	8000504 <__aeabi_ui2d>
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b57      	ldr	r3, [pc, #348]	@ (8002104 <compensate_temperature+0x18c>)
 8001fa6:	f7fe fc51 	bl	800084c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4614      	mov	r4, r2
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe faa4 	bl	8000504 <__aeabi_ui2d>
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b51      	ldr	r3, [pc, #324]	@ (8002108 <compensate_temperature+0x190>)
 8001fc2:	f7fe fc43 	bl	800084c <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe f95b 	bl	8000288 <__aeabi_dsub>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa9f 	bl	8000524 <__aeabi_i2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fee:	f7fe fb03 	bl	80005f8 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa80 	bl	8000504 <__aeabi_ui2d>
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800200c:	f7fe fc1e 	bl	800084c <__aeabi_ddiv>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4614      	mov	r4, r2
 8002016:	461d      	mov	r5, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa71 	bl	8000504 <__aeabi_ui2d>
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b39      	ldr	r3, [pc, #228]	@ (800210c <compensate_temperature+0x194>)
 8002028:	f7fe fc10 	bl	800084c <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe f928 	bl	8000288 <__aeabi_dsub>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002048:	f7fe fad6 	bl	80005f8 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa62 	bl	8000524 <__aeabi_i2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f7fe fac6 	bl	80005f8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207c:	f7fe f906 	bl	800028c <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fd66 	bl	8000b58 <__aeabi_d2iz>
 800208c:	4602      	mov	r2, r0
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800209a:	f7fe f8f7 	bl	800028c <__adddf3>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <compensate_temperature+0x198>)
 80020ac:	f7fe fbce 	bl	800084c <__aeabi_ddiv>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    if (temperature < temperature_min)
 80020b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020c0:	f7fe fd0c 	bl	8000adc <__aeabi_dcmplt>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 80020ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80020d2:	e00c      	b.n	80020ee <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 80020d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020dc:	f7fe fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 80020e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }

    return temperature;
 80020ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	3730      	adds	r7, #48	@ 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bdb0      	pop	{r4, r5, r7, pc}
 80020fc:	c0440000 	.word	0xc0440000
 8002100:	40554000 	.word	0x40554000
 8002104:	40d00000 	.word	0x40d00000
 8002108:	40900000 	.word	0x40900000
 800210c:	40c00000 	.word	0x40c00000
 8002110:	40b40000 	.word	0x40b40000
 8002114:	00000000 	.word	0x00000000

08002118 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b08e      	sub	sp, #56	@ 0x38
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8002122:	a3c5      	add	r3, pc, #788	@ (adr r3, 8002438 <compensate_pressure+0x320>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double pressure_max = 110000.0;
 800212c:	a3c4      	add	r3, pc, #784	@ (adr r3, 8002440 <compensate_pressure+0x328>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9f2 	bl	8000524 <__aeabi_i2d>
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002148:	f7fe fb80 	bl	800084c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	4bbd      	ldr	r3, [pc, #756]	@ (8002450 <compensate_pressure+0x338>)
 800215a:	f7fe f895 	bl	8000288 <__aeabi_dsub>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8002166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800216a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800216e:	f7fe fa43 	bl	80005f8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4614      	mov	r4, r2
 8002178:	461d      	mov	r5, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9cf 	bl	8000524 <__aeabi_i2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f7fe fa33 	bl	80005f8 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4bad      	ldr	r3, [pc, #692]	@ (8002454 <compensate_pressure+0x33c>)
 80021a0:	f7fe fb54 	bl	800084c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9b6 	bl	8000524 <__aeabi_i2d>
 80021b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021bc:	f7fe fa1c 	bl	80005f8 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	f7fe f85e 	bl	800028c <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d8:	f7fe f858 	bl	800028c <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	4b9b      	ldr	r3, [pc, #620]	@ (8002458 <compensate_pressure+0x340>)
 80021ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ee:	f7fe fb2d 	bl	800084c <__aeabi_ddiv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f98f 	bl	8000524 <__aeabi_i2d>
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	4b94      	ldr	r3, [pc, #592]	@ (800245c <compensate_pressure+0x344>)
 800220c:	f7fe f9f4 	bl	80005f8 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fe f838 	bl	800028c <__adddf3>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f97a 	bl	8000524 <__aeabi_i2d>
 8002230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002234:	f7fe f9e0 	bl	80005f8 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002244:	f7fe f9d8 	bl	80005f8 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b82      	ldr	r3, [pc, #520]	@ (8002460 <compensate_pressure+0x348>)
 8002256:	f7fe faf9 	bl	800084c <__aeabi_ddiv>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f95b 	bl	8000524 <__aeabi_i2d>
 800226e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002272:	f7fe f9c1 	bl	80005f8 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002282:	f7fe f803 	bl	800028c <__adddf3>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <compensate_pressure+0x348>)
 8002294:	f7fe fada 	bl	800084c <__aeabi_ddiv>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002454 <compensate_pressure+0x33c>)
 80022a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022aa:	f7fe facf 	bl	800084c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002464 <compensate_pressure+0x34c>)
 80022bc:	f7fd ffe6 	bl	800028c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	88db      	ldrh	r3, [r3, #6]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f919 	bl	8000504 <__aeabi_ui2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fe f98d 	bl	80005f8 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* Avoid exception caused by division by zero */
    if (var1 > (0.0))
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022f2:	f7fe fc11 	bl	8000b18 <__aeabi_dcmpgt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80d0 	beq.w	800249e <compensate_pressure+0x386>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8fe 	bl	8000504 <__aeabi_ui2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	f04f 0000 	mov.w	r0, #0
 8002310:	4955      	ldr	r1, [pc, #340]	@ (8002468 <compensate_pressure+0x350>)
 8002312:	f7fd ffb9 	bl	8000288 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	4b52      	ldr	r3, [pc, #328]	@ (800246c <compensate_pressure+0x354>)
 8002324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002328:	f7fe fa90 	bl	800084c <__aeabi_ddiv>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002334:	f7fd ffa8 	bl	8000288 <__aeabi_dsub>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	a341      	add	r3, pc, #260	@ (adr r3, 8002448 <compensate_pressure+0x330>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f957 	bl	80005f8 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002356:	f7fe fa79 	bl	800084c <__aeabi_ddiv>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8db 	bl	8000524 <__aeabi_i2d>
 800236e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002372:	f7fe f941 	bl	80005f8 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002382:	f7fe f939 	bl	80005f8 <__aeabi_dmul>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b37      	ldr	r3, [pc, #220]	@ (8002470 <compensate_pressure+0x358>)
 8002394:	f7fe fa5a 	bl	800084c <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8bc 	bl	8000524 <__aeabi_i2d>
 80023ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023b0:	f7fe f922 	bl	80005f8 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <compensate_pressure+0x33c>)
 80023c2:	f7fe fa43 	bl	800084c <__aeabi_ddiv>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 80023ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023d6:	f7fd ff59 	bl	800028c <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4614      	mov	r4, r2
 80023e0:	461d      	mov	r5, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f89b 	bl	8000524 <__aeabi_i2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7fd ff49 	bl	800028c <__adddf3>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <compensate_pressure+0x35c>)
 8002408:	f7fe fa20 	bl	800084c <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002414:	f7fd ff3a 	bl	800028c <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

        if (pressure < pressure_min)
 8002420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002424:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002428:	f7fe fb58 	bl	8000adc <__aeabi_dcmplt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d027      	beq.n	8002482 <compensate_pressure+0x36a>
 8002432:	e021      	b.n	8002478 <compensate_pressure+0x360>
 8002434:	f3af 8000 	nop.w
 8002438:	00000000 	.word	0x00000000
 800243c:	40dd4c00 	.word	0x40dd4c00
 8002440:	00000000 	.word	0x00000000
 8002444:	40fadb00 	.word	0x40fadb00
 8002448:	00000000 	.word	0x00000000
 800244c:	40b86a00 	.word	0x40b86a00
 8002450:	40ef4000 	.word	0x40ef4000
 8002454:	40e00000 	.word	0x40e00000
 8002458:	40100000 	.word	0x40100000
 800245c:	40f00000 	.word	0x40f00000
 8002460:	41200000 	.word	0x41200000
 8002464:	3ff00000 	.word	0x3ff00000
 8002468:	41300000 	.word	0x41300000
 800246c:	40b00000 	.word	0x40b00000
 8002470:	41e00000 	.word	0x41e00000
 8002474:	40300000 	.word	0x40300000
        {
            pressure = pressure_min;
 8002478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800247c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8002480:	e011      	b.n	80024a6 <compensate_pressure+0x38e>
        }
        else if (pressure > pressure_max)
 8002482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002486:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800248a:	f7fe fb45 	bl	8000b18 <__aeabi_dcmpgt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <compensate_pressure+0x38e>
        {
            pressure = pressure_max;
 8002494:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002498:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800249c:	e003      	b.n	80024a6 <compensate_pressure+0x38e>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 800249e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    return pressure;
 80024a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	3738      	adds	r7, #56	@ 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bdb0      	pop	{r4, r5, r7, pc}

080024b4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b094      	sub	sp, #80	@ 0x50
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double humidity_max = 100.0;
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <compensate_humidity+0x218>)
 80024d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f823 	bl	8000524 <__aeabi_i2d>
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <compensate_humidity+0x21c>)
 80024e4:	f7fd fed0 	bl	8000288 <__aeabi_dsub>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f814 	bl	8000524 <__aeabi_i2d>
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4b74      	ldr	r3, [pc, #464]	@ (80026d4 <compensate_humidity+0x220>)
 8002502:	f7fe f879 	bl	80005f8 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4614      	mov	r4, r2
 800250c:	461d      	mov	r5, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f805 	bl	8000524 <__aeabi_i2d>
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b6e      	ldr	r3, [pc, #440]	@ (80026d8 <compensate_humidity+0x224>)
 8002520:	f7fe f994 	bl	800084c <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002530:	f7fe f862 	bl	80005f8 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fd fea6 	bl	800028c <__adddf3>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    var3 = uncomp_data->humidity - var2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd ffd9 	bl	8000504 <__aeabi_ui2d>
 8002552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002556:	f7fd fe97 	bl	8000288 <__aeabi_dsub>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffdb 	bl	8000524 <__aeabi_i2d>
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b5a      	ldr	r3, [pc, #360]	@ (80026dc <compensate_humidity+0x228>)
 8002574:	f7fe f96a 	bl	800084c <__aeabi_ddiv>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	7f1b      	ldrb	r3, [r3, #28]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffbd 	bl	8000504 <__aeabi_ui2d>
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	4b54      	ldr	r3, [pc, #336]	@ (80026e0 <compensate_humidity+0x22c>)
 8002590:	f7fe f95c 	bl	800084c <__aeabi_ddiv>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025a0:	f7fe f82a 	bl	80005f8 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	4b4c      	ldr	r3, [pc, #304]	@ (80026e4 <compensate_humidity+0x230>)
 80025b2:	f7fd fe6b 	bl	800028c <__adddf3>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffad 	bl	8000524 <__aeabi_i2d>
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	4b44      	ldr	r3, [pc, #272]	@ (80026e0 <compensate_humidity+0x22c>)
 80025d0:	f7fe f93c 	bl	800084c <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025e0:	f7fe f80a 	bl	80005f8 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025f0:	f7fe f802 	bl	80005f8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b38      	ldr	r3, [pc, #224]	@ (80026e4 <compensate_humidity+0x230>)
 8002602:	f7fd fe43 	bl	800028c <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 800260e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002612:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002616:	f7fd ffef 	bl	80005f8 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
 8002622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002626:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262a:	f7fd ffe5 	bl	80005f8 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd ffdf 	bl	80005f8 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	7e1b      	ldrb	r3, [r3, #24]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff5c 	bl	8000504 <__aeabi_ui2d>
 800264c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002650:	f7fd ffd2 	bl	80005f8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <compensate_humidity+0x234>)
 8002662:	f7fe f8f3 	bl	800084c <__aeabi_ddiv>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	491d      	ldr	r1, [pc, #116]	@ (80026e4 <compensate_humidity+0x230>)
 8002670:	f7fd fe0a 	bl	8000288 <__aeabi_dsub>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267c:	f7fd ffbc 	bl	80005f8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (humidity > humidity_max)
 8002688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800268c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002690:	f7fe fa42 	bl	8000b18 <__aeabi_dcmpgt>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 800269a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800269e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80026a2:	e00c      	b.n	80026be <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 80026a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80026ac:	f7fe fa16 	bl	8000adc <__aeabi_dcmplt>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 80026b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    }

    return humidity;
 80026be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	3750      	adds	r7, #80	@ 0x50
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}
 80026cc:	40590000 	.word	0x40590000
 80026d0:	40f2c000 	.word	0x40f2c000
 80026d4:	40500000 	.word	0x40500000
 80026d8:	40d00000 	.word	0x40d00000
 80026dc:	40f00000 	.word	0x40f00000
 80026e0:	41900000 	.word	0x41900000
 80026e4:	3ff00000 	.word	0x3ff00000
 80026e8:	41200000 	.word	0x41200000

080026ec <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_TEMP_PRESS_CALIB_DATA;
 80026f4:	2388      	movs	r3, #136	@ 0x88
 80026f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
 8002710:	f107 010c 	add.w	r1, r7, #12
 8002714:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	221a      	movs	r2, #26
 800271c:	f7fe ffcd 	bl	80016ba <bme280_get_regs>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BME280_OK)
 8002726:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11d      	bne.n	800276a <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f848 	bl	80027ca <parse_temp_press_calib_data>
        reg_addr = BME280_REG_HUMIDITY_CALIB_DATA;
 800273a:	23e1      	movs	r3, #225	@ 0xe1
 800273c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
 8002740:	f107 010c 	add.w	r1, r7, #12
 8002744:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2207      	movs	r2, #7
 800274c:	f7fe ffb5 	bl	80016ba <bme280_get_regs>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 8002756:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f8df 	bl	8002928 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800276a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800276e:	4618      	mov	r0, r3
 8002770:	3728      	adds	r7, #40	@ 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8002776:	b480      	push	{r7}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8002784:	2301      	movs	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e015      	b.n	80027b6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	441a      	add	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	440b      	add	r3, r1
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	441a      	add	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	440b      	add	r3, r1
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3e5      	bcc.n	800278a <interleave_reg_addr+0x14>
    }
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	3318      	adds	r3, #24
 80027d8:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3301      	adds	r3, #1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	b21a      	sxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3303      	adds	r3, #3
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b21b      	sxth	r3, r3
 8002806:	4313      	orrs	r3, r2
 8002808:	b21a      	sxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3305      	adds	r3, #5
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	b21a      	sxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b21a      	sxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3307      	adds	r3, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	b21a      	sxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3306      	adds	r3, #6
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b21b      	sxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	b21b      	sxth	r3, r3
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3309      	adds	r3, #9
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3308      	adds	r3, #8
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21a      	sxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	330b      	adds	r3, #11
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21a      	sxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	330a      	adds	r3, #10
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b21b      	sxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b21a      	sxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	330d      	adds	r3, #13
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b21a      	sxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	330c      	adds	r3, #12
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b21b      	sxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b21a      	sxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	330f      	adds	r3, #15
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	b21a      	sxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	330e      	adds	r3, #14
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3311      	adds	r3, #17
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	b21a      	sxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3310      	adds	r3, #16
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b21b      	sxth	r3, r3
 80028be:	4313      	orrs	r3, r2
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3313      	adds	r3, #19
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3312      	adds	r3, #18
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b21a      	sxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3315      	adds	r3, #21
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3314      	adds	r3, #20
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3317      	adds	r3, #23
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b21a      	sxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3316      	adds	r3, #22
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b21a      	sxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3319      	adds	r3, #25
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	761a      	strb	r2, [r3, #24]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	3318      	adds	r3, #24
 8002936:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	b21a      	sxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b21b      	sxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b21a      	sxth	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3302      	adds	r3, #2
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3303      	adds	r3, #3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b29b      	uxth	r3, r3
 8002968:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b21b      	sxth	r3, r3
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8002978:	8a7a      	ldrh	r2, [r7, #18]
 800297a:	8a3b      	ldrh	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	b21a      	sxth	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3305      	adds	r3, #5
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b25b      	sxtb	r3, r3
 800298c:	b29b      	uxth	r3, r3
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	b29b      	uxth	r3, r3
 8002992:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	b2db      	uxtb	r3, r3
 800299e:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80029a0:	89fa      	ldrh	r2, [r7, #14]
 80029a2:	89bb      	ldrh	r3, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3306      	adds	r3, #6
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b25a      	sxtb	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80029d8:	79fa      	ldrb	r2, [r7, #7]
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	4013      	ands	r3, r2
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e001      	b.n	80029ee <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <null_ptr_check+0x26>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <null_ptr_check+0x26>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <null_ptr_check+0x26>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8002a20:	23ff      	movs	r3, #255	@ 0xff
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <HAL_Init+0x40>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <HAL_Init+0x40>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	@ (8002a78 <HAL_Init+0x40>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f92b 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7fe fc42 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f935 	bl	8002d0a <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f000 f90b 	bl	8002cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	@ (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_IncTick+0x1c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_IncTick+0x20>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a03      	ldr	r2, [pc, #12]	@ (8002afc <HAL_IncTick+0x20>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	20000008 	.word	0x20000008
 8002afc:	2000024c 	.word	0x2000024c

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b02      	ldr	r3, [pc, #8]	@ (8002b10 <HAL_GetTick+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	2000024c 	.word	0x2000024c

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fff0 	bl	8002b00 <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d005      	beq.n	8002b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_Delay+0x44>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b3a:	bf00      	nop
 8002b3c:	f7ff ffe0 	bl	8002b00 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d8f7      	bhi.n	8002b3c <HAL_Delay+0x28>
  {
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000008 	.word	0x20000008

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	@ (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	@ (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	@ 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	@ 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f7ff ff90 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff49 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff5e 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff90 	bl	8002c14 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5f 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffb0 	bl	8002c78 <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	@ 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e16b      	b.n	8003018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 815a 	bne.w	8003012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80b4 	beq.w	8003012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b5f      	ldr	r3, [pc, #380]	@ (800302c <HAL_GPIO_Init+0x308>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800302c <HAL_GPIO_Init+0x308>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eba:	4b5c      	ldr	r3, [pc, #368]	@ (800302c <HAL_GPIO_Init+0x308>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8003030 <HAL_GPIO_Init+0x30c>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a51      	ldr	r2, [pc, #324]	@ (8003034 <HAL_GPIO_Init+0x310>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_GPIO_Init+0x314>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	@ (800303c <HAL_GPIO_Init+0x318>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	@ (8003040 <HAL_GPIO_Init+0x31c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003044 <HAL_GPIO_Init+0x320>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	@ (8003048 <HAL_GPIO_Init+0x324>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800304c <HAL_GPIO_Init+0x328>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <HAL_GPIO_Init+0x32c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x20a>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00e      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4934      	ldr	r1, [pc, #208]	@ (8003030 <HAL_GPIO_Init+0x30c>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8e:	4a31      	ldr	r2, [pc, #196]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f94:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb8:	4a26      	ldr	r2, [pc, #152]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <HAL_GPIO_Init+0x330>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300c:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <HAL_GPIO_Init+0x330>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f ae90 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	@ 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40023800 	.word	0x40023800
 8003030:	40013800 	.word	0x40013800
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40021400 	.word	0x40021400
 800304c:	40021800 	.word	0x40021800
 8003050:	40021c00 	.word	0x40021c00
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
 8003064:	4613      	mov	r3, r2
 8003066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003068:	787b      	ldrb	r3, [r7, #1]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003074:	e003      	b.n	800307e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	041a      	lsls	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	619a      	str	r2, [r3, #24]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e267      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00c      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b85      	ldr	r3, [pc, #532]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d112      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b82      	ldr	r3, [pc, #520]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b7e      	ldr	r3, [pc, #504]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e242      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b70      	ldr	r3, [pc, #448]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6f      	ldr	r2, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6d      	ldr	r3, [pc, #436]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6c      	ldr	r2, [pc, #432]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b69      	ldr	r3, [pc, #420]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff fcde 	bl	8002b00 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7ff fcda 	bl	8002b00 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	@ 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e207      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5b      	ldr	r3, [pc, #364]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7ff fcca 	bl	8002b00 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7ff fcc6 	bl	8002b00 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1f3      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319e:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1c7      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7ff fc7f 	bl	8002b00 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7ff fc7b 	bl	8002b00 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1a8      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7ff fc5e 	bl	8002b00 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7ff fc5a 	bl	8002b00 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e187      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_RCC_OscConfig+0x248>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7ff fc3e 	bl	8002b00 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7ff fc3a 	bl	8002b00 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e167      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_OscConfig+0x240>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_OscConfig+0x248>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7ff fc27 	bl	8002b00 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7ff fc23 	bl	8002b00 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e150      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b88      	ldr	r3, [pc, #544]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b81      	ldr	r3, [pc, #516]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7d      	ldr	r3, [pc, #500]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	4a7c      	ldr	r2, [pc, #496]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	@ 0x40
 800330e:	4b7a      	ldr	r3, [pc, #488]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b74      	ldr	r3, [pc, #464]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7ff fbe3 	bl	8002b00 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7ff fbdf 	bl	8002b00 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e10c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6a      	ldr	r3, [pc, #424]	@ (80034fc <HAL_RCC_OscConfig+0x474>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ea>
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a63      	ldr	r2, [pc, #396]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x30c>
 800337a:	4b5f      	ldr	r3, [pc, #380]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	4a5e      	ldr	r2, [pc, #376]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
 8003386:	4b5c      	ldr	r3, [pc, #368]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a5b      	ldr	r2, [pc, #364]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003394:	4b58      	ldr	r3, [pc, #352]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a57      	ldr	r2, [pc, #348]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a54      	ldr	r2, [pc, #336]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7ff fba4 	bl	8002b00 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7ff fba0 	bl	8002b00 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0cb      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b49      	ldr	r3, [pc, #292]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x334>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7ff fb8e 	bl	8002b00 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7ff fb8a 	bl	8002b00 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0b5      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b39      	ldr	r3, [pc, #228]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	4a38      	ldr	r2, [pc, #224]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a1 	beq.w	8003568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d05c      	beq.n	80034ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d141      	bne.n	80034be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7ff fb5e 	bl	8002b00 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7ff fb5a 	bl	8002b00 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e087      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	491b      	ldr	r1, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7ff fb33 	bl	8002b00 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349e:	f7ff fb2f 	bl	8002b00 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e05c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x416>
 80034bc:	e054      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_RCC_OscConfig+0x478>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7ff fb1c 	bl	8002b00 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7ff fb18 	bl	8002b00 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e045      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x444>
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e038      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d121      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800353a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cc      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b68      	ldr	r3, [pc, #416]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d90c      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b65      	ldr	r3, [pc, #404]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b3f      	ldr	r3, [pc, #252]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3b      	ldr	r3, [pc, #236]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e067      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4934      	ldr	r1, [pc, #208]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7ff fa4a 	bl	8002b00 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7ff fa46 	bl	8002b00 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2b      	ldr	r3, [pc, #172]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20c      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff f9ac 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	08007024 	.word	0x08007024
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b094      	sub	sp, #80	@ 0x50
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003750:	2300      	movs	r3, #0
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003754:	2300      	movs	r3, #0
 8003756:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375c:	4b7c      	ldr	r3, [pc, #496]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f200 80e7 	bhi.w	800393c <HAL_RCC_GetSysClockFreq+0x1f8>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
 8003776:	e0e1      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b76      	ldr	r3, [pc, #472]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x210>)
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800377c:	e0e1      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x214>)
 8003780:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003782:	e0de      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b72      	ldr	r3, [pc, #456]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800378c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378e:	4b70      	ldr	r3, [pc, #448]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d065      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	2200      	movs	r2, #0
 80037a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	f04f 0000 	mov.w	r0, #0
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	0159      	lsls	r1, r3, #5
 80037c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c8:	0150      	lsls	r0, r2, #5
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4621      	mov	r1, r4
 80037d0:	1a51      	subs	r1, r2, r1
 80037d2:	6139      	str	r1, [r7, #16]
 80037d4:	4629      	mov	r1, r5
 80037d6:	eb63 0301 	sbc.w	r3, r3, r1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e8:	4659      	mov	r1, fp
 80037ea:	018b      	lsls	r3, r1, #6
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037f2:	4651      	mov	r1, sl
 80037f4:	018a      	lsls	r2, r1, #6
 80037f6:	46d4      	mov	ip, sl
 80037f8:	ebb2 080c 	subs.w	r8, r2, ip
 80037fc:	4659      	mov	r1, fp
 80037fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800380e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003816:	4690      	mov	r8, r2
 8003818:	4699      	mov	r9, r3
 800381a:	4623      	mov	r3, r4
 800381c:	eb18 0303 	adds.w	r3, r8, r3
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	462b      	mov	r3, r5
 8003824:	eb49 0303 	adc.w	r3, r9, r3
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003836:	4629      	mov	r1, r5
 8003838:	024b      	lsls	r3, r1, #9
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	4604      	mov	r4, r0
 8003840:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003844:	4601      	mov	r1, r0
 8003846:	024a      	lsls	r2, r1, #9
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384e:	2200      	movs	r2, #0
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003858:	f7fd f9a6 	bl	8000ba8 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003864:	e05c      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003866:	4b3a      	ldr	r3, [pc, #232]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	2200      	movs	r2, #0
 800386e:	4618      	mov	r0, r3
 8003870:	4611      	mov	r1, r2
 8003872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
 800387c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	0159      	lsls	r1, r3, #5
 800388e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003892:	0150      	lsls	r0, r2, #5
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	46c4      	mov	ip, r8
 800389a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	468c      	mov	ip, r1
 80038a4:	eb63 0b0c 	sbc.w	fp, r3, ip
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038bc:	ebb2 040a 	subs.w	r4, r2, sl
 80038c0:	eb63 050b 	sbc.w	r5, r3, fp
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4603      	mov	r3, r0
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	460b      	mov	r3, r1
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4620      	mov	r0, r4
 80038f8:	4629      	mov	r1, r5
 80038fa:	4604      	mov	r4, r0
 80038fc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003900:	4601      	mov	r1, r0
 8003902:	028a      	lsls	r2, r1, #10
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390a:	2200      	movs	r2, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	61fa      	str	r2, [r7, #28]
 8003910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003914:	f7fd f948 	bl	8000ba8 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	3301      	adds	r3, #1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x210>)
 800393e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003944:	4618      	mov	r0, r3
 8003946:	3750      	adds	r7, #80	@ 0x50
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	007a1200 	.word	0x007a1200

0800395c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07b      	b.n	8003a66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800397e:	d009      	beq.n	8003994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
 8003986:	e005      	b.n	8003994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fcc8 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a18:	ea42 0103 	orr.w	r1, r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	f003 0104 	and.w	r1, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	f003 0210 	and.w	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b088      	sub	sp, #32
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_SPI_Transmit+0x22>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e12d      	b.n	8003cec <HAL_SPI_Transmit+0x27e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a98:	f7ff f832 	bl	8002b00 <HAL_GetTick>
 8003a9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ab2:	e116      	b.n	8003ce2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0x52>
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ac4:	e10d      	b.n	8003ce2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b0c:	d10f      	bne.n	8003b2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b40      	cmp	r3, #64	@ 0x40
 8003b3a:	d007      	beq.n	8003b4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b54:	d14f      	bne.n	8003bf6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SPI_Transmit+0xf6>
 8003b5e:	8afb      	ldrh	r3, [r7, #22]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d142      	bne.n	8003bea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b88:	e02f      	b.n	8003bea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d112      	bne.n	8003bbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	1c9a      	adds	r2, r3, #2
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bbc:	e015      	b.n	8003bea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbe:	f7fe ff9f 	bl	8002b00 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d803      	bhi.n	8003bd6 <HAL_SPI_Transmit+0x168>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_Transmit+0x16e>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003be8:	e07b      	b.n	8003ce2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ca      	bne.n	8003b8a <HAL_SPI_Transmit+0x11c>
 8003bf4:	e050      	b.n	8003c98 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Transmit+0x196>
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d144      	bne.n	8003c8e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c2a:	e030      	b.n	8003c8e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d113      	bne.n	8003c62 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c60:	e015      	b.n	8003c8e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c62:	f7fe ff4d 	bl	8002b00 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d803      	bhi.n	8003c7a <HAL_SPI_Transmit+0x20c>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_Transmit+0x212>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c8c:	e029      	b.n	8003ce2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1c9      	bne.n	8003c2c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fbdf 	bl	8004460 <SPI_EndRxTxTransaction>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e003      	b.n	8003ce2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
 8003d16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d18:	e0fb      	b.n	8003f12 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d22:	d112      	bne.n	8003d4a <HAL_SPI_Receive+0x56>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10e      	bne.n	8003d4a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f8ef 	bl	8003f24 <HAL_SPI_TransmitReceive>
 8003d46:	4603      	mov	r3, r0
 8003d48:	e0e8      	b.n	8003f1c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_SPI_Receive+0x64>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e0e1      	b.n	8003f1c <HAL_SPI_Receive+0x228>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d60:	f7fe fece 	bl	8002b00 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_SPI_Receive+0x7e>
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d76:	e0cc      	b.n	8003f12 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbe:	d10f      	bne.n	8003de0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dea:	2b40      	cmp	r3, #64	@ 0x40
 8003dec:	d007      	beq.n	8003dfe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d16a      	bne.n	8003edc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e06:	e032      	b.n	8003e6e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d115      	bne.n	8003e42 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f103 020c 	add.w	r2, r3, #12
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e40:	e015      	b.n	8003e6e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e42:	f7fe fe5d 	bl	8002b00 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d803      	bhi.n	8003e5a <HAL_SPI_Receive+0x166>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d102      	bne.n	8003e60 <HAL_SPI_Receive+0x16c>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e6c:	e051      	b.n	8003f12 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1c7      	bne.n	8003e08 <HAL_SPI_Receive+0x114>
 8003e78:	e035      	b.n	8003ee6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d113      	bne.n	8003eb0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	b292      	uxth	r2, r2
 8003e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eae:	e015      	b.n	8003edc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb0:	f7fe fe26 	bl	8002b00 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d803      	bhi.n	8003ec8 <HAL_SPI_Receive+0x1d4>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Receive+0x1da>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003eda:	e01a      	b.n	8003f12 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1c9      	bne.n	8003e7a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fa52 	bl	8004394 <SPI_EndRxTransaction>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
 8003f08:	e003      	b.n	8003f12 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	@ 0x30
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f32:	2301      	movs	r3, #1
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x26>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e198      	b.n	800427c <HAL_SPI_TransmitReceive+0x358>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f52:	f7fe fdd5 	bl	8002b00 <HAL_GetTick>
 8003f56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d00f      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x70>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f7a:	d107      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x68>
 8003f84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d003      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f92:	e16d      	b.n	8004270 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x82>
 8003fa0:	887b      	ldrh	r3, [r7, #2]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003fac:	e160      	b.n	8004270 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d003      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	887a      	ldrh	r2, [r7, #2]
 8003fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	887a      	ldrh	r2, [r7, #2]
 8003fea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b40      	cmp	r3, #64	@ 0x40
 8004004:	d007      	beq.n	8004016 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800401e:	d17c      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SPI_TransmitReceive+0x10a>
 8004028:	8b7b      	ldrh	r3, [r7, #26]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d16a      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004052:	e057      	b.n	8004104 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d11b      	bne.n	800409a <HAL_SPI_TransmitReceive+0x176>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d016      	beq.n	800409a <HAL_SPI_TransmitReceive+0x176>
 800406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d113      	bne.n	800409a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d119      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x1b8>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d014      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040bc:	b292      	uxth	r2, r2
 80040be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040dc:	f7fe fd10 	bl	8002b00 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d80b      	bhi.n	8004104 <HAL_SPI_TransmitReceive+0x1e0>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d007      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004102:	e0b5      	b.n	8004270 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1a2      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x130>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d19d      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x130>
 8004118:	e080      	b.n	800421c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x204>
 8004122:	8b7b      	ldrh	r3, [r7, #26]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d16f      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414e:	e05b      	b.n	8004208 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d11c      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x274>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d017      	beq.n	8004198 <HAL_SPI_TransmitReceive+0x274>
 8004168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416a:	2b01      	cmp	r3, #1
 800416c:	d114      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <HAL_SPI_TransmitReceive+0x2b6>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d014      	beq.n	80041da <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d6:	2301      	movs	r3, #1
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041da:	f7fe fc91 	bl	8002b00 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d803      	bhi.n	80041f2 <HAL_SPI_TransmitReceive+0x2ce>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x2d4>
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004206:	e033      	b.n	8004270 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d19e      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x22c>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d199      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f91d 	bl	8004460 <SPI_EndRxTxTransaction>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d006      	beq.n	800423a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004238:	e01a      	b.n	8004270 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004266:	e003      	b.n	8004270 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004278:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800427c:	4618      	mov	r0, r3
 800427e:	3730      	adds	r7, #48	@ 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004294:	f7fe fc34 	bl	8002b00 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4413      	add	r3, r2
 80042a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042a4:	f7fe fc2c 	bl	8002b00 <HAL_GetTick>
 80042a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042aa:	4b39      	ldr	r3, [pc, #228]	@ (8004390 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	0d1b      	lsrs	r3, r3, #20
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	fb02 f303 	mul.w	r3, r2, r3
 80042b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ba:	e054      	b.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d050      	beq.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c4:	f7fe fc1c 	bl	8002b00 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d902      	bls.n	80042da <SPI_WaitFlagStateUntilTimeout+0x56>
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d13d      	bne.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042f2:	d111      	bne.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042fc:	d004      	beq.n	8004308 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004306:	d107      	bne.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004316:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004320:	d10f      	bne.n	8004342 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004340:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e017      	b.n	8004386 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3b01      	subs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d19b      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000000 	.word	0x20000000

08004394 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043a8:	d111      	bne.n	80043ce <SPI_EndRxTransaction+0x3a>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b2:	d004      	beq.n	80043be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043bc:	d107      	bne.n	80043ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043d6:	d12a      	bne.n	800442e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e0:	d012      	beq.n	8004408 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff ff49 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02d      	beq.n	8004454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e026      	b.n	8004456 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	2101      	movs	r1, #1
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff ff36 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01a      	beq.n	8004454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e013      	b.n	8004456 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	2101      	movs	r1, #1
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff ff23 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e000      	b.n	8004456 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2201      	movs	r2, #1
 8004474:	2102      	movs	r1, #2
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff ff04 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e032      	b.n	80044f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004492:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <SPI_EndRxTxTransaction+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <SPI_EndRxTxTransaction+0xa4>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	0d5b      	lsrs	r3, r3, #21
 800449e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b0:	d112      	bne.n	80044d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2180      	movs	r1, #128	@ 0x80
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff fee1 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e00f      	b.n	80044f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d0f2      	beq.n	80044d8 <SPI_EndRxTxTransaction+0x78>
 80044f2:	e000      	b.n	80044f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80044f4:	bf00      	nop
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000000 	.word	0x20000000
 8004504:	165e9f81 	.word	0x165e9f81

08004508 <__cvt>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	b088      	sub	sp, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	461d      	mov	r5, r3
 8004512:	4614      	mov	r4, r2
 8004514:	bfbc      	itt	lt
 8004516:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800451a:	4614      	movlt	r4, r2
 800451c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800451e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004520:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004524:	bfb6      	itet	lt
 8004526:	461d      	movlt	r5, r3
 8004528:	2300      	movge	r3, #0
 800452a:	232d      	movlt	r3, #45	@ 0x2d
 800452c:	7013      	strb	r3, [r2, #0]
 800452e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004530:	f023 0820 	bic.w	r8, r3, #32
 8004534:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004538:	d005      	beq.n	8004546 <__cvt+0x3e>
 800453a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800453e:	d100      	bne.n	8004542 <__cvt+0x3a>
 8004540:	3601      	adds	r6, #1
 8004542:	2302      	movs	r3, #2
 8004544:	e000      	b.n	8004548 <__cvt+0x40>
 8004546:	2303      	movs	r3, #3
 8004548:	aa07      	add	r2, sp, #28
 800454a:	9204      	str	r2, [sp, #16]
 800454c:	aa06      	add	r2, sp, #24
 800454e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004552:	e9cd 3600 	strd	r3, r6, [sp]
 8004556:	4622      	mov	r2, r4
 8004558:	462b      	mov	r3, r5
 800455a:	f000 ff41 	bl	80053e0 <_dtoa_r>
 800455e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004562:	4607      	mov	r7, r0
 8004564:	d119      	bne.n	800459a <__cvt+0x92>
 8004566:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004568:	07db      	lsls	r3, r3, #31
 800456a:	d50e      	bpl.n	800458a <__cvt+0x82>
 800456c:	eb00 0906 	add.w	r9, r0, r6
 8004570:	2200      	movs	r2, #0
 8004572:	2300      	movs	r3, #0
 8004574:	4620      	mov	r0, r4
 8004576:	4629      	mov	r1, r5
 8004578:	f7fc faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800457c:	b108      	cbz	r0, 8004582 <__cvt+0x7a>
 800457e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004582:	2230      	movs	r2, #48	@ 0x30
 8004584:	9b07      	ldr	r3, [sp, #28]
 8004586:	454b      	cmp	r3, r9
 8004588:	d31e      	bcc.n	80045c8 <__cvt+0xc0>
 800458a:	9b07      	ldr	r3, [sp, #28]
 800458c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800458e:	1bdb      	subs	r3, r3, r7
 8004590:	4638      	mov	r0, r7
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	b008      	add	sp, #32
 8004596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800459e:	eb00 0906 	add.w	r9, r0, r6
 80045a2:	d1e5      	bne.n	8004570 <__cvt+0x68>
 80045a4:	7803      	ldrb	r3, [r0, #0]
 80045a6:	2b30      	cmp	r3, #48	@ 0x30
 80045a8:	d10a      	bne.n	80045c0 <__cvt+0xb8>
 80045aa:	2200      	movs	r2, #0
 80045ac:	2300      	movs	r3, #0
 80045ae:	4620      	mov	r0, r4
 80045b0:	4629      	mov	r1, r5
 80045b2:	f7fc fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80045b6:	b918      	cbnz	r0, 80045c0 <__cvt+0xb8>
 80045b8:	f1c6 0601 	rsb	r6, r6, #1
 80045bc:	f8ca 6000 	str.w	r6, [sl]
 80045c0:	f8da 3000 	ldr.w	r3, [sl]
 80045c4:	4499      	add	r9, r3
 80045c6:	e7d3      	b.n	8004570 <__cvt+0x68>
 80045c8:	1c59      	adds	r1, r3, #1
 80045ca:	9107      	str	r1, [sp, #28]
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e7d9      	b.n	8004584 <__cvt+0x7c>

080045d0 <__exponent>:
 80045d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045d2:	2900      	cmp	r1, #0
 80045d4:	bfba      	itte	lt
 80045d6:	4249      	neglt	r1, r1
 80045d8:	232d      	movlt	r3, #45	@ 0x2d
 80045da:	232b      	movge	r3, #43	@ 0x2b
 80045dc:	2909      	cmp	r1, #9
 80045de:	7002      	strb	r2, [r0, #0]
 80045e0:	7043      	strb	r3, [r0, #1]
 80045e2:	dd29      	ble.n	8004638 <__exponent+0x68>
 80045e4:	f10d 0307 	add.w	r3, sp, #7
 80045e8:	461d      	mov	r5, r3
 80045ea:	270a      	movs	r7, #10
 80045ec:	461a      	mov	r2, r3
 80045ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80045f2:	fb07 1416 	mls	r4, r7, r6, r1
 80045f6:	3430      	adds	r4, #48	@ 0x30
 80045f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80045fc:	460c      	mov	r4, r1
 80045fe:	2c63      	cmp	r4, #99	@ 0x63
 8004600:	f103 33ff 	add.w	r3, r3, #4294967295
 8004604:	4631      	mov	r1, r6
 8004606:	dcf1      	bgt.n	80045ec <__exponent+0x1c>
 8004608:	3130      	adds	r1, #48	@ 0x30
 800460a:	1e94      	subs	r4, r2, #2
 800460c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004610:	1c41      	adds	r1, r0, #1
 8004612:	4623      	mov	r3, r4
 8004614:	42ab      	cmp	r3, r5
 8004616:	d30a      	bcc.n	800462e <__exponent+0x5e>
 8004618:	f10d 0309 	add.w	r3, sp, #9
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	42ac      	cmp	r4, r5
 8004620:	bf88      	it	hi
 8004622:	2300      	movhi	r3, #0
 8004624:	3302      	adds	r3, #2
 8004626:	4403      	add	r3, r0
 8004628:	1a18      	subs	r0, r3, r0
 800462a:	b003      	add	sp, #12
 800462c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004632:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004636:	e7ed      	b.n	8004614 <__exponent+0x44>
 8004638:	2330      	movs	r3, #48	@ 0x30
 800463a:	3130      	adds	r1, #48	@ 0x30
 800463c:	7083      	strb	r3, [r0, #2]
 800463e:	70c1      	strb	r1, [r0, #3]
 8004640:	1d03      	adds	r3, r0, #4
 8004642:	e7f1      	b.n	8004628 <__exponent+0x58>

08004644 <_printf_float>:
 8004644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	b091      	sub	sp, #68	@ 0x44
 800464a:	460c      	mov	r4, r1
 800464c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004650:	4616      	mov	r6, r2
 8004652:	461f      	mov	r7, r3
 8004654:	4605      	mov	r5, r0
 8004656:	f000 fdc1 	bl	80051dc <_localeconv_r>
 800465a:	6803      	ldr	r3, [r0, #0]
 800465c:	9308      	str	r3, [sp, #32]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fb fe06 	bl	8000270 <strlen>
 8004664:	2300      	movs	r3, #0
 8004666:	930e      	str	r3, [sp, #56]	@ 0x38
 8004668:	f8d8 3000 	ldr.w	r3, [r8]
 800466c:	9009      	str	r0, [sp, #36]	@ 0x24
 800466e:	3307      	adds	r3, #7
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	f103 0208 	add.w	r2, r3, #8
 8004678:	f894 a018 	ldrb.w	sl, [r4, #24]
 800467c:	f8d4 b000 	ldr.w	fp, [r4]
 8004680:	f8c8 2000 	str.w	r2, [r8]
 8004684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004688:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800468c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800468e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004692:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800469a:	4b9d      	ldr	r3, [pc, #628]	@ (8004910 <_printf_float+0x2cc>)
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	f7fc fa44 	bl	8000b2c <__aeabi_dcmpun>
 80046a4:	bb70      	cbnz	r0, 8004704 <_printf_float+0xc0>
 80046a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046aa:	4b99      	ldr	r3, [pc, #612]	@ (8004910 <_printf_float+0x2cc>)
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	f7fc fa1e 	bl	8000af0 <__aeabi_dcmple>
 80046b4:	bb30      	cbnz	r0, 8004704 <_printf_float+0xc0>
 80046b6:	2200      	movs	r2, #0
 80046b8:	2300      	movs	r3, #0
 80046ba:	4640      	mov	r0, r8
 80046bc:	4649      	mov	r1, r9
 80046be:	f7fc fa0d 	bl	8000adc <__aeabi_dcmplt>
 80046c2:	b110      	cbz	r0, 80046ca <_printf_float+0x86>
 80046c4:	232d      	movs	r3, #45	@ 0x2d
 80046c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046ca:	4a92      	ldr	r2, [pc, #584]	@ (8004914 <_printf_float+0x2d0>)
 80046cc:	4b92      	ldr	r3, [pc, #584]	@ (8004918 <_printf_float+0x2d4>)
 80046ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046d2:	bf94      	ite	ls
 80046d4:	4690      	movls	r8, r2
 80046d6:	4698      	movhi	r8, r3
 80046d8:	2303      	movs	r3, #3
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	f02b 0304 	bic.w	r3, fp, #4
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	f04f 0900 	mov.w	r9, #0
 80046e6:	9700      	str	r7, [sp, #0]
 80046e8:	4633      	mov	r3, r6
 80046ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80046ec:	4621      	mov	r1, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f9d4 	bl	8004a9c <_printf_common>
 80046f4:	3001      	adds	r0, #1
 80046f6:	f040 808f 	bne.w	8004818 <_printf_float+0x1d4>
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	b011      	add	sp, #68	@ 0x44
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	4640      	mov	r0, r8
 800470a:	4649      	mov	r1, r9
 800470c:	f7fc fa0e 	bl	8000b2c <__aeabi_dcmpun>
 8004710:	b140      	cbz	r0, 8004724 <_printf_float+0xe0>
 8004712:	464b      	mov	r3, r9
 8004714:	2b00      	cmp	r3, #0
 8004716:	bfbc      	itt	lt
 8004718:	232d      	movlt	r3, #45	@ 0x2d
 800471a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800471e:	4a7f      	ldr	r2, [pc, #508]	@ (800491c <_printf_float+0x2d8>)
 8004720:	4b7f      	ldr	r3, [pc, #508]	@ (8004920 <_printf_float+0x2dc>)
 8004722:	e7d4      	b.n	80046ce <_printf_float+0x8a>
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800472c:	d13f      	bne.n	80047ae <_printf_float+0x16a>
 800472e:	2306      	movs	r3, #6
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004736:	2200      	movs	r2, #0
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	9206      	str	r2, [sp, #24]
 800473c:	aa0e      	add	r2, sp, #56	@ 0x38
 800473e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004742:	aa0d      	add	r2, sp, #52	@ 0x34
 8004744:	9203      	str	r2, [sp, #12]
 8004746:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800474a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4642      	mov	r2, r8
 8004754:	464b      	mov	r3, r9
 8004756:	4628      	mov	r0, r5
 8004758:	910a      	str	r1, [sp, #40]	@ 0x28
 800475a:	f7ff fed5 	bl	8004508 <__cvt>
 800475e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004760:	2947      	cmp	r1, #71	@ 0x47
 8004762:	4680      	mov	r8, r0
 8004764:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004766:	d128      	bne.n	80047ba <_printf_float+0x176>
 8004768:	1cc8      	adds	r0, r1, #3
 800476a:	db02      	blt.n	8004772 <_printf_float+0x12e>
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	4299      	cmp	r1, r3
 8004770:	dd40      	ble.n	80047f4 <_printf_float+0x1b0>
 8004772:	f1aa 0a02 	sub.w	sl, sl, #2
 8004776:	fa5f fa8a 	uxtb.w	sl, sl
 800477a:	3901      	subs	r1, #1
 800477c:	4652      	mov	r2, sl
 800477e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004782:	910d      	str	r1, [sp, #52]	@ 0x34
 8004784:	f7ff ff24 	bl	80045d0 <__exponent>
 8004788:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800478a:	1813      	adds	r3, r2, r0
 800478c:	2a01      	cmp	r2, #1
 800478e:	4681      	mov	r9, r0
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	dc02      	bgt.n	800479a <_printf_float+0x156>
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	07d2      	lsls	r2, r2, #31
 8004798:	d501      	bpl.n	800479e <_printf_float+0x15a>
 800479a:	3301      	adds	r3, #1
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d09f      	beq.n	80046e6 <_printf_float+0xa2>
 80047a6:	232d      	movs	r3, #45	@ 0x2d
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ac:	e79b      	b.n	80046e6 <_printf_float+0xa2>
 80047ae:	2947      	cmp	r1, #71	@ 0x47
 80047b0:	d1bf      	bne.n	8004732 <_printf_float+0xee>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1bd      	bne.n	8004732 <_printf_float+0xee>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e7ba      	b.n	8004730 <_printf_float+0xec>
 80047ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047be:	d9dc      	bls.n	800477a <_printf_float+0x136>
 80047c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047c4:	d118      	bne.n	80047f8 <_printf_float+0x1b4>
 80047c6:	2900      	cmp	r1, #0
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	dd0b      	ble.n	80047e4 <_printf_float+0x1a0>
 80047cc:	6121      	str	r1, [r4, #16]
 80047ce:	b913      	cbnz	r3, 80047d6 <_printf_float+0x192>
 80047d0:	6822      	ldr	r2, [r4, #0]
 80047d2:	07d0      	lsls	r0, r2, #31
 80047d4:	d502      	bpl.n	80047dc <_printf_float+0x198>
 80047d6:	3301      	adds	r3, #1
 80047d8:	440b      	add	r3, r1
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047de:	f04f 0900 	mov.w	r9, #0
 80047e2:	e7dc      	b.n	800479e <_printf_float+0x15a>
 80047e4:	b913      	cbnz	r3, 80047ec <_printf_float+0x1a8>
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	07d2      	lsls	r2, r2, #31
 80047ea:	d501      	bpl.n	80047f0 <_printf_float+0x1ac>
 80047ec:	3302      	adds	r3, #2
 80047ee:	e7f4      	b.n	80047da <_printf_float+0x196>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e7f2      	b.n	80047da <_printf_float+0x196>
 80047f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80047f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047fa:	4299      	cmp	r1, r3
 80047fc:	db05      	blt.n	800480a <_printf_float+0x1c6>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	6121      	str	r1, [r4, #16]
 8004802:	07d8      	lsls	r0, r3, #31
 8004804:	d5ea      	bpl.n	80047dc <_printf_float+0x198>
 8004806:	1c4b      	adds	r3, r1, #1
 8004808:	e7e7      	b.n	80047da <_printf_float+0x196>
 800480a:	2900      	cmp	r1, #0
 800480c:	bfd4      	ite	le
 800480e:	f1c1 0202 	rsble	r2, r1, #2
 8004812:	2201      	movgt	r2, #1
 8004814:	4413      	add	r3, r2
 8004816:	e7e0      	b.n	80047da <_printf_float+0x196>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	055a      	lsls	r2, r3, #21
 800481c:	d407      	bmi.n	800482e <_printf_float+0x1ea>
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	4642      	mov	r2, r8
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	d12b      	bne.n	8004884 <_printf_float+0x240>
 800482c:	e765      	b.n	80046fa <_printf_float+0xb6>
 800482e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004832:	f240 80dd 	bls.w	80049f0 <_printf_float+0x3ac>
 8004836:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800483a:	2200      	movs	r2, #0
 800483c:	2300      	movs	r3, #0
 800483e:	f7fc f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8004842:	2800      	cmp	r0, #0
 8004844:	d033      	beq.n	80048ae <_printf_float+0x26a>
 8004846:	4a37      	ldr	r2, [pc, #220]	@ (8004924 <_printf_float+0x2e0>)
 8004848:	2301      	movs	r3, #1
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f af52 	beq.w	80046fa <_printf_float+0xb6>
 8004856:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800485a:	4543      	cmp	r3, r8
 800485c:	db02      	blt.n	8004864 <_printf_float+0x220>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	07d8      	lsls	r0, r3, #31
 8004862:	d50f      	bpl.n	8004884 <_printf_float+0x240>
 8004864:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f af43 	beq.w	80046fa <_printf_float+0xb6>
 8004874:	f04f 0900 	mov.w	r9, #0
 8004878:	f108 38ff 	add.w	r8, r8, #4294967295
 800487c:	f104 0a1a 	add.w	sl, r4, #26
 8004880:	45c8      	cmp	r8, r9
 8004882:	dc09      	bgt.n	8004898 <_printf_float+0x254>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	079b      	lsls	r3, r3, #30
 8004888:	f100 8103 	bmi.w	8004a92 <_printf_float+0x44e>
 800488c:	68e0      	ldr	r0, [r4, #12]
 800488e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004890:	4298      	cmp	r0, r3
 8004892:	bfb8      	it	lt
 8004894:	4618      	movlt	r0, r3
 8004896:	e732      	b.n	80046fe <_printf_float+0xba>
 8004898:	2301      	movs	r3, #1
 800489a:	4652      	mov	r2, sl
 800489c:	4631      	mov	r1, r6
 800489e:	4628      	mov	r0, r5
 80048a0:	47b8      	blx	r7
 80048a2:	3001      	adds	r0, #1
 80048a4:	f43f af29 	beq.w	80046fa <_printf_float+0xb6>
 80048a8:	f109 0901 	add.w	r9, r9, #1
 80048ac:	e7e8      	b.n	8004880 <_printf_float+0x23c>
 80048ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dc39      	bgt.n	8004928 <_printf_float+0x2e4>
 80048b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004924 <_printf_float+0x2e0>)
 80048b6:	2301      	movs	r3, #1
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af1b 	beq.w	80046fa <_printf_float+0xb6>
 80048c4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80048c8:	ea59 0303 	orrs.w	r3, r9, r3
 80048cc:	d102      	bne.n	80048d4 <_printf_float+0x290>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	07d9      	lsls	r1, r3, #31
 80048d2:	d5d7      	bpl.n	8004884 <_printf_float+0x240>
 80048d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048d8:	4631      	mov	r1, r6
 80048da:	4628      	mov	r0, r5
 80048dc:	47b8      	blx	r7
 80048de:	3001      	adds	r0, #1
 80048e0:	f43f af0b 	beq.w	80046fa <_printf_float+0xb6>
 80048e4:	f04f 0a00 	mov.w	sl, #0
 80048e8:	f104 0b1a 	add.w	fp, r4, #26
 80048ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048ee:	425b      	negs	r3, r3
 80048f0:	4553      	cmp	r3, sl
 80048f2:	dc01      	bgt.n	80048f8 <_printf_float+0x2b4>
 80048f4:	464b      	mov	r3, r9
 80048f6:	e793      	b.n	8004820 <_printf_float+0x1dc>
 80048f8:	2301      	movs	r3, #1
 80048fa:	465a      	mov	r2, fp
 80048fc:	4631      	mov	r1, r6
 80048fe:	4628      	mov	r0, r5
 8004900:	47b8      	blx	r7
 8004902:	3001      	adds	r0, #1
 8004904:	f43f aef9 	beq.w	80046fa <_printf_float+0xb6>
 8004908:	f10a 0a01 	add.w	sl, sl, #1
 800490c:	e7ee      	b.n	80048ec <_printf_float+0x2a8>
 800490e:	bf00      	nop
 8004910:	7fefffff 	.word	0x7fefffff
 8004914:	08007034 	.word	0x08007034
 8004918:	08007038 	.word	0x08007038
 800491c:	0800703c 	.word	0x0800703c
 8004920:	08007040 	.word	0x08007040
 8004924:	08007044 	.word	0x08007044
 8004928:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800492a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800492e:	4553      	cmp	r3, sl
 8004930:	bfa8      	it	ge
 8004932:	4653      	movge	r3, sl
 8004934:	2b00      	cmp	r3, #0
 8004936:	4699      	mov	r9, r3
 8004938:	dc36      	bgt.n	80049a8 <_printf_float+0x364>
 800493a:	f04f 0b00 	mov.w	fp, #0
 800493e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004942:	f104 021a 	add.w	r2, r4, #26
 8004946:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004948:	930a      	str	r3, [sp, #40]	@ 0x28
 800494a:	eba3 0309 	sub.w	r3, r3, r9
 800494e:	455b      	cmp	r3, fp
 8004950:	dc31      	bgt.n	80049b6 <_printf_float+0x372>
 8004952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004954:	459a      	cmp	sl, r3
 8004956:	dc3a      	bgt.n	80049ce <_printf_float+0x38a>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	07da      	lsls	r2, r3, #31
 800495c:	d437      	bmi.n	80049ce <_printf_float+0x38a>
 800495e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004960:	ebaa 0903 	sub.w	r9, sl, r3
 8004964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004966:	ebaa 0303 	sub.w	r3, sl, r3
 800496a:	4599      	cmp	r9, r3
 800496c:	bfa8      	it	ge
 800496e:	4699      	movge	r9, r3
 8004970:	f1b9 0f00 	cmp.w	r9, #0
 8004974:	dc33      	bgt.n	80049de <_printf_float+0x39a>
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800497e:	f104 0b1a 	add.w	fp, r4, #26
 8004982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004984:	ebaa 0303 	sub.w	r3, sl, r3
 8004988:	eba3 0309 	sub.w	r3, r3, r9
 800498c:	4543      	cmp	r3, r8
 800498e:	f77f af79 	ble.w	8004884 <_printf_float+0x240>
 8004992:	2301      	movs	r3, #1
 8004994:	465a      	mov	r2, fp
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	f43f aeac 	beq.w	80046fa <_printf_float+0xb6>
 80049a2:	f108 0801 	add.w	r8, r8, #1
 80049a6:	e7ec      	b.n	8004982 <_printf_float+0x33e>
 80049a8:	4642      	mov	r2, r8
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	d1c2      	bne.n	800493a <_printf_float+0x2f6>
 80049b4:	e6a1      	b.n	80046fa <_printf_float+0xb6>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4631      	mov	r1, r6
 80049ba:	4628      	mov	r0, r5
 80049bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f ae9a 	beq.w	80046fa <_printf_float+0xb6>
 80049c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049c8:	f10b 0b01 	add.w	fp, fp, #1
 80049cc:	e7bb      	b.n	8004946 <_printf_float+0x302>
 80049ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	d1c0      	bne.n	800495e <_printf_float+0x31a>
 80049dc:	e68d      	b.n	80046fa <_printf_float+0xb6>
 80049de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049e0:	464b      	mov	r3, r9
 80049e2:	4442      	add	r2, r8
 80049e4:	4631      	mov	r1, r6
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b8      	blx	r7
 80049ea:	3001      	adds	r0, #1
 80049ec:	d1c3      	bne.n	8004976 <_printf_float+0x332>
 80049ee:	e684      	b.n	80046fa <_printf_float+0xb6>
 80049f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80049f4:	f1ba 0f01 	cmp.w	sl, #1
 80049f8:	dc01      	bgt.n	80049fe <_printf_float+0x3ba>
 80049fa:	07db      	lsls	r3, r3, #31
 80049fc:	d536      	bpl.n	8004a6c <_printf_float+0x428>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4642      	mov	r2, r8
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f43f ae76 	beq.w	80046fa <_printf_float+0xb6>
 8004a0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae6e 	beq.w	80046fa <_printf_float+0xb6>
 8004a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a22:	2200      	movs	r2, #0
 8004a24:	2300      	movs	r3, #0
 8004a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a2a:	f7fc f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a2e:	b9c0      	cbnz	r0, 8004a62 <_printf_float+0x41e>
 8004a30:	4653      	mov	r3, sl
 8004a32:	f108 0201 	add.w	r2, r8, #1
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d10c      	bne.n	8004a5a <_printf_float+0x416>
 8004a40:	e65b      	b.n	80046fa <_printf_float+0xb6>
 8004a42:	2301      	movs	r3, #1
 8004a44:	465a      	mov	r2, fp
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f43f ae54 	beq.w	80046fa <_printf_float+0xb6>
 8004a52:	f108 0801 	add.w	r8, r8, #1
 8004a56:	45d0      	cmp	r8, sl
 8004a58:	dbf3      	blt.n	8004a42 <_printf_float+0x3fe>
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a60:	e6df      	b.n	8004822 <_printf_float+0x1de>
 8004a62:	f04f 0800 	mov.w	r8, #0
 8004a66:	f104 0b1a 	add.w	fp, r4, #26
 8004a6a:	e7f4      	b.n	8004a56 <_printf_float+0x412>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4642      	mov	r2, r8
 8004a70:	e7e1      	b.n	8004a36 <_printf_float+0x3f2>
 8004a72:	2301      	movs	r3, #1
 8004a74:	464a      	mov	r2, r9
 8004a76:	4631      	mov	r1, r6
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b8      	blx	r7
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f43f ae3c 	beq.w	80046fa <_printf_float+0xb6>
 8004a82:	f108 0801 	add.w	r8, r8, #1
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a8a:	1a5b      	subs	r3, r3, r1
 8004a8c:	4543      	cmp	r3, r8
 8004a8e:	dcf0      	bgt.n	8004a72 <_printf_float+0x42e>
 8004a90:	e6fc      	b.n	800488c <_printf_float+0x248>
 8004a92:	f04f 0800 	mov.w	r8, #0
 8004a96:	f104 0919 	add.w	r9, r4, #25
 8004a9a:	e7f4      	b.n	8004a86 <_printf_float+0x442>

08004a9c <_printf_common>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	4698      	mov	r8, r3
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bfb8      	it	lt
 8004ab0:	4613      	movlt	r3, r2
 8004ab2:	6033      	str	r3, [r6, #0]
 8004ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ab8:	4607      	mov	r7, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	b10a      	cbz	r2, 8004ac2 <_printf_common+0x26>
 8004abe:	3301      	adds	r3, #1
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	0699      	lsls	r1, r3, #26
 8004ac6:	bf42      	ittt	mi
 8004ac8:	6833      	ldrmi	r3, [r6, #0]
 8004aca:	3302      	addmi	r3, #2
 8004acc:	6033      	strmi	r3, [r6, #0]
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	f015 0506 	ands.w	r5, r5, #6
 8004ad4:	d106      	bne.n	8004ae4 <_printf_common+0x48>
 8004ad6:	f104 0a19 	add.w	sl, r4, #25
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	6832      	ldr	r2, [r6, #0]
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	dc26      	bgt.n	8004b32 <_printf_common+0x96>
 8004ae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	3b00      	subs	r3, #0
 8004aec:	bf18      	it	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	0692      	lsls	r2, r2, #26
 8004af2:	d42b      	bmi.n	8004b4c <_printf_common+0xb0>
 8004af4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004af8:	4641      	mov	r1, r8
 8004afa:	4638      	mov	r0, r7
 8004afc:	47c8      	blx	r9
 8004afe:	3001      	adds	r0, #1
 8004b00:	d01e      	beq.n	8004b40 <_printf_common+0xa4>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	6922      	ldr	r2, [r4, #16]
 8004b06:	f003 0306 	and.w	r3, r3, #6
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	bf02      	ittt	eq
 8004b0e:	68e5      	ldreq	r5, [r4, #12]
 8004b10:	6833      	ldreq	r3, [r6, #0]
 8004b12:	1aed      	subeq	r5, r5, r3
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	bf0c      	ite	eq
 8004b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b1c:	2500      	movne	r5, #0
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	bfc4      	itt	gt
 8004b22:	1a9b      	subgt	r3, r3, r2
 8004b24:	18ed      	addgt	r5, r5, r3
 8004b26:	2600      	movs	r6, #0
 8004b28:	341a      	adds	r4, #26
 8004b2a:	42b5      	cmp	r5, r6
 8004b2c:	d11a      	bne.n	8004b64 <_printf_common+0xc8>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e008      	b.n	8004b44 <_printf_common+0xa8>
 8004b32:	2301      	movs	r3, #1
 8004b34:	4652      	mov	r2, sl
 8004b36:	4641      	mov	r1, r8
 8004b38:	4638      	mov	r0, r7
 8004b3a:	47c8      	blx	r9
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d103      	bne.n	8004b48 <_printf_common+0xac>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b48:	3501      	adds	r5, #1
 8004b4a:	e7c6      	b.n	8004ada <_printf_common+0x3e>
 8004b4c:	18e1      	adds	r1, r4, r3
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	2030      	movs	r0, #48	@ 0x30
 8004b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b56:	4422      	add	r2, r4
 8004b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b60:	3302      	adds	r3, #2
 8004b62:	e7c7      	b.n	8004af4 <_printf_common+0x58>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4622      	mov	r2, r4
 8004b68:	4641      	mov	r1, r8
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c8      	blx	r9
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d0e6      	beq.n	8004b40 <_printf_common+0xa4>
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7d9      	b.n	8004b2a <_printf_common+0x8e>
	...

08004b78 <_printf_i>:
 8004b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	7e0f      	ldrb	r7, [r1, #24]
 8004b7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b80:	2f78      	cmp	r7, #120	@ 0x78
 8004b82:	4691      	mov	r9, r2
 8004b84:	4680      	mov	r8, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	469a      	mov	sl, r3
 8004b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b8e:	d807      	bhi.n	8004ba0 <_printf_i+0x28>
 8004b90:	2f62      	cmp	r7, #98	@ 0x62
 8004b92:	d80a      	bhi.n	8004baa <_printf_i+0x32>
 8004b94:	2f00      	cmp	r7, #0
 8004b96:	f000 80d2 	beq.w	8004d3e <_printf_i+0x1c6>
 8004b9a:	2f58      	cmp	r7, #88	@ 0x58
 8004b9c:	f000 80b9 	beq.w	8004d12 <_printf_i+0x19a>
 8004ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ba8:	e03a      	b.n	8004c20 <_printf_i+0xa8>
 8004baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bae:	2b15      	cmp	r3, #21
 8004bb0:	d8f6      	bhi.n	8004ba0 <_printf_i+0x28>
 8004bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8004bb8 <_printf_i+0x40>)
 8004bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb8:	08004c11 	.word	0x08004c11
 8004bbc:	08004c25 	.word	0x08004c25
 8004bc0:	08004ba1 	.word	0x08004ba1
 8004bc4:	08004ba1 	.word	0x08004ba1
 8004bc8:	08004ba1 	.word	0x08004ba1
 8004bcc:	08004ba1 	.word	0x08004ba1
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004ba1 	.word	0x08004ba1
 8004bd8:	08004ba1 	.word	0x08004ba1
 8004bdc:	08004ba1 	.word	0x08004ba1
 8004be0:	08004ba1 	.word	0x08004ba1
 8004be4:	08004d25 	.word	0x08004d25
 8004be8:	08004c4f 	.word	0x08004c4f
 8004bec:	08004cdf 	.word	0x08004cdf
 8004bf0:	08004ba1 	.word	0x08004ba1
 8004bf4:	08004ba1 	.word	0x08004ba1
 8004bf8:	08004d47 	.word	0x08004d47
 8004bfc:	08004ba1 	.word	0x08004ba1
 8004c00:	08004c4f 	.word	0x08004c4f
 8004c04:	08004ba1 	.word	0x08004ba1
 8004c08:	08004ba1 	.word	0x08004ba1
 8004c0c:	08004ce7 	.word	0x08004ce7
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6032      	str	r2, [r6, #0]
 8004c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c20:	2301      	movs	r3, #1
 8004c22:	e09d      	b.n	8004d60 <_printf_i+0x1e8>
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	6820      	ldr	r0, [r4, #0]
 8004c28:	1d19      	adds	r1, r3, #4
 8004c2a:	6031      	str	r1, [r6, #0]
 8004c2c:	0606      	lsls	r6, r0, #24
 8004c2e:	d501      	bpl.n	8004c34 <_printf_i+0xbc>
 8004c30:	681d      	ldr	r5, [r3, #0]
 8004c32:	e003      	b.n	8004c3c <_printf_i+0xc4>
 8004c34:	0645      	lsls	r5, r0, #25
 8004c36:	d5fb      	bpl.n	8004c30 <_printf_i+0xb8>
 8004c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	da03      	bge.n	8004c48 <_printf_i+0xd0>
 8004c40:	232d      	movs	r3, #45	@ 0x2d
 8004c42:	426d      	negs	r5, r5
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c48:	4859      	ldr	r0, [pc, #356]	@ (8004db0 <_printf_i+0x238>)
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	e011      	b.n	8004c72 <_printf_i+0xfa>
 8004c4e:	6821      	ldr	r1, [r4, #0]
 8004c50:	6833      	ldr	r3, [r6, #0]
 8004c52:	0608      	lsls	r0, r1, #24
 8004c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c58:	d402      	bmi.n	8004c60 <_printf_i+0xe8>
 8004c5a:	0649      	lsls	r1, r1, #25
 8004c5c:	bf48      	it	mi
 8004c5e:	b2ad      	uxthmi	r5, r5
 8004c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c62:	4853      	ldr	r0, [pc, #332]	@ (8004db0 <_printf_i+0x238>)
 8004c64:	6033      	str	r3, [r6, #0]
 8004c66:	bf14      	ite	ne
 8004c68:	230a      	movne	r3, #10
 8004c6a:	2308      	moveq	r3, #8
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c72:	6866      	ldr	r6, [r4, #4]
 8004c74:	60a6      	str	r6, [r4, #8]
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	bfa2      	ittt	ge
 8004c7a:	6821      	ldrge	r1, [r4, #0]
 8004c7c:	f021 0104 	bicge.w	r1, r1, #4
 8004c80:	6021      	strge	r1, [r4, #0]
 8004c82:	b90d      	cbnz	r5, 8004c88 <_printf_i+0x110>
 8004c84:	2e00      	cmp	r6, #0
 8004c86:	d04b      	beq.n	8004d20 <_printf_i+0x1a8>
 8004c88:	4616      	mov	r6, r2
 8004c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c92:	5dc7      	ldrb	r7, [r0, r7]
 8004c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c98:	462f      	mov	r7, r5
 8004c9a:	42bb      	cmp	r3, r7
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	d9f4      	bls.n	8004c8a <_printf_i+0x112>
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d10b      	bne.n	8004cbc <_printf_i+0x144>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	07df      	lsls	r7, r3, #31
 8004ca8:	d508      	bpl.n	8004cbc <_printf_i+0x144>
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	6861      	ldr	r1, [r4, #4]
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	bfde      	ittt	le
 8004cb2:	2330      	movle	r3, #48	@ 0x30
 8004cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cbc:	1b92      	subs	r2, r2, r6
 8004cbe:	6122      	str	r2, [r4, #16]
 8004cc0:	f8cd a000 	str.w	sl, [sp]
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	aa03      	add	r2, sp, #12
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f7ff fee6 	bl	8004a9c <_printf_common>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d14a      	bne.n	8004d6a <_printf_i+0x1f2>
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	b004      	add	sp, #16
 8004cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	f043 0320 	orr.w	r3, r3, #32
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	4833      	ldr	r0, [pc, #204]	@ (8004db4 <_printf_i+0x23c>)
 8004ce8:	2778      	movs	r7, #120	@ 0x78
 8004cea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	6831      	ldr	r1, [r6, #0]
 8004cf2:	061f      	lsls	r7, r3, #24
 8004cf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cf8:	d402      	bmi.n	8004d00 <_printf_i+0x188>
 8004cfa:	065f      	lsls	r7, r3, #25
 8004cfc:	bf48      	it	mi
 8004cfe:	b2ad      	uxthmi	r5, r5
 8004d00:	6031      	str	r1, [r6, #0]
 8004d02:	07d9      	lsls	r1, r3, #31
 8004d04:	bf44      	itt	mi
 8004d06:	f043 0320 	orrmi.w	r3, r3, #32
 8004d0a:	6023      	strmi	r3, [r4, #0]
 8004d0c:	b11d      	cbz	r5, 8004d16 <_printf_i+0x19e>
 8004d0e:	2310      	movs	r3, #16
 8004d10:	e7ac      	b.n	8004c6c <_printf_i+0xf4>
 8004d12:	4827      	ldr	r0, [pc, #156]	@ (8004db0 <_printf_i+0x238>)
 8004d14:	e7e9      	b.n	8004cea <_printf_i+0x172>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	f023 0320 	bic.w	r3, r3, #32
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	e7f6      	b.n	8004d0e <_printf_i+0x196>
 8004d20:	4616      	mov	r6, r2
 8004d22:	e7bd      	b.n	8004ca0 <_printf_i+0x128>
 8004d24:	6833      	ldr	r3, [r6, #0]
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	6961      	ldr	r1, [r4, #20]
 8004d2a:	1d18      	adds	r0, r3, #4
 8004d2c:	6030      	str	r0, [r6, #0]
 8004d2e:	062e      	lsls	r6, r5, #24
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	d501      	bpl.n	8004d38 <_printf_i+0x1c0>
 8004d34:	6019      	str	r1, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <_printf_i+0x1c6>
 8004d38:	0668      	lsls	r0, r5, #25
 8004d3a:	d5fb      	bpl.n	8004d34 <_printf_i+0x1bc>
 8004d3c:	8019      	strh	r1, [r3, #0]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	4616      	mov	r6, r2
 8004d44:	e7bc      	b.n	8004cc0 <_printf_i+0x148>
 8004d46:	6833      	ldr	r3, [r6, #0]
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	6032      	str	r2, [r6, #0]
 8004d4c:	681e      	ldr	r6, [r3, #0]
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7fb fa3c 	bl	80001d0 <memchr>
 8004d58:	b108      	cbz	r0, 8004d5e <_printf_i+0x1e6>
 8004d5a:	1b80      	subs	r0, r0, r6
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	2300      	movs	r3, #0
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d68:	e7aa      	b.n	8004cc0 <_printf_i+0x148>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	47d0      	blx	sl
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0ad      	beq.n	8004cd4 <_printf_i+0x15c>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	079b      	lsls	r3, r3, #30
 8004d7c:	d413      	bmi.n	8004da6 <_printf_i+0x22e>
 8004d7e:	68e0      	ldr	r0, [r4, #12]
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	4298      	cmp	r0, r3
 8004d84:	bfb8      	it	lt
 8004d86:	4618      	movlt	r0, r3
 8004d88:	e7a6      	b.n	8004cd8 <_printf_i+0x160>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	47d0      	blx	sl
 8004d94:	3001      	adds	r0, #1
 8004d96:	d09d      	beq.n	8004cd4 <_printf_i+0x15c>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	9903      	ldr	r1, [sp, #12]
 8004d9e:	1a5b      	subs	r3, r3, r1
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dcf2      	bgt.n	8004d8a <_printf_i+0x212>
 8004da4:	e7eb      	b.n	8004d7e <_printf_i+0x206>
 8004da6:	2500      	movs	r5, #0
 8004da8:	f104 0619 	add.w	r6, r4, #25
 8004dac:	e7f5      	b.n	8004d9a <_printf_i+0x222>
 8004dae:	bf00      	nop
 8004db0:	08007046 	.word	0x08007046
 8004db4:	08007057 	.word	0x08007057

08004db8 <std>:
 8004db8:	2300      	movs	r3, #0
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dc6:	6083      	str	r3, [r0, #8]
 8004dc8:	8181      	strh	r1, [r0, #12]
 8004dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dcc:	81c2      	strh	r2, [r0, #14]
 8004dce:	6183      	str	r3, [r0, #24]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	305c      	adds	r0, #92	@ 0x5c
 8004dd6:	f000 f9f9 	bl	80051cc <memset>
 8004dda:	4b0d      	ldr	r3, [pc, #52]	@ (8004e10 <std+0x58>)
 8004ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dde:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <std+0x5c>)
 8004de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004de2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e18 <std+0x60>)
 8004de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <std+0x64>)
 8004de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <std+0x68>)
 8004dec:	6224      	str	r4, [r4, #32]
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d006      	beq.n	8004e00 <std+0x48>
 8004df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004df6:	4294      	cmp	r4, r2
 8004df8:	d002      	beq.n	8004e00 <std+0x48>
 8004dfa:	33d0      	adds	r3, #208	@ 0xd0
 8004dfc:	429c      	cmp	r4, r3
 8004dfe:	d105      	bne.n	8004e0c <std+0x54>
 8004e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e08:	f000 ba5c 	b.w	80052c4 <__retarget_lock_init_recursive>
 8004e0c:	bd10      	pop	{r4, pc}
 8004e0e:	bf00      	nop
 8004e10:	0800501d 	.word	0x0800501d
 8004e14:	0800503f 	.word	0x0800503f
 8004e18:	08005077 	.word	0x08005077
 8004e1c:	0800509b 	.word	0x0800509b
 8004e20:	20000250 	.word	0x20000250

08004e24 <stdio_exit_handler>:
 8004e24:	4a02      	ldr	r2, [pc, #8]	@ (8004e30 <stdio_exit_handler+0xc>)
 8004e26:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <stdio_exit_handler+0x10>)
 8004e28:	4803      	ldr	r0, [pc, #12]	@ (8004e38 <stdio_exit_handler+0x14>)
 8004e2a:	f000 b869 	b.w	8004f00 <_fwalk_sglue>
 8004e2e:	bf00      	nop
 8004e30:	2000000c 	.word	0x2000000c
 8004e34:	08006bf1 	.word	0x08006bf1
 8004e38:	2000001c 	.word	0x2000001c

08004e3c <cleanup_stdio>:
 8004e3c:	6841      	ldr	r1, [r0, #4]
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <cleanup_stdio+0x34>)
 8004e40:	4299      	cmp	r1, r3
 8004e42:	b510      	push	{r4, lr}
 8004e44:	4604      	mov	r4, r0
 8004e46:	d001      	beq.n	8004e4c <cleanup_stdio+0x10>
 8004e48:	f001 fed2 	bl	8006bf0 <_fflush_r>
 8004e4c:	68a1      	ldr	r1, [r4, #8]
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <cleanup_stdio+0x38>)
 8004e50:	4299      	cmp	r1, r3
 8004e52:	d002      	beq.n	8004e5a <cleanup_stdio+0x1e>
 8004e54:	4620      	mov	r0, r4
 8004e56:	f001 fecb 	bl	8006bf0 <_fflush_r>
 8004e5a:	68e1      	ldr	r1, [r4, #12]
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <cleanup_stdio+0x3c>)
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	d004      	beq.n	8004e6c <cleanup_stdio+0x30>
 8004e62:	4620      	mov	r0, r4
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e68:	f001 bec2 	b.w	8006bf0 <_fflush_r>
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000250 	.word	0x20000250
 8004e74:	200002b8 	.word	0x200002b8
 8004e78:	20000320 	.word	0x20000320

08004e7c <global_stdio_init.part.0>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <global_stdio_init.part.0+0x30>)
 8004e80:	4c0b      	ldr	r4, [pc, #44]	@ (8004eb0 <global_stdio_init.part.0+0x34>)
 8004e82:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb4 <global_stdio_init.part.0+0x38>)
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	4620      	mov	r0, r4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	f7ff ff94 	bl	8004db8 <std>
 8004e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e94:	2201      	movs	r2, #1
 8004e96:	2109      	movs	r1, #9
 8004e98:	f7ff ff8e 	bl	8004db8 <std>
 8004e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea6:	2112      	movs	r1, #18
 8004ea8:	f7ff bf86 	b.w	8004db8 <std>
 8004eac:	20000388 	.word	0x20000388
 8004eb0:	20000250 	.word	0x20000250
 8004eb4:	08004e25 	.word	0x08004e25

08004eb8 <__sfp_lock_acquire>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	@ (8004ec0 <__sfp_lock_acquire+0x8>)
 8004eba:	f000 ba04 	b.w	80052c6 <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20000391 	.word	0x20000391

08004ec4 <__sfp_lock_release>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	@ (8004ecc <__sfp_lock_release+0x8>)
 8004ec6:	f000 b9ff 	b.w	80052c8 <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000391 	.word	0x20000391

08004ed0 <__sinit>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	f7ff fff0 	bl	8004eb8 <__sfp_lock_acquire>
 8004ed8:	6a23      	ldr	r3, [r4, #32]
 8004eda:	b11b      	cbz	r3, 8004ee4 <__sinit+0x14>
 8004edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee0:	f7ff bff0 	b.w	8004ec4 <__sfp_lock_release>
 8004ee4:	4b04      	ldr	r3, [pc, #16]	@ (8004ef8 <__sinit+0x28>)
 8004ee6:	6223      	str	r3, [r4, #32]
 8004ee8:	4b04      	ldr	r3, [pc, #16]	@ (8004efc <__sinit+0x2c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f5      	bne.n	8004edc <__sinit+0xc>
 8004ef0:	f7ff ffc4 	bl	8004e7c <global_stdio_init.part.0>
 8004ef4:	e7f2      	b.n	8004edc <__sinit+0xc>
 8004ef6:	bf00      	nop
 8004ef8:	08004e3d 	.word	0x08004e3d
 8004efc:	20000388 	.word	0x20000388

08004f00 <_fwalk_sglue>:
 8004f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f04:	4607      	mov	r7, r0
 8004f06:	4688      	mov	r8, r1
 8004f08:	4614      	mov	r4, r2
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f10:	f1b9 0901 	subs.w	r9, r9, #1
 8004f14:	d505      	bpl.n	8004f22 <_fwalk_sglue+0x22>
 8004f16:	6824      	ldr	r4, [r4, #0]
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	d1f7      	bne.n	8004f0c <_fwalk_sglue+0xc>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f22:	89ab      	ldrh	r3, [r5, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d907      	bls.n	8004f38 <_fwalk_sglue+0x38>
 8004f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	d003      	beq.n	8004f38 <_fwalk_sglue+0x38>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	4306      	orrs	r6, r0
 8004f38:	3568      	adds	r5, #104	@ 0x68
 8004f3a:	e7e9      	b.n	8004f10 <_fwalk_sglue+0x10>

08004f3c <iprintf>:
 8004f3c:	b40f      	push	{r0, r1, r2, r3}
 8004f3e:	b507      	push	{r0, r1, r2, lr}
 8004f40:	4906      	ldr	r1, [pc, #24]	@ (8004f5c <iprintf+0x20>)
 8004f42:	ab04      	add	r3, sp, #16
 8004f44:	6808      	ldr	r0, [r1, #0]
 8004f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4a:	6881      	ldr	r1, [r0, #8]
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	f001 fcb7 	bl	80068c0 <_vfiprintf_r>
 8004f52:	b003      	add	sp, #12
 8004f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f58:	b004      	add	sp, #16
 8004f5a:	4770      	bx	lr
 8004f5c:	20000018 	.word	0x20000018

08004f60 <_puts_r>:
 8004f60:	6a03      	ldr	r3, [r0, #32]
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	6884      	ldr	r4, [r0, #8]
 8004f66:	4605      	mov	r5, r0
 8004f68:	460e      	mov	r6, r1
 8004f6a:	b90b      	cbnz	r3, 8004f70 <_puts_r+0x10>
 8004f6c:	f7ff ffb0 	bl	8004ed0 <__sinit>
 8004f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f72:	07db      	lsls	r3, r3, #31
 8004f74:	d405      	bmi.n	8004f82 <_puts_r+0x22>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	0598      	lsls	r0, r3, #22
 8004f7a:	d402      	bmi.n	8004f82 <_puts_r+0x22>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f7e:	f000 f9a2 	bl	80052c6 <__retarget_lock_acquire_recursive>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	0719      	lsls	r1, r3, #28
 8004f86:	d502      	bpl.n	8004f8e <_puts_r+0x2e>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d135      	bne.n	8004ffa <_puts_r+0x9a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f8c5 	bl	8005120 <__swsetup_r>
 8004f96:	b380      	cbz	r0, 8004ffa <_puts_r+0x9a>
 8004f98:	f04f 35ff 	mov.w	r5, #4294967295
 8004f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f9e:	07da      	lsls	r2, r3, #31
 8004fa0:	d405      	bmi.n	8004fae <_puts_r+0x4e>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	059b      	lsls	r3, r3, #22
 8004fa6:	d402      	bmi.n	8004fae <_puts_r+0x4e>
 8004fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004faa:	f000 f98d 	bl	80052c8 <__retarget_lock_release_recursive>
 8004fae:	4628      	mov	r0, r5
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da04      	bge.n	8004fc0 <_puts_r+0x60>
 8004fb6:	69a2      	ldr	r2, [r4, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	dc17      	bgt.n	8004fec <_puts_r+0x8c>
 8004fbc:	290a      	cmp	r1, #10
 8004fbe:	d015      	beq.n	8004fec <_puts_r+0x8c>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	7019      	strb	r1, [r3, #0]
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	2900      	cmp	r1, #0
 8004fd4:	d1ed      	bne.n	8004fb2 <_puts_r+0x52>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da11      	bge.n	8004ffe <_puts_r+0x9e>
 8004fda:	4622      	mov	r2, r4
 8004fdc:	210a      	movs	r1, #10
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f85f 	bl	80050a2 <__swbuf_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0d7      	beq.n	8004f98 <_puts_r+0x38>
 8004fe8:	250a      	movs	r5, #10
 8004fea:	e7d7      	b.n	8004f9c <_puts_r+0x3c>
 8004fec:	4622      	mov	r2, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f857 	bl	80050a2 <__swbuf_r>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d1e7      	bne.n	8004fc8 <_puts_r+0x68>
 8004ff8:	e7ce      	b.n	8004f98 <_puts_r+0x38>
 8004ffa:	3e01      	subs	r6, #1
 8004ffc:	e7e4      	b.n	8004fc8 <_puts_r+0x68>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	6022      	str	r2, [r4, #0]
 8005004:	220a      	movs	r2, #10
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e7ee      	b.n	8004fe8 <_puts_r+0x88>
	...

0800500c <puts>:
 800500c:	4b02      	ldr	r3, [pc, #8]	@ (8005018 <puts+0xc>)
 800500e:	4601      	mov	r1, r0
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f7ff bfa5 	b.w	8004f60 <_puts_r>
 8005016:	bf00      	nop
 8005018:	20000018 	.word	0x20000018

0800501c <__sread>:
 800501c:	b510      	push	{r4, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005024:	f000 f900 	bl	8005228 <_read_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	bfab      	itete	ge
 800502c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800502e:	89a3      	ldrhlt	r3, [r4, #12]
 8005030:	181b      	addge	r3, r3, r0
 8005032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005036:	bfac      	ite	ge
 8005038:	6563      	strge	r3, [r4, #84]	@ 0x54
 800503a:	81a3      	strhlt	r3, [r4, #12]
 800503c:	bd10      	pop	{r4, pc}

0800503e <__swrite>:
 800503e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	461f      	mov	r7, r3
 8005044:	898b      	ldrh	r3, [r1, #12]
 8005046:	05db      	lsls	r3, r3, #23
 8005048:	4605      	mov	r5, r0
 800504a:	460c      	mov	r4, r1
 800504c:	4616      	mov	r6, r2
 800504e:	d505      	bpl.n	800505c <__swrite+0x1e>
 8005050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005054:	2302      	movs	r3, #2
 8005056:	2200      	movs	r2, #0
 8005058:	f000 f8d4 	bl	8005204 <_lseek_r>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	4628      	mov	r0, r5
 800506e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005072:	f000 b8eb 	b.w	800524c <_write_r>

08005076 <__sseek>:
 8005076:	b510      	push	{r4, lr}
 8005078:	460c      	mov	r4, r1
 800507a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507e:	f000 f8c1 	bl	8005204 <_lseek_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	bf15      	itete	ne
 8005088:	6560      	strne	r0, [r4, #84]	@ 0x54
 800508a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800508e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005092:	81a3      	strheq	r3, [r4, #12]
 8005094:	bf18      	it	ne
 8005096:	81a3      	strhne	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__sclose>:
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 b8a1 	b.w	80051e4 <_close_r>

080050a2 <__swbuf_r>:
 80050a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a4:	460e      	mov	r6, r1
 80050a6:	4614      	mov	r4, r2
 80050a8:	4605      	mov	r5, r0
 80050aa:	b118      	cbz	r0, 80050b4 <__swbuf_r+0x12>
 80050ac:	6a03      	ldr	r3, [r0, #32]
 80050ae:	b90b      	cbnz	r3, 80050b4 <__swbuf_r+0x12>
 80050b0:	f7ff ff0e 	bl	8004ed0 <__sinit>
 80050b4:	69a3      	ldr	r3, [r4, #24]
 80050b6:	60a3      	str	r3, [r4, #8]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	071a      	lsls	r2, r3, #28
 80050bc:	d501      	bpl.n	80050c2 <__swbuf_r+0x20>
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	b943      	cbnz	r3, 80050d4 <__swbuf_r+0x32>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f82b 	bl	8005120 <__swsetup_r>
 80050ca:	b118      	cbz	r0, 80050d4 <__swbuf_r+0x32>
 80050cc:	f04f 37ff 	mov.w	r7, #4294967295
 80050d0:	4638      	mov	r0, r7
 80050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	6922      	ldr	r2, [r4, #16]
 80050d8:	1a98      	subs	r0, r3, r2
 80050da:	6963      	ldr	r3, [r4, #20]
 80050dc:	b2f6      	uxtb	r6, r6
 80050de:	4283      	cmp	r3, r0
 80050e0:	4637      	mov	r7, r6
 80050e2:	dc05      	bgt.n	80050f0 <__swbuf_r+0x4e>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4628      	mov	r0, r5
 80050e8:	f001 fd82 	bl	8006bf0 <_fflush_r>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1ed      	bne.n	80050cc <__swbuf_r+0x2a>
 80050f0:	68a3      	ldr	r3, [r4, #8]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	701e      	strb	r6, [r3, #0]
 80050fe:	6962      	ldr	r2, [r4, #20]
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	429a      	cmp	r2, r3
 8005104:	d004      	beq.n	8005110 <__swbuf_r+0x6e>
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	07db      	lsls	r3, r3, #31
 800510a:	d5e1      	bpl.n	80050d0 <__swbuf_r+0x2e>
 800510c:	2e0a      	cmp	r6, #10
 800510e:	d1df      	bne.n	80050d0 <__swbuf_r+0x2e>
 8005110:	4621      	mov	r1, r4
 8005112:	4628      	mov	r0, r5
 8005114:	f001 fd6c 	bl	8006bf0 <_fflush_r>
 8005118:	2800      	cmp	r0, #0
 800511a:	d0d9      	beq.n	80050d0 <__swbuf_r+0x2e>
 800511c:	e7d6      	b.n	80050cc <__swbuf_r+0x2a>
	...

08005120 <__swsetup_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4b29      	ldr	r3, [pc, #164]	@ (80051c8 <__swsetup_r+0xa8>)
 8005124:	4605      	mov	r5, r0
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	460c      	mov	r4, r1
 800512a:	b118      	cbz	r0, 8005134 <__swsetup_r+0x14>
 800512c:	6a03      	ldr	r3, [r0, #32]
 800512e:	b90b      	cbnz	r3, 8005134 <__swsetup_r+0x14>
 8005130:	f7ff fece 	bl	8004ed0 <__sinit>
 8005134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005138:	0719      	lsls	r1, r3, #28
 800513a:	d422      	bmi.n	8005182 <__swsetup_r+0x62>
 800513c:	06da      	lsls	r2, r3, #27
 800513e:	d407      	bmi.n	8005150 <__swsetup_r+0x30>
 8005140:	2209      	movs	r2, #9
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	f04f 30ff 	mov.w	r0, #4294967295
 800514e:	e033      	b.n	80051b8 <__swsetup_r+0x98>
 8005150:	0758      	lsls	r0, r3, #29
 8005152:	d512      	bpl.n	800517a <__swsetup_r+0x5a>
 8005154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005156:	b141      	cbz	r1, 800516a <__swsetup_r+0x4a>
 8005158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800515c:	4299      	cmp	r1, r3
 800515e:	d002      	beq.n	8005166 <__swsetup_r+0x46>
 8005160:	4628      	mov	r0, r5
 8005162:	f000 ff05 	bl	8005f70 <_free_r>
 8005166:	2300      	movs	r3, #0
 8005168:	6363      	str	r3, [r4, #52]	@ 0x34
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	2300      	movs	r3, #0
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f043 0308 	orr.w	r3, r3, #8
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	b94b      	cbnz	r3, 800519a <__swsetup_r+0x7a>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800518c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005190:	d003      	beq.n	800519a <__swsetup_r+0x7a>
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f001 fd79 	bl	8006c8c <__smakebuf_r>
 800519a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800519e:	f013 0201 	ands.w	r2, r3, #1
 80051a2:	d00a      	beq.n	80051ba <__swsetup_r+0x9a>
 80051a4:	2200      	movs	r2, #0
 80051a6:	60a2      	str	r2, [r4, #8]
 80051a8:	6962      	ldr	r2, [r4, #20]
 80051aa:	4252      	negs	r2, r2
 80051ac:	61a2      	str	r2, [r4, #24]
 80051ae:	6922      	ldr	r2, [r4, #16]
 80051b0:	b942      	cbnz	r2, 80051c4 <__swsetup_r+0xa4>
 80051b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051b6:	d1c5      	bne.n	8005144 <__swsetup_r+0x24>
 80051b8:	bd38      	pop	{r3, r4, r5, pc}
 80051ba:	0799      	lsls	r1, r3, #30
 80051bc:	bf58      	it	pl
 80051be:	6962      	ldrpl	r2, [r4, #20]
 80051c0:	60a2      	str	r2, [r4, #8]
 80051c2:	e7f4      	b.n	80051ae <__swsetup_r+0x8e>
 80051c4:	2000      	movs	r0, #0
 80051c6:	e7f7      	b.n	80051b8 <__swsetup_r+0x98>
 80051c8:	20000018 	.word	0x20000018

080051cc <memset>:
 80051cc:	4402      	add	r2, r0
 80051ce:	4603      	mov	r3, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <_localeconv_r>:
 80051dc:	4800      	ldr	r0, [pc, #0]	@ (80051e0 <_localeconv_r+0x4>)
 80051de:	4770      	bx	lr
 80051e0:	20000158 	.word	0x20000158

080051e4 <_close_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d06      	ldr	r5, [pc, #24]	@ (8005200 <_close_r+0x1c>)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fc f99d 	bl	800152e <_close>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_close_r+0x1a>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_close_r+0x1a>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	2000038c 	.word	0x2000038c

08005204 <_lseek_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	@ (8005224 <_lseek_r+0x20>)
 8005208:	4604      	mov	r4, r0
 800520a:	4608      	mov	r0, r1
 800520c:	4611      	mov	r1, r2
 800520e:	2200      	movs	r2, #0
 8005210:	602a      	str	r2, [r5, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f7fc f9af 	bl	8001576 <_lseek>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_lseek_r+0x1e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_lseek_r+0x1e>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	2000038c 	.word	0x2000038c

08005228 <_read_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	@ (8005248 <_read_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fc f940 	bl	80014bc <_read>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_read_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_read_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	2000038c 	.word	0x2000038c

0800524c <_write_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	@ (800526c <_write_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fc f94b 	bl	80014f6 <_write>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_write_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_write_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	2000038c 	.word	0x2000038c

08005270 <__errno>:
 8005270:	4b01      	ldr	r3, [pc, #4]	@ (8005278 <__errno+0x8>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000018 	.word	0x20000018

0800527c <__libc_init_array>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	4d0d      	ldr	r5, [pc, #52]	@ (80052b4 <__libc_init_array+0x38>)
 8005280:	4c0d      	ldr	r4, [pc, #52]	@ (80052b8 <__libc_init_array+0x3c>)
 8005282:	1b64      	subs	r4, r4, r5
 8005284:	10a4      	asrs	r4, r4, #2
 8005286:	2600      	movs	r6, #0
 8005288:	42a6      	cmp	r6, r4
 800528a:	d109      	bne.n	80052a0 <__libc_init_array+0x24>
 800528c:	4d0b      	ldr	r5, [pc, #44]	@ (80052bc <__libc_init_array+0x40>)
 800528e:	4c0c      	ldr	r4, [pc, #48]	@ (80052c0 <__libc_init_array+0x44>)
 8005290:	f001 fe28 	bl	8006ee4 <_init>
 8005294:	1b64      	subs	r4, r4, r5
 8005296:	10a4      	asrs	r4, r4, #2
 8005298:	2600      	movs	r6, #0
 800529a:	42a6      	cmp	r6, r4
 800529c:	d105      	bne.n	80052aa <__libc_init_array+0x2e>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a4:	4798      	blx	r3
 80052a6:	3601      	adds	r6, #1
 80052a8:	e7ee      	b.n	8005288 <__libc_init_array+0xc>
 80052aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ae:	4798      	blx	r3
 80052b0:	3601      	adds	r6, #1
 80052b2:	e7f2      	b.n	800529a <__libc_init_array+0x1e>
 80052b4:	080073b0 	.word	0x080073b0
 80052b8:	080073b0 	.word	0x080073b0
 80052bc:	080073b0 	.word	0x080073b0
 80052c0:	080073b4 	.word	0x080073b4

080052c4 <__retarget_lock_init_recursive>:
 80052c4:	4770      	bx	lr

080052c6 <__retarget_lock_acquire_recursive>:
 80052c6:	4770      	bx	lr

080052c8 <__retarget_lock_release_recursive>:
 80052c8:	4770      	bx	lr

080052ca <quorem>:
 80052ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ce:	6903      	ldr	r3, [r0, #16]
 80052d0:	690c      	ldr	r4, [r1, #16]
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	4607      	mov	r7, r0
 80052d6:	db7e      	blt.n	80053d6 <quorem+0x10c>
 80052d8:	3c01      	subs	r4, #1
 80052da:	f101 0814 	add.w	r8, r1, #20
 80052de:	00a3      	lsls	r3, r4, #2
 80052e0:	f100 0514 	add.w	r5, r0, #20
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052f4:	3301      	adds	r3, #1
 80052f6:	429a      	cmp	r2, r3
 80052f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005300:	d32e      	bcc.n	8005360 <quorem+0x96>
 8005302:	f04f 0a00 	mov.w	sl, #0
 8005306:	46c4      	mov	ip, r8
 8005308:	46ae      	mov	lr, r5
 800530a:	46d3      	mov	fp, sl
 800530c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005310:	b298      	uxth	r0, r3
 8005312:	fb06 a000 	mla	r0, r6, r0, sl
 8005316:	0c02      	lsrs	r2, r0, #16
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	fb06 2303 	mla	r3, r6, r3, r2
 800531e:	f8de 2000 	ldr.w	r2, [lr]
 8005322:	b280      	uxth	r0, r0
 8005324:	b292      	uxth	r2, r2
 8005326:	1a12      	subs	r2, r2, r0
 8005328:	445a      	add	r2, fp
 800532a:	f8de 0000 	ldr.w	r0, [lr]
 800532e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005332:	b29b      	uxth	r3, r3
 8005334:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005338:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800533c:	b292      	uxth	r2, r2
 800533e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005342:	45e1      	cmp	r9, ip
 8005344:	f84e 2b04 	str.w	r2, [lr], #4
 8005348:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800534c:	d2de      	bcs.n	800530c <quorem+0x42>
 800534e:	9b00      	ldr	r3, [sp, #0]
 8005350:	58eb      	ldr	r3, [r5, r3]
 8005352:	b92b      	cbnz	r3, 8005360 <quorem+0x96>
 8005354:	9b01      	ldr	r3, [sp, #4]
 8005356:	3b04      	subs	r3, #4
 8005358:	429d      	cmp	r5, r3
 800535a:	461a      	mov	r2, r3
 800535c:	d32f      	bcc.n	80053be <quorem+0xf4>
 800535e:	613c      	str	r4, [r7, #16]
 8005360:	4638      	mov	r0, r7
 8005362:	f001 f97f 	bl	8006664 <__mcmp>
 8005366:	2800      	cmp	r0, #0
 8005368:	db25      	blt.n	80053b6 <quorem+0xec>
 800536a:	4629      	mov	r1, r5
 800536c:	2000      	movs	r0, #0
 800536e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005372:	f8d1 c000 	ldr.w	ip, [r1]
 8005376:	fa1f fe82 	uxth.w	lr, r2
 800537a:	fa1f f38c 	uxth.w	r3, ip
 800537e:	eba3 030e 	sub.w	r3, r3, lr
 8005382:	4403      	add	r3, r0
 8005384:	0c12      	lsrs	r2, r2, #16
 8005386:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800538a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005394:	45c1      	cmp	r9, r8
 8005396:	f841 3b04 	str.w	r3, [r1], #4
 800539a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800539e:	d2e6      	bcs.n	800536e <quorem+0xa4>
 80053a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053a8:	b922      	cbnz	r2, 80053b4 <quorem+0xea>
 80053aa:	3b04      	subs	r3, #4
 80053ac:	429d      	cmp	r5, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	d30b      	bcc.n	80053ca <quorem+0x100>
 80053b2:	613c      	str	r4, [r7, #16]
 80053b4:	3601      	adds	r6, #1
 80053b6:	4630      	mov	r0, r6
 80053b8:	b003      	add	sp, #12
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	3b04      	subs	r3, #4
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	d1cb      	bne.n	800535e <quorem+0x94>
 80053c6:	3c01      	subs	r4, #1
 80053c8:	e7c6      	b.n	8005358 <quorem+0x8e>
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	3b04      	subs	r3, #4
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d1ef      	bne.n	80053b2 <quorem+0xe8>
 80053d2:	3c01      	subs	r4, #1
 80053d4:	e7ea      	b.n	80053ac <quorem+0xe2>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e7ee      	b.n	80053b8 <quorem+0xee>
 80053da:	0000      	movs	r0, r0
 80053dc:	0000      	movs	r0, r0
	...

080053e0 <_dtoa_r>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	69c7      	ldr	r7, [r0, #28]
 80053e6:	b097      	sub	sp, #92	@ 0x5c
 80053e8:	4614      	mov	r4, r2
 80053ea:	461d      	mov	r5, r3
 80053ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80053f0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80053f2:	4683      	mov	fp, r0
 80053f4:	b97f      	cbnz	r7, 8005416 <_dtoa_r+0x36>
 80053f6:	2010      	movs	r0, #16
 80053f8:	f000 fe04 	bl	8006004 <malloc>
 80053fc:	4602      	mov	r2, r0
 80053fe:	f8cb 001c 	str.w	r0, [fp, #28]
 8005402:	b920      	cbnz	r0, 800540e <_dtoa_r+0x2e>
 8005404:	4ba8      	ldr	r3, [pc, #672]	@ (80056a8 <_dtoa_r+0x2c8>)
 8005406:	21ef      	movs	r1, #239	@ 0xef
 8005408:	48a8      	ldr	r0, [pc, #672]	@ (80056ac <_dtoa_r+0x2cc>)
 800540a:	f001 fcbb 	bl	8006d84 <__assert_func>
 800540e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005412:	6007      	str	r7, [r0, #0]
 8005414:	60c7      	str	r7, [r0, #12]
 8005416:	f8db 301c 	ldr.w	r3, [fp, #28]
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	b159      	cbz	r1, 8005436 <_dtoa_r+0x56>
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	604a      	str	r2, [r1, #4]
 8005422:	2301      	movs	r3, #1
 8005424:	4093      	lsls	r3, r2
 8005426:	608b      	str	r3, [r1, #8]
 8005428:	4658      	mov	r0, fp
 800542a:	f000 fee1 	bl	80061f0 <_Bfree>
 800542e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	1e2b      	subs	r3, r5, #0
 8005438:	bfb9      	ittee	lt
 800543a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800543e:	9303      	strlt	r3, [sp, #12]
 8005440:	2300      	movge	r3, #0
 8005442:	6033      	strge	r3, [r6, #0]
 8005444:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005448:	4b99      	ldr	r3, [pc, #612]	@ (80056b0 <_dtoa_r+0x2d0>)
 800544a:	bfbc      	itt	lt
 800544c:	2201      	movlt	r2, #1
 800544e:	6032      	strlt	r2, [r6, #0]
 8005450:	ea33 0308 	bics.w	r3, r3, r8
 8005454:	d112      	bne.n	800547c <_dtoa_r+0x9c>
 8005456:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005458:	f242 730f 	movw	r3, #9999	@ 0x270f
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005462:	4323      	orrs	r3, r4
 8005464:	f000 8551 	beq.w	8005f0a <_dtoa_r+0xb2a>
 8005468:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800546a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80056b4 <_dtoa_r+0x2d4>
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8553 	beq.w	8005f1a <_dtoa_r+0xb3a>
 8005474:	f10a 0303 	add.w	r3, sl, #3
 8005478:	f000 bd4d 	b.w	8005f16 <_dtoa_r+0xb36>
 800547c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005480:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	f7fb fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005490:	4607      	mov	r7, r0
 8005492:	b158      	cbz	r0, 80054ac <_dtoa_r+0xcc>
 8005494:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005496:	2301      	movs	r3, #1
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800549c:	b113      	cbz	r3, 80054a4 <_dtoa_r+0xc4>
 800549e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80054a0:	4b85      	ldr	r3, [pc, #532]	@ (80056b8 <_dtoa_r+0x2d8>)
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80056bc <_dtoa_r+0x2dc>
 80054a8:	f000 bd37 	b.w	8005f1a <_dtoa_r+0xb3a>
 80054ac:	ab14      	add	r3, sp, #80	@ 0x50
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	ab15      	add	r3, sp, #84	@ 0x54
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	4658      	mov	r0, fp
 80054b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80054ba:	f001 f981 	bl	80067c0 <__d2b>
 80054be:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80054c2:	4681      	mov	r9, r0
 80054c4:	2e00      	cmp	r6, #0
 80054c6:	d076      	beq.n	80055b6 <_dtoa_r+0x1d6>
 80054c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054ca:	9712      	str	r7, [sp, #72]	@ 0x48
 80054cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054e0:	4619      	mov	r1, r3
 80054e2:	2200      	movs	r2, #0
 80054e4:	4b76      	ldr	r3, [pc, #472]	@ (80056c0 <_dtoa_r+0x2e0>)
 80054e6:	f7fa fecf 	bl	8000288 <__aeabi_dsub>
 80054ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005690 <_dtoa_r+0x2b0>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fb f882 	bl	80005f8 <__aeabi_dmul>
 80054f4:	a368      	add	r3, pc, #416	@ (adr r3, 8005698 <_dtoa_r+0x2b8>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fa fec7 	bl	800028c <__adddf3>
 80054fe:	4604      	mov	r4, r0
 8005500:	4630      	mov	r0, r6
 8005502:	460d      	mov	r5, r1
 8005504:	f7fb f80e 	bl	8000524 <__aeabi_i2d>
 8005508:	a365      	add	r3, pc, #404	@ (adr r3, 80056a0 <_dtoa_r+0x2c0>)
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f7fb f873 	bl	80005f8 <__aeabi_dmul>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4620      	mov	r0, r4
 8005518:	4629      	mov	r1, r5
 800551a:	f7fa feb7 	bl	800028c <__adddf3>
 800551e:	4604      	mov	r4, r0
 8005520:	460d      	mov	r5, r1
 8005522:	f7fb fb19 	bl	8000b58 <__aeabi_d2iz>
 8005526:	2200      	movs	r2, #0
 8005528:	4607      	mov	r7, r0
 800552a:	2300      	movs	r3, #0
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fb fad4 	bl	8000adc <__aeabi_dcmplt>
 8005534:	b140      	cbz	r0, 8005548 <_dtoa_r+0x168>
 8005536:	4638      	mov	r0, r7
 8005538:	f7fa fff4 	bl	8000524 <__aeabi_i2d>
 800553c:	4622      	mov	r2, r4
 800553e:	462b      	mov	r3, r5
 8005540:	f7fb fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005544:	b900      	cbnz	r0, 8005548 <_dtoa_r+0x168>
 8005546:	3f01      	subs	r7, #1
 8005548:	2f16      	cmp	r7, #22
 800554a:	d852      	bhi.n	80055f2 <_dtoa_r+0x212>
 800554c:	4b5d      	ldr	r3, [pc, #372]	@ (80056c4 <_dtoa_r+0x2e4>)
 800554e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800555a:	f7fb fabf 	bl	8000adc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	d049      	beq.n	80055f6 <_dtoa_r+0x216>
 8005562:	3f01      	subs	r7, #1
 8005564:	2300      	movs	r3, #0
 8005566:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005568:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800556a:	1b9b      	subs	r3, r3, r6
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	bf44      	itt	mi
 8005570:	f1c3 0801 	rsbmi	r8, r3, #1
 8005574:	2300      	movmi	r3, #0
 8005576:	9209      	str	r2, [sp, #36]	@ 0x24
 8005578:	bf54      	ite	pl
 800557a:	f04f 0800 	movpl.w	r8, #0
 800557e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005580:	2f00      	cmp	r7, #0
 8005582:	db3a      	blt.n	80055fa <_dtoa_r+0x21a>
 8005584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005586:	970e      	str	r7, [sp, #56]	@ 0x38
 8005588:	443b      	add	r3, r7
 800558a:	9309      	str	r3, [sp, #36]	@ 0x24
 800558c:	2300      	movs	r3, #0
 800558e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005590:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005592:	2b09      	cmp	r3, #9
 8005594:	d865      	bhi.n	8005662 <_dtoa_r+0x282>
 8005596:	2b05      	cmp	r3, #5
 8005598:	bfc4      	itt	gt
 800559a:	3b04      	subgt	r3, #4
 800559c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800559e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055a0:	f1a3 0302 	sub.w	r3, r3, #2
 80055a4:	bfcc      	ite	gt
 80055a6:	2400      	movgt	r4, #0
 80055a8:	2401      	movle	r4, #1
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d864      	bhi.n	8005678 <_dtoa_r+0x298>
 80055ae:	e8df f003 	tbb	[pc, r3]
 80055b2:	382b      	.short	0x382b
 80055b4:	5636      	.short	0x5636
 80055b6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80055ba:	441e      	add	r6, r3
 80055bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	bfc1      	itttt	gt
 80055c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055c8:	fa08 f803 	lslgt.w	r8, r8, r3
 80055cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055d4:	bfd6      	itet	le
 80055d6:	f1c3 0320 	rsble	r3, r3, #32
 80055da:	ea48 0003 	orrgt.w	r0, r8, r3
 80055de:	fa04 f003 	lslle.w	r0, r4, r3
 80055e2:	f7fa ff8f 	bl	8000504 <__aeabi_ui2d>
 80055e6:	2201      	movs	r2, #1
 80055e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055ec:	3e01      	subs	r6, #1
 80055ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80055f0:	e776      	b.n	80054e0 <_dtoa_r+0x100>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e7b7      	b.n	8005566 <_dtoa_r+0x186>
 80055f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80055f8:	e7b6      	b.n	8005568 <_dtoa_r+0x188>
 80055fa:	427b      	negs	r3, r7
 80055fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80055fe:	2300      	movs	r3, #0
 8005600:	eba8 0807 	sub.w	r8, r8, r7
 8005604:	930e      	str	r3, [sp, #56]	@ 0x38
 8005606:	e7c3      	b.n	8005590 <_dtoa_r+0x1b0>
 8005608:	2300      	movs	r3, #0
 800560a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800560c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800560e:	2b00      	cmp	r3, #0
 8005610:	dc35      	bgt.n	800567e <_dtoa_r+0x29e>
 8005612:	2301      	movs	r3, #1
 8005614:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005618:	461a      	mov	r2, r3
 800561a:	9221      	str	r2, [sp, #132]	@ 0x84
 800561c:	e00b      	b.n	8005636 <_dtoa_r+0x256>
 800561e:	2301      	movs	r3, #1
 8005620:	e7f3      	b.n	800560a <_dtoa_r+0x22a>
 8005622:	2300      	movs	r3, #0
 8005624:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005626:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	9308      	str	r3, [sp, #32]
 800562c:	3301      	adds	r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	bfb8      	it	lt
 8005634:	2301      	movlt	r3, #1
 8005636:	f8db 001c 	ldr.w	r0, [fp, #28]
 800563a:	2100      	movs	r1, #0
 800563c:	2204      	movs	r2, #4
 800563e:	f102 0514 	add.w	r5, r2, #20
 8005642:	429d      	cmp	r5, r3
 8005644:	d91f      	bls.n	8005686 <_dtoa_r+0x2a6>
 8005646:	6041      	str	r1, [r0, #4]
 8005648:	4658      	mov	r0, fp
 800564a:	f000 fd91 	bl	8006170 <_Balloc>
 800564e:	4682      	mov	sl, r0
 8005650:	2800      	cmp	r0, #0
 8005652:	d13b      	bne.n	80056cc <_dtoa_r+0x2ec>
 8005654:	4b1c      	ldr	r3, [pc, #112]	@ (80056c8 <_dtoa_r+0x2e8>)
 8005656:	4602      	mov	r2, r0
 8005658:	f240 11af 	movw	r1, #431	@ 0x1af
 800565c:	e6d4      	b.n	8005408 <_dtoa_r+0x28>
 800565e:	2301      	movs	r3, #1
 8005660:	e7e0      	b.n	8005624 <_dtoa_r+0x244>
 8005662:	2401      	movs	r4, #1
 8005664:	2300      	movs	r3, #0
 8005666:	9320      	str	r3, [sp, #128]	@ 0x80
 8005668:	940b      	str	r4, [sp, #44]	@ 0x2c
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005672:	2200      	movs	r2, #0
 8005674:	2312      	movs	r3, #18
 8005676:	e7d0      	b.n	800561a <_dtoa_r+0x23a>
 8005678:	2301      	movs	r3, #1
 800567a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800567c:	e7f5      	b.n	800566a <_dtoa_r+0x28a>
 800567e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005680:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005684:	e7d7      	b.n	8005636 <_dtoa_r+0x256>
 8005686:	3101      	adds	r1, #1
 8005688:	0052      	lsls	r2, r2, #1
 800568a:	e7d8      	b.n	800563e <_dtoa_r+0x25e>
 800568c:	f3af 8000 	nop.w
 8005690:	636f4361 	.word	0x636f4361
 8005694:	3fd287a7 	.word	0x3fd287a7
 8005698:	8b60c8b3 	.word	0x8b60c8b3
 800569c:	3fc68a28 	.word	0x3fc68a28
 80056a0:	509f79fb 	.word	0x509f79fb
 80056a4:	3fd34413 	.word	0x3fd34413
 80056a8:	08007075 	.word	0x08007075
 80056ac:	0800708c 	.word	0x0800708c
 80056b0:	7ff00000 	.word	0x7ff00000
 80056b4:	08007071 	.word	0x08007071
 80056b8:	08007045 	.word	0x08007045
 80056bc:	08007044 	.word	0x08007044
 80056c0:	3ff80000 	.word	0x3ff80000
 80056c4:	08007188 	.word	0x08007188
 80056c8:	080070e4 	.word	0x080070e4
 80056cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	9b07      	ldr	r3, [sp, #28]
 80056d4:	2b0e      	cmp	r3, #14
 80056d6:	f200 80a4 	bhi.w	8005822 <_dtoa_r+0x442>
 80056da:	2c00      	cmp	r4, #0
 80056dc:	f000 80a1 	beq.w	8005822 <_dtoa_r+0x442>
 80056e0:	2f00      	cmp	r7, #0
 80056e2:	dd33      	ble.n	800574c <_dtoa_r+0x36c>
 80056e4:	4b86      	ldr	r3, [pc, #536]	@ (8005900 <_dtoa_r+0x520>)
 80056e6:	f007 020f 	and.w	r2, r7, #15
 80056ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056f2:	05f8      	lsls	r0, r7, #23
 80056f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056fc:	d516      	bpl.n	800572c <_dtoa_r+0x34c>
 80056fe:	4b81      	ldr	r3, [pc, #516]	@ (8005904 <_dtoa_r+0x524>)
 8005700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005708:	f7fb f8a0 	bl	800084c <__aeabi_ddiv>
 800570c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005710:	f004 040f 	and.w	r4, r4, #15
 8005714:	2603      	movs	r6, #3
 8005716:	4d7b      	ldr	r5, [pc, #492]	@ (8005904 <_dtoa_r+0x524>)
 8005718:	b954      	cbnz	r4, 8005730 <_dtoa_r+0x350>
 800571a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800571e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005722:	f7fb f893 	bl	800084c <__aeabi_ddiv>
 8005726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572a:	e028      	b.n	800577e <_dtoa_r+0x39e>
 800572c:	2602      	movs	r6, #2
 800572e:	e7f2      	b.n	8005716 <_dtoa_r+0x336>
 8005730:	07e1      	lsls	r1, r4, #31
 8005732:	d508      	bpl.n	8005746 <_dtoa_r+0x366>
 8005734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800573c:	f7fa ff5c 	bl	80005f8 <__aeabi_dmul>
 8005740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005744:	3601      	adds	r6, #1
 8005746:	1064      	asrs	r4, r4, #1
 8005748:	3508      	adds	r5, #8
 800574a:	e7e5      	b.n	8005718 <_dtoa_r+0x338>
 800574c:	f000 80d2 	beq.w	80058f4 <_dtoa_r+0x514>
 8005750:	427c      	negs	r4, r7
 8005752:	4b6b      	ldr	r3, [pc, #428]	@ (8005900 <_dtoa_r+0x520>)
 8005754:	4d6b      	ldr	r5, [pc, #428]	@ (8005904 <_dtoa_r+0x524>)
 8005756:	f004 020f 	and.w	r2, r4, #15
 800575a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005766:	f7fa ff47 	bl	80005f8 <__aeabi_dmul>
 800576a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800576e:	1124      	asrs	r4, r4, #4
 8005770:	2300      	movs	r3, #0
 8005772:	2602      	movs	r6, #2
 8005774:	2c00      	cmp	r4, #0
 8005776:	f040 80b2 	bne.w	80058de <_dtoa_r+0x4fe>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1d3      	bne.n	8005726 <_dtoa_r+0x346>
 800577e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005780:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80b7 	beq.w	80058f8 <_dtoa_r+0x518>
 800578a:	4b5f      	ldr	r3, [pc, #380]	@ (8005908 <_dtoa_r+0x528>)
 800578c:	2200      	movs	r2, #0
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f7fb f9a3 	bl	8000adc <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	f000 80ae 	beq.w	80058f8 <_dtoa_r+0x518>
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 80aa 	beq.w	80058f8 <_dtoa_r+0x518>
 80057a4:	9b08      	ldr	r3, [sp, #32]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dd37      	ble.n	800581a <_dtoa_r+0x43a>
 80057aa:	1e7b      	subs	r3, r7, #1
 80057ac:	9304      	str	r3, [sp, #16]
 80057ae:	4620      	mov	r0, r4
 80057b0:	4b56      	ldr	r3, [pc, #344]	@ (800590c <_dtoa_r+0x52c>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	4629      	mov	r1, r5
 80057b6:	f7fa ff1f 	bl	80005f8 <__aeabi_dmul>
 80057ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057be:	9c08      	ldr	r4, [sp, #32]
 80057c0:	3601      	adds	r6, #1
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7fa feae 	bl	8000524 <__aeabi_i2d>
 80057c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057cc:	f7fa ff14 	bl	80005f8 <__aeabi_dmul>
 80057d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005910 <_dtoa_r+0x530>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	f7fa fd5a 	bl	800028c <__adddf3>
 80057d8:	4605      	mov	r5, r0
 80057da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057de:	2c00      	cmp	r4, #0
 80057e0:	f040 809a 	bne.w	8005918 <_dtoa_r+0x538>
 80057e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e8:	4b4a      	ldr	r3, [pc, #296]	@ (8005914 <_dtoa_r+0x534>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	f7fa fd4c 	bl	8000288 <__aeabi_dsub>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4633      	mov	r3, r6
 80057fc:	f7fb f98c 	bl	8000b18 <__aeabi_dcmpgt>
 8005800:	2800      	cmp	r0, #0
 8005802:	f040 828e 	bne.w	8005d22 <_dtoa_r+0x942>
 8005806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800580a:	462a      	mov	r2, r5
 800580c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005810:	f7fb f964 	bl	8000adc <__aeabi_dcmplt>
 8005814:	2800      	cmp	r0, #0
 8005816:	f040 8127 	bne.w	8005a68 <_dtoa_r+0x688>
 800581a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800581e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005822:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	f2c0 8163 	blt.w	8005af0 <_dtoa_r+0x710>
 800582a:	2f0e      	cmp	r7, #14
 800582c:	f300 8160 	bgt.w	8005af0 <_dtoa_r+0x710>
 8005830:	4b33      	ldr	r3, [pc, #204]	@ (8005900 <_dtoa_r+0x520>)
 8005832:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005836:	e9d3 3400 	ldrd	r3, r4, [r3]
 800583a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800583e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005840:	2b00      	cmp	r3, #0
 8005842:	da03      	bge.n	800584c <_dtoa_r+0x46c>
 8005844:	9b07      	ldr	r3, [sp, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f340 8100 	ble.w	8005a4c <_dtoa_r+0x66c>
 800584c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005850:	4656      	mov	r6, sl
 8005852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f7fa fff7 	bl	800084c <__aeabi_ddiv>
 800585e:	f7fb f97b 	bl	8000b58 <__aeabi_d2iz>
 8005862:	4680      	mov	r8, r0
 8005864:	f7fa fe5e 	bl	8000524 <__aeabi_i2d>
 8005868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586c:	f7fa fec4 	bl	80005f8 <__aeabi_dmul>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4620      	mov	r0, r4
 8005876:	4629      	mov	r1, r5
 8005878:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800587c:	f7fa fd04 	bl	8000288 <__aeabi_dsub>
 8005880:	f806 4b01 	strb.w	r4, [r6], #1
 8005884:	9d07      	ldr	r5, [sp, #28]
 8005886:	eba6 040a 	sub.w	r4, r6, sl
 800588a:	42a5      	cmp	r5, r4
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	f040 8116 	bne.w	8005ac0 <_dtoa_r+0x6e0>
 8005894:	f7fa fcfa 	bl	800028c <__adddf3>
 8005898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800589c:	4604      	mov	r4, r0
 800589e:	460d      	mov	r5, r1
 80058a0:	f7fb f93a 	bl	8000b18 <__aeabi_dcmpgt>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f040 80f8 	bne.w	8005a9a <_dtoa_r+0x6ba>
 80058aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80058b6:	b118      	cbz	r0, 80058c0 <_dtoa_r+0x4e0>
 80058b8:	f018 0f01 	tst.w	r8, #1
 80058bc:	f040 80ed 	bne.w	8005a9a <_dtoa_r+0x6ba>
 80058c0:	4649      	mov	r1, r9
 80058c2:	4658      	mov	r0, fp
 80058c4:	f000 fc94 	bl	80061f0 <_Bfree>
 80058c8:	2300      	movs	r3, #0
 80058ca:	7033      	strb	r3, [r6, #0]
 80058cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80058ce:	3701      	adds	r7, #1
 80058d0:	601f      	str	r7, [r3, #0]
 80058d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8320 	beq.w	8005f1a <_dtoa_r+0xb3a>
 80058da:	601e      	str	r6, [r3, #0]
 80058dc:	e31d      	b.n	8005f1a <_dtoa_r+0xb3a>
 80058de:	07e2      	lsls	r2, r4, #31
 80058e0:	d505      	bpl.n	80058ee <_dtoa_r+0x50e>
 80058e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058e6:	f7fa fe87 	bl	80005f8 <__aeabi_dmul>
 80058ea:	3601      	adds	r6, #1
 80058ec:	2301      	movs	r3, #1
 80058ee:	1064      	asrs	r4, r4, #1
 80058f0:	3508      	adds	r5, #8
 80058f2:	e73f      	b.n	8005774 <_dtoa_r+0x394>
 80058f4:	2602      	movs	r6, #2
 80058f6:	e742      	b.n	800577e <_dtoa_r+0x39e>
 80058f8:	9c07      	ldr	r4, [sp, #28]
 80058fa:	9704      	str	r7, [sp, #16]
 80058fc:	e761      	b.n	80057c2 <_dtoa_r+0x3e2>
 80058fe:	bf00      	nop
 8005900:	08007188 	.word	0x08007188
 8005904:	08007160 	.word	0x08007160
 8005908:	3ff00000 	.word	0x3ff00000
 800590c:	40240000 	.word	0x40240000
 8005910:	401c0000 	.word	0x401c0000
 8005914:	40140000 	.word	0x40140000
 8005918:	4b70      	ldr	r3, [pc, #448]	@ (8005adc <_dtoa_r+0x6fc>)
 800591a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800591c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005920:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005924:	4454      	add	r4, sl
 8005926:	2900      	cmp	r1, #0
 8005928:	d045      	beq.n	80059b6 <_dtoa_r+0x5d6>
 800592a:	496d      	ldr	r1, [pc, #436]	@ (8005ae0 <_dtoa_r+0x700>)
 800592c:	2000      	movs	r0, #0
 800592e:	f7fa ff8d 	bl	800084c <__aeabi_ddiv>
 8005932:	4633      	mov	r3, r6
 8005934:	462a      	mov	r2, r5
 8005936:	f7fa fca7 	bl	8000288 <__aeabi_dsub>
 800593a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800593e:	4656      	mov	r6, sl
 8005940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005944:	f7fb f908 	bl	8000b58 <__aeabi_d2iz>
 8005948:	4605      	mov	r5, r0
 800594a:	f7fa fdeb 	bl	8000524 <__aeabi_i2d>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005956:	f7fa fc97 	bl	8000288 <__aeabi_dsub>
 800595a:	3530      	adds	r5, #48	@ 0x30
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005964:	f806 5b01 	strb.w	r5, [r6], #1
 8005968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800596c:	f7fb f8b6 	bl	8000adc <__aeabi_dcmplt>
 8005970:	2800      	cmp	r0, #0
 8005972:	d163      	bne.n	8005a3c <_dtoa_r+0x65c>
 8005974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005978:	495a      	ldr	r1, [pc, #360]	@ (8005ae4 <_dtoa_r+0x704>)
 800597a:	2000      	movs	r0, #0
 800597c:	f7fa fc84 	bl	8000288 <__aeabi_dsub>
 8005980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005984:	f7fb f8aa 	bl	8000adc <__aeabi_dcmplt>
 8005988:	2800      	cmp	r0, #0
 800598a:	f040 8087 	bne.w	8005a9c <_dtoa_r+0x6bc>
 800598e:	42a6      	cmp	r6, r4
 8005990:	f43f af43 	beq.w	800581a <_dtoa_r+0x43a>
 8005994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005998:	4b53      	ldr	r3, [pc, #332]	@ (8005ae8 <_dtoa_r+0x708>)
 800599a:	2200      	movs	r2, #0
 800599c:	f7fa fe2c 	bl	80005f8 <__aeabi_dmul>
 80059a0:	4b51      	ldr	r3, [pc, #324]	@ (8005ae8 <_dtoa_r+0x708>)
 80059a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059a6:	2200      	movs	r2, #0
 80059a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ac:	f7fa fe24 	bl	80005f8 <__aeabi_dmul>
 80059b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b4:	e7c4      	b.n	8005940 <_dtoa_r+0x560>
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7fa fe1d 	bl	80005f8 <__aeabi_dmul>
 80059be:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059c2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059c4:	4656      	mov	r6, sl
 80059c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ca:	f7fb f8c5 	bl	8000b58 <__aeabi_d2iz>
 80059ce:	4605      	mov	r5, r0
 80059d0:	f7fa fda8 	bl	8000524 <__aeabi_i2d>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059dc:	f7fa fc54 	bl	8000288 <__aeabi_dsub>
 80059e0:	3530      	adds	r5, #48	@ 0x30
 80059e2:	f806 5b01 	strb.w	r5, [r6], #1
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	d124      	bne.n	8005a40 <_dtoa_r+0x660>
 80059f6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ae0 <_dtoa_r+0x700>)
 80059f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059fc:	f7fa fc46 	bl	800028c <__adddf3>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a08:	f7fb f886 	bl	8000b18 <__aeabi_dcmpgt>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d145      	bne.n	8005a9c <_dtoa_r+0x6bc>
 8005a10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a14:	4932      	ldr	r1, [pc, #200]	@ (8005ae0 <_dtoa_r+0x700>)
 8005a16:	2000      	movs	r0, #0
 8005a18:	f7fa fc36 	bl	8000288 <__aeabi_dsub>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a24:	f7fb f85a 	bl	8000adc <__aeabi_dcmplt>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	f43f aef6 	beq.w	800581a <_dtoa_r+0x43a>
 8005a2e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a30:	1e73      	subs	r3, r6, #1
 8005a32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a38:	2b30      	cmp	r3, #48	@ 0x30
 8005a3a:	d0f8      	beq.n	8005a2e <_dtoa_r+0x64e>
 8005a3c:	9f04      	ldr	r7, [sp, #16]
 8005a3e:	e73f      	b.n	80058c0 <_dtoa_r+0x4e0>
 8005a40:	4b29      	ldr	r3, [pc, #164]	@ (8005ae8 <_dtoa_r+0x708>)
 8005a42:	f7fa fdd9 	bl	80005f8 <__aeabi_dmul>
 8005a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a4a:	e7bc      	b.n	80059c6 <_dtoa_r+0x5e6>
 8005a4c:	d10c      	bne.n	8005a68 <_dtoa_r+0x688>
 8005a4e:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <_dtoa_r+0x70c>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a56:	f7fa fdcf 	bl	80005f8 <__aeabi_dmul>
 8005a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a5e:	f7fb f851 	bl	8000b04 <__aeabi_dcmpge>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f000 815b 	beq.w	8005d1e <_dtoa_r+0x93e>
 8005a68:	2400      	movs	r4, #0
 8005a6a:	4625      	mov	r5, r4
 8005a6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	4656      	mov	r6, sl
 8005a74:	2700      	movs	r7, #0
 8005a76:	4621      	mov	r1, r4
 8005a78:	4658      	mov	r0, fp
 8005a7a:	f000 fbb9 	bl	80061f0 <_Bfree>
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	d0dc      	beq.n	8005a3c <_dtoa_r+0x65c>
 8005a82:	b12f      	cbz	r7, 8005a90 <_dtoa_r+0x6b0>
 8005a84:	42af      	cmp	r7, r5
 8005a86:	d003      	beq.n	8005a90 <_dtoa_r+0x6b0>
 8005a88:	4639      	mov	r1, r7
 8005a8a:	4658      	mov	r0, fp
 8005a8c:	f000 fbb0 	bl	80061f0 <_Bfree>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4658      	mov	r0, fp
 8005a94:	f000 fbac 	bl	80061f0 <_Bfree>
 8005a98:	e7d0      	b.n	8005a3c <_dtoa_r+0x65c>
 8005a9a:	9704      	str	r7, [sp, #16]
 8005a9c:	4633      	mov	r3, r6
 8005a9e:	461e      	mov	r6, r3
 8005aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aa4:	2a39      	cmp	r2, #57	@ 0x39
 8005aa6:	d107      	bne.n	8005ab8 <_dtoa_r+0x6d8>
 8005aa8:	459a      	cmp	sl, r3
 8005aaa:	d1f8      	bne.n	8005a9e <_dtoa_r+0x6be>
 8005aac:	9a04      	ldr	r2, [sp, #16]
 8005aae:	3201      	adds	r2, #1
 8005ab0:	9204      	str	r2, [sp, #16]
 8005ab2:	2230      	movs	r2, #48	@ 0x30
 8005ab4:	f88a 2000 	strb.w	r2, [sl]
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	3201      	adds	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e7bd      	b.n	8005a3c <_dtoa_r+0x65c>
 8005ac0:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <_dtoa_r+0x708>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f7fa fd98 	bl	80005f8 <__aeabi_dmul>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2300      	movs	r3, #0
 8005acc:	4604      	mov	r4, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	f7fa fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f43f aebc 	beq.w	8005852 <_dtoa_r+0x472>
 8005ada:	e6f1      	b.n	80058c0 <_dtoa_r+0x4e0>
 8005adc:	08007188 	.word	0x08007188
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	3ff00000 	.word	0x3ff00000
 8005ae8:	40240000 	.word	0x40240000
 8005aec:	40140000 	.word	0x40140000
 8005af0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	f000 80db 	beq.w	8005cae <_dtoa_r+0x8ce>
 8005af8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005afa:	2a01      	cmp	r2, #1
 8005afc:	f300 80bf 	bgt.w	8005c7e <_dtoa_r+0x89e>
 8005b00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	f000 80b7 	beq.w	8005c76 <_dtoa_r+0x896>
 8005b08:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b0e:	4646      	mov	r6, r8
 8005b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b12:	2101      	movs	r1, #1
 8005b14:	441a      	add	r2, r3
 8005b16:	4658      	mov	r0, fp
 8005b18:	4498      	add	r8, r3
 8005b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b1c:	f000 fc1c 	bl	8006358 <__i2b>
 8005b20:	4605      	mov	r5, r0
 8005b22:	b15e      	cbz	r6, 8005b3c <_dtoa_r+0x75c>
 8005b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd08      	ble.n	8005b3c <_dtoa_r+0x75c>
 8005b2a:	42b3      	cmp	r3, r6
 8005b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b2e:	bfa8      	it	ge
 8005b30:	4633      	movge	r3, r6
 8005b32:	eba8 0803 	sub.w	r8, r8, r3
 8005b36:	1af6      	subs	r6, r6, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b3e:	b1f3      	cbz	r3, 8005b7e <_dtoa_r+0x79e>
 8005b40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80b7 	beq.w	8005cb6 <_dtoa_r+0x8d6>
 8005b48:	b18c      	cbz	r4, 8005b6e <_dtoa_r+0x78e>
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4658      	mov	r0, fp
 8005b50:	f000 fcc2 	bl	80064d8 <__pow5mult>
 8005b54:	464a      	mov	r2, r9
 8005b56:	4601      	mov	r1, r0
 8005b58:	4605      	mov	r5, r0
 8005b5a:	4658      	mov	r0, fp
 8005b5c:	f000 fc12 	bl	8006384 <__multiply>
 8005b60:	4649      	mov	r1, r9
 8005b62:	9004      	str	r0, [sp, #16]
 8005b64:	4658      	mov	r0, fp
 8005b66:	f000 fb43 	bl	80061f0 <_Bfree>
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b70:	1b1a      	subs	r2, r3, r4
 8005b72:	d004      	beq.n	8005b7e <_dtoa_r+0x79e>
 8005b74:	4649      	mov	r1, r9
 8005b76:	4658      	mov	r0, fp
 8005b78:	f000 fcae 	bl	80064d8 <__pow5mult>
 8005b7c:	4681      	mov	r9, r0
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4658      	mov	r0, fp
 8005b82:	f000 fbe9 	bl	8006358 <__i2b>
 8005b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b88:	4604      	mov	r4, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 81c9 	beq.w	8005f22 <_dtoa_r+0xb42>
 8005b90:	461a      	mov	r2, r3
 8005b92:	4601      	mov	r1, r0
 8005b94:	4658      	mov	r0, fp
 8005b96:	f000 fc9f 	bl	80064d8 <__pow5mult>
 8005b9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	f300 808f 	bgt.w	8005cc2 <_dtoa_r+0x8e2>
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 8087 	bne.w	8005cba <_dtoa_r+0x8da>
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f040 8083 	bne.w	8005cbe <_dtoa_r+0x8de>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bbe:	0d1b      	lsrs	r3, r3, #20
 8005bc0:	051b      	lsls	r3, r3, #20
 8005bc2:	b12b      	cbz	r3, 8005bd0 <_dtoa_r+0x7f0>
 8005bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bca:	f108 0801 	add.w	r8, r8, #1
 8005bce:	2301      	movs	r3, #1
 8005bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 81aa 	beq.w	8005f2e <_dtoa_r+0xb4e>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005be0:	6918      	ldr	r0, [r3, #16]
 8005be2:	f000 fb6d 	bl	80062c0 <__hi0bits>
 8005be6:	f1c0 0020 	rsb	r0, r0, #32
 8005bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bec:	4418      	add	r0, r3
 8005bee:	f010 001f 	ands.w	r0, r0, #31
 8005bf2:	d071      	beq.n	8005cd8 <_dtoa_r+0x8f8>
 8005bf4:	f1c0 0320 	rsb	r3, r0, #32
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	dd65      	ble.n	8005cc8 <_dtoa_r+0x8e8>
 8005bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfe:	f1c0 001c 	rsb	r0, r0, #28
 8005c02:	4403      	add	r3, r0
 8005c04:	4480      	add	r8, r0
 8005c06:	4406      	add	r6, r0
 8005c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0a:	f1b8 0f00 	cmp.w	r8, #0
 8005c0e:	dd05      	ble.n	8005c1c <_dtoa_r+0x83c>
 8005c10:	4649      	mov	r1, r9
 8005c12:	4642      	mov	r2, r8
 8005c14:	4658      	mov	r0, fp
 8005c16:	f000 fcb9 	bl	800658c <__lshift>
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dd05      	ble.n	8005c2e <_dtoa_r+0x84e>
 8005c22:	4621      	mov	r1, r4
 8005c24:	461a      	mov	r2, r3
 8005c26:	4658      	mov	r0, fp
 8005c28:	f000 fcb0 	bl	800658c <__lshift>
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d053      	beq.n	8005cdc <_dtoa_r+0x8fc>
 8005c34:	4621      	mov	r1, r4
 8005c36:	4648      	mov	r0, r9
 8005c38:	f000 fd14 	bl	8006664 <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	da4d      	bge.n	8005cdc <_dtoa_r+0x8fc>
 8005c40:	1e7b      	subs	r3, r7, #1
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	4649      	mov	r1, r9
 8005c46:	2300      	movs	r3, #0
 8005c48:	220a      	movs	r2, #10
 8005c4a:	4658      	mov	r0, fp
 8005c4c:	f000 faf2 	bl	8006234 <__multadd>
 8005c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c52:	4681      	mov	r9, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 816c 	beq.w	8005f32 <_dtoa_r+0xb52>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	220a      	movs	r2, #10
 8005c60:	4658      	mov	r0, fp
 8005c62:	f000 fae7 	bl	8006234 <__multadd>
 8005c66:	9b08      	ldr	r3, [sp, #32]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	dc61      	bgt.n	8005d32 <_dtoa_r+0x952>
 8005c6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	dc3b      	bgt.n	8005cec <_dtoa_r+0x90c>
 8005c74:	e05d      	b.n	8005d32 <_dtoa_r+0x952>
 8005c76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c78:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c7c:	e746      	b.n	8005b0c <_dtoa_r+0x72c>
 8005c7e:	9b07      	ldr	r3, [sp, #28]
 8005c80:	1e5c      	subs	r4, r3, #1
 8005c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	bfbf      	itttt	lt
 8005c88:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c8a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005c8c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c8e:	1ae3      	sublt	r3, r4, r3
 8005c90:	bfb4      	ite	lt
 8005c92:	18d2      	addlt	r2, r2, r3
 8005c94:	1b1c      	subge	r4, r3, r4
 8005c96:	9b07      	ldr	r3, [sp, #28]
 8005c98:	bfbc      	itt	lt
 8005c9a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005c9c:	2400      	movlt	r4, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfb5      	itete	lt
 8005ca2:	eba8 0603 	sublt.w	r6, r8, r3
 8005ca6:	9b07      	ldrge	r3, [sp, #28]
 8005ca8:	2300      	movlt	r3, #0
 8005caa:	4646      	movge	r6, r8
 8005cac:	e730      	b.n	8005b10 <_dtoa_r+0x730>
 8005cae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005cb0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005cb2:	4646      	mov	r6, r8
 8005cb4:	e735      	b.n	8005b22 <_dtoa_r+0x742>
 8005cb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cb8:	e75c      	b.n	8005b74 <_dtoa_r+0x794>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e788      	b.n	8005bd0 <_dtoa_r+0x7f0>
 8005cbe:	9b02      	ldr	r3, [sp, #8]
 8005cc0:	e786      	b.n	8005bd0 <_dtoa_r+0x7f0>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cc6:	e788      	b.n	8005bda <_dtoa_r+0x7fa>
 8005cc8:	d09f      	beq.n	8005c0a <_dtoa_r+0x82a>
 8005cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ccc:	331c      	adds	r3, #28
 8005cce:	441a      	add	r2, r3
 8005cd0:	4498      	add	r8, r3
 8005cd2:	441e      	add	r6, r3
 8005cd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cd6:	e798      	b.n	8005c0a <_dtoa_r+0x82a>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	e7f6      	b.n	8005cca <_dtoa_r+0x8ea>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	9704      	str	r7, [sp, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc20      	bgt.n	8005d26 <_dtoa_r+0x946>
 8005ce4:	9308      	str	r3, [sp, #32]
 8005ce6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	dd1e      	ble.n	8005d2a <_dtoa_r+0x94a>
 8005cec:	9b08      	ldr	r3, [sp, #32]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f47f aebc 	bne.w	8005a6c <_dtoa_r+0x68c>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	2205      	movs	r2, #5
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	f000 fa9b 	bl	8006234 <__multadd>
 8005cfe:	4601      	mov	r1, r0
 8005d00:	4604      	mov	r4, r0
 8005d02:	4648      	mov	r0, r9
 8005d04:	f000 fcae 	bl	8006664 <__mcmp>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f77f aeaf 	ble.w	8005a6c <_dtoa_r+0x68c>
 8005d0e:	4656      	mov	r6, sl
 8005d10:	2331      	movs	r3, #49	@ 0x31
 8005d12:	f806 3b01 	strb.w	r3, [r6], #1
 8005d16:	9b04      	ldr	r3, [sp, #16]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	e6aa      	b.n	8005a74 <_dtoa_r+0x694>
 8005d1e:	9c07      	ldr	r4, [sp, #28]
 8005d20:	9704      	str	r7, [sp, #16]
 8005d22:	4625      	mov	r5, r4
 8005d24:	e7f3      	b.n	8005d0e <_dtoa_r+0x92e>
 8005d26:	9b07      	ldr	r3, [sp, #28]
 8005d28:	9308      	str	r3, [sp, #32]
 8005d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8104 	beq.w	8005f3a <_dtoa_r+0xb5a>
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	dd05      	ble.n	8005d42 <_dtoa_r+0x962>
 8005d36:	4629      	mov	r1, r5
 8005d38:	4632      	mov	r2, r6
 8005d3a:	4658      	mov	r0, fp
 8005d3c:	f000 fc26 	bl	800658c <__lshift>
 8005d40:	4605      	mov	r5, r0
 8005d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05a      	beq.n	8005dfe <_dtoa_r+0xa1e>
 8005d48:	6869      	ldr	r1, [r5, #4]
 8005d4a:	4658      	mov	r0, fp
 8005d4c:	f000 fa10 	bl	8006170 <_Balloc>
 8005d50:	4606      	mov	r6, r0
 8005d52:	b928      	cbnz	r0, 8005d60 <_dtoa_r+0x980>
 8005d54:	4b84      	ldr	r3, [pc, #528]	@ (8005f68 <_dtoa_r+0xb88>)
 8005d56:	4602      	mov	r2, r0
 8005d58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d5c:	f7ff bb54 	b.w	8005408 <_dtoa_r+0x28>
 8005d60:	692a      	ldr	r2, [r5, #16]
 8005d62:	3202      	adds	r2, #2
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	f105 010c 	add.w	r1, r5, #12
 8005d6a:	300c      	adds	r0, #12
 8005d6c:	f000 fffc 	bl	8006d68 <memcpy>
 8005d70:	2201      	movs	r2, #1
 8005d72:	4631      	mov	r1, r6
 8005d74:	4658      	mov	r0, fp
 8005d76:	f000 fc09 	bl	800658c <__lshift>
 8005d7a:	f10a 0301 	add.w	r3, sl, #1
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	9b08      	ldr	r3, [sp, #32]
 8005d82:	4453      	add	r3, sl
 8005d84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	462f      	mov	r7, r5
 8005d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d90:	4605      	mov	r5, r0
 8005d92:	9b07      	ldr	r3, [sp, #28]
 8005d94:	4621      	mov	r1, r4
 8005d96:	3b01      	subs	r3, #1
 8005d98:	4648      	mov	r0, r9
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	f7ff fa95 	bl	80052ca <quorem>
 8005da0:	4639      	mov	r1, r7
 8005da2:	9008      	str	r0, [sp, #32]
 8005da4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005da8:	4648      	mov	r0, r9
 8005daa:	f000 fc5b 	bl	8006664 <__mcmp>
 8005dae:	462a      	mov	r2, r5
 8005db0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005db2:	4621      	mov	r1, r4
 8005db4:	4658      	mov	r0, fp
 8005db6:	f000 fc71 	bl	800669c <__mdiff>
 8005dba:	68c2      	ldr	r2, [r0, #12]
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	bb02      	cbnz	r2, 8005e02 <_dtoa_r+0xa22>
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	4648      	mov	r0, r9
 8005dc4:	f000 fc4e 	bl	8006664 <__mcmp>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4658      	mov	r0, fp
 8005dce:	920c      	str	r2, [sp, #48]	@ 0x30
 8005dd0:	f000 fa0e 	bl	80061f0 <_Bfree>
 8005dd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005dd8:	9e07      	ldr	r6, [sp, #28]
 8005dda:	ea43 0102 	orr.w	r1, r3, r2
 8005dde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005de0:	4319      	orrs	r1, r3
 8005de2:	d110      	bne.n	8005e06 <_dtoa_r+0xa26>
 8005de4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005de8:	d029      	beq.n	8005e3e <_dtoa_r+0xa5e>
 8005dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dd02      	ble.n	8005df6 <_dtoa_r+0xa16>
 8005df0:	9b08      	ldr	r3, [sp, #32]
 8005df2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005df6:	9b02      	ldr	r3, [sp, #8]
 8005df8:	f883 8000 	strb.w	r8, [r3]
 8005dfc:	e63b      	b.n	8005a76 <_dtoa_r+0x696>
 8005dfe:	4628      	mov	r0, r5
 8005e00:	e7bb      	b.n	8005d7a <_dtoa_r+0x99a>
 8005e02:	2201      	movs	r2, #1
 8005e04:	e7e1      	b.n	8005dca <_dtoa_r+0x9ea>
 8005e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	db04      	blt.n	8005e16 <_dtoa_r+0xa36>
 8005e0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e12:	430b      	orrs	r3, r1
 8005e14:	d120      	bne.n	8005e58 <_dtoa_r+0xa78>
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	dded      	ble.n	8005df6 <_dtoa_r+0xa16>
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4658      	mov	r0, fp
 8005e20:	f000 fbb4 	bl	800658c <__lshift>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4681      	mov	r9, r0
 8005e28:	f000 fc1c 	bl	8006664 <__mcmp>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	dc03      	bgt.n	8005e38 <_dtoa_r+0xa58>
 8005e30:	d1e1      	bne.n	8005df6 <_dtoa_r+0xa16>
 8005e32:	f018 0f01 	tst.w	r8, #1
 8005e36:	d0de      	beq.n	8005df6 <_dtoa_r+0xa16>
 8005e38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e3c:	d1d8      	bne.n	8005df0 <_dtoa_r+0xa10>
 8005e3e:	9a02      	ldr	r2, [sp, #8]
 8005e40:	2339      	movs	r3, #57	@ 0x39
 8005e42:	7013      	strb	r3, [r2, #0]
 8005e44:	4633      	mov	r3, r6
 8005e46:	461e      	mov	r6, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e4e:	2a39      	cmp	r2, #57	@ 0x39
 8005e50:	d052      	beq.n	8005ef8 <_dtoa_r+0xb18>
 8005e52:	3201      	adds	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e60e      	b.n	8005a76 <_dtoa_r+0x696>
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	dd07      	ble.n	8005e6c <_dtoa_r+0xa8c>
 8005e5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e60:	d0ed      	beq.n	8005e3e <_dtoa_r+0xa5e>
 8005e62:	9a02      	ldr	r2, [sp, #8]
 8005e64:	f108 0301 	add.w	r3, r8, #1
 8005e68:	7013      	strb	r3, [r2, #0]
 8005e6a:	e604      	b.n	8005a76 <_dtoa_r+0x696>
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	9a07      	ldr	r2, [sp, #28]
 8005e70:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005e74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d028      	beq.n	8005ecc <_dtoa_r+0xaec>
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	220a      	movs	r2, #10
 8005e80:	4658      	mov	r0, fp
 8005e82:	f000 f9d7 	bl	8006234 <__multadd>
 8005e86:	42af      	cmp	r7, r5
 8005e88:	4681      	mov	r9, r0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	f04f 020a 	mov.w	r2, #10
 8005e92:	4639      	mov	r1, r7
 8005e94:	4658      	mov	r0, fp
 8005e96:	d107      	bne.n	8005ea8 <_dtoa_r+0xac8>
 8005e98:	f000 f9cc 	bl	8006234 <__multadd>
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	9b07      	ldr	r3, [sp, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	9307      	str	r3, [sp, #28]
 8005ea6:	e774      	b.n	8005d92 <_dtoa_r+0x9b2>
 8005ea8:	f000 f9c4 	bl	8006234 <__multadd>
 8005eac:	4629      	mov	r1, r5
 8005eae:	4607      	mov	r7, r0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	f000 f9bd 	bl	8006234 <__multadd>
 8005eba:	4605      	mov	r5, r0
 8005ebc:	e7f0      	b.n	8005ea0 <_dtoa_r+0xac0>
 8005ebe:	9b08      	ldr	r3, [sp, #32]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfcc      	ite	gt
 8005ec4:	461e      	movgt	r6, r3
 8005ec6:	2601      	movle	r6, #1
 8005ec8:	4456      	add	r6, sl
 8005eca:	2700      	movs	r7, #0
 8005ecc:	4649      	mov	r1, r9
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4658      	mov	r0, fp
 8005ed2:	f000 fb5b 	bl	800658c <__lshift>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4681      	mov	r9, r0
 8005eda:	f000 fbc3 	bl	8006664 <__mcmp>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	dcb0      	bgt.n	8005e44 <_dtoa_r+0xa64>
 8005ee2:	d102      	bne.n	8005eea <_dtoa_r+0xb0a>
 8005ee4:	f018 0f01 	tst.w	r8, #1
 8005ee8:	d1ac      	bne.n	8005e44 <_dtoa_r+0xa64>
 8005eea:	4633      	mov	r3, r6
 8005eec:	461e      	mov	r6, r3
 8005eee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ef2:	2a30      	cmp	r2, #48	@ 0x30
 8005ef4:	d0fa      	beq.n	8005eec <_dtoa_r+0xb0c>
 8005ef6:	e5be      	b.n	8005a76 <_dtoa_r+0x696>
 8005ef8:	459a      	cmp	sl, r3
 8005efa:	d1a4      	bne.n	8005e46 <_dtoa_r+0xa66>
 8005efc:	9b04      	ldr	r3, [sp, #16]
 8005efe:	3301      	adds	r3, #1
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	2331      	movs	r3, #49	@ 0x31
 8005f04:	f88a 3000 	strb.w	r3, [sl]
 8005f08:	e5b5      	b.n	8005a76 <_dtoa_r+0x696>
 8005f0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005f6c <_dtoa_r+0xb8c>
 8005f10:	b11b      	cbz	r3, 8005f1a <_dtoa_r+0xb3a>
 8005f12:	f10a 0308 	add.w	r3, sl, #8
 8005f16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	b017      	add	sp, #92	@ 0x5c
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f77f ae3d 	ble.w	8005ba4 <_dtoa_r+0x7c4>
 8005f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f2e:	2001      	movs	r0, #1
 8005f30:	e65b      	b.n	8005bea <_dtoa_r+0x80a>
 8005f32:	9b08      	ldr	r3, [sp, #32]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f77f aed6 	ble.w	8005ce6 <_dtoa_r+0x906>
 8005f3a:	4656      	mov	r6, sl
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4648      	mov	r0, r9
 8005f40:	f7ff f9c3 	bl	80052ca <quorem>
 8005f44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f48:	f806 8b01 	strb.w	r8, [r6], #1
 8005f4c:	9b08      	ldr	r3, [sp, #32]
 8005f4e:	eba6 020a 	sub.w	r2, r6, sl
 8005f52:	4293      	cmp	r3, r2
 8005f54:	ddb3      	ble.n	8005ebe <_dtoa_r+0xade>
 8005f56:	4649      	mov	r1, r9
 8005f58:	2300      	movs	r3, #0
 8005f5a:	220a      	movs	r2, #10
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	f000 f969 	bl	8006234 <__multadd>
 8005f62:	4681      	mov	r9, r0
 8005f64:	e7ea      	b.n	8005f3c <_dtoa_r+0xb5c>
 8005f66:	bf00      	nop
 8005f68:	080070e4 	.word	0x080070e4
 8005f6c:	08007068 	.word	0x08007068

08005f70 <_free_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4605      	mov	r5, r0
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d041      	beq.n	8005ffc <_free_r+0x8c>
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f0c      	subs	r4, r1, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	18e4      	addlt	r4, r4, r3
 8005f84:	f000 f8e8 	bl	8006158 <__malloc_lock>
 8005f88:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <_free_r+0x90>)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	b933      	cbnz	r3, 8005f9c <_free_r+0x2c>
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	4628      	mov	r0, r5
 8005f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f98:	f000 b8e4 	b.w	8006164 <__malloc_unlock>
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d908      	bls.n	8005fb2 <_free_r+0x42>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	1821      	adds	r1, r4, r0
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	bf01      	itttt	eq
 8005fa8:	6819      	ldreq	r1, [r3, #0]
 8005faa:	685b      	ldreq	r3, [r3, #4]
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	e7ed      	b.n	8005f8e <_free_r+0x1e>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b10b      	cbz	r3, 8005fbc <_free_r+0x4c>
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d9fa      	bls.n	8005fb2 <_free_r+0x42>
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	1850      	adds	r0, r2, r1
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d10b      	bne.n	8005fdc <_free_r+0x6c>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	1850      	adds	r0, r2, r1
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	d1e0      	bne.n	8005f92 <_free_r+0x22>
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	4408      	add	r0, r1
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	e7da      	b.n	8005f92 <_free_r+0x22>
 8005fdc:	d902      	bls.n	8005fe4 <_free_r+0x74>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	e7d6      	b.n	8005f92 <_free_r+0x22>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	1821      	adds	r1, r4, r0
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf04      	itt	eq
 8005fec:	6819      	ldreq	r1, [r3, #0]
 8005fee:	685b      	ldreq	r3, [r3, #4]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	bf04      	itt	eq
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	6054      	str	r4, [r2, #4]
 8005ffa:	e7ca      	b.n	8005f92 <_free_r+0x22>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	20000398 	.word	0x20000398

08006004 <malloc>:
 8006004:	4b02      	ldr	r3, [pc, #8]	@ (8006010 <malloc+0xc>)
 8006006:	4601      	mov	r1, r0
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f000 b825 	b.w	8006058 <_malloc_r>
 800600e:	bf00      	nop
 8006010:	20000018 	.word	0x20000018

08006014 <sbrk_aligned>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	4e0f      	ldr	r6, [pc, #60]	@ (8006054 <sbrk_aligned+0x40>)
 8006018:	460c      	mov	r4, r1
 800601a:	6831      	ldr	r1, [r6, #0]
 800601c:	4605      	mov	r5, r0
 800601e:	b911      	cbnz	r1, 8006026 <sbrk_aligned+0x12>
 8006020:	f000 fe92 	bl	8006d48 <_sbrk_r>
 8006024:	6030      	str	r0, [r6, #0]
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f000 fe8d 	bl	8006d48 <_sbrk_r>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d103      	bne.n	800603a <sbrk_aligned+0x26>
 8006032:	f04f 34ff 	mov.w	r4, #4294967295
 8006036:	4620      	mov	r0, r4
 8006038:	bd70      	pop	{r4, r5, r6, pc}
 800603a:	1cc4      	adds	r4, r0, #3
 800603c:	f024 0403 	bic.w	r4, r4, #3
 8006040:	42a0      	cmp	r0, r4
 8006042:	d0f8      	beq.n	8006036 <sbrk_aligned+0x22>
 8006044:	1a21      	subs	r1, r4, r0
 8006046:	4628      	mov	r0, r5
 8006048:	f000 fe7e 	bl	8006d48 <_sbrk_r>
 800604c:	3001      	adds	r0, #1
 800604e:	d1f2      	bne.n	8006036 <sbrk_aligned+0x22>
 8006050:	e7ef      	b.n	8006032 <sbrk_aligned+0x1e>
 8006052:	bf00      	nop
 8006054:	20000394 	.word	0x20000394

08006058 <_malloc_r>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	1ccd      	adds	r5, r1, #3
 800605e:	f025 0503 	bic.w	r5, r5, #3
 8006062:	3508      	adds	r5, #8
 8006064:	2d0c      	cmp	r5, #12
 8006066:	bf38      	it	cc
 8006068:	250c      	movcc	r5, #12
 800606a:	2d00      	cmp	r5, #0
 800606c:	4606      	mov	r6, r0
 800606e:	db01      	blt.n	8006074 <_malloc_r+0x1c>
 8006070:	42a9      	cmp	r1, r5
 8006072:	d904      	bls.n	800607e <_malloc_r+0x26>
 8006074:	230c      	movs	r3, #12
 8006076:	6033      	str	r3, [r6, #0]
 8006078:	2000      	movs	r0, #0
 800607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006154 <_malloc_r+0xfc>
 8006082:	f000 f869 	bl	8006158 <__malloc_lock>
 8006086:	f8d8 3000 	ldr.w	r3, [r8]
 800608a:	461c      	mov	r4, r3
 800608c:	bb44      	cbnz	r4, 80060e0 <_malloc_r+0x88>
 800608e:	4629      	mov	r1, r5
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ffbf 	bl	8006014 <sbrk_aligned>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	4604      	mov	r4, r0
 800609a:	d158      	bne.n	800614e <_malloc_r+0xf6>
 800609c:	f8d8 4000 	ldr.w	r4, [r8]
 80060a0:	4627      	mov	r7, r4
 80060a2:	2f00      	cmp	r7, #0
 80060a4:	d143      	bne.n	800612e <_malloc_r+0xd6>
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	d04b      	beq.n	8006142 <_malloc_r+0xea>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	4639      	mov	r1, r7
 80060ae:	4630      	mov	r0, r6
 80060b0:	eb04 0903 	add.w	r9, r4, r3
 80060b4:	f000 fe48 	bl	8006d48 <_sbrk_r>
 80060b8:	4581      	cmp	r9, r0
 80060ba:	d142      	bne.n	8006142 <_malloc_r+0xea>
 80060bc:	6821      	ldr	r1, [r4, #0]
 80060be:	1a6d      	subs	r5, r5, r1
 80060c0:	4629      	mov	r1, r5
 80060c2:	4630      	mov	r0, r6
 80060c4:	f7ff ffa6 	bl	8006014 <sbrk_aligned>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d03a      	beq.n	8006142 <_malloc_r+0xea>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	442b      	add	r3, r5
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	f8d8 3000 	ldr.w	r3, [r8]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	bb62      	cbnz	r2, 8006134 <_malloc_r+0xdc>
 80060da:	f8c8 7000 	str.w	r7, [r8]
 80060de:	e00f      	b.n	8006100 <_malloc_r+0xa8>
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	1b52      	subs	r2, r2, r5
 80060e4:	d420      	bmi.n	8006128 <_malloc_r+0xd0>
 80060e6:	2a0b      	cmp	r2, #11
 80060e8:	d917      	bls.n	800611a <_malloc_r+0xc2>
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	6025      	str	r5, [r4, #0]
 80060f0:	bf18      	it	ne
 80060f2:	6059      	strne	r1, [r3, #4]
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	bf08      	it	eq
 80060f8:	f8c8 1000 	streq.w	r1, [r8]
 80060fc:	5162      	str	r2, [r4, r5]
 80060fe:	604b      	str	r3, [r1, #4]
 8006100:	4630      	mov	r0, r6
 8006102:	f000 f82f 	bl	8006164 <__malloc_unlock>
 8006106:	f104 000b 	add.w	r0, r4, #11
 800610a:	1d23      	adds	r3, r4, #4
 800610c:	f020 0007 	bic.w	r0, r0, #7
 8006110:	1ac2      	subs	r2, r0, r3
 8006112:	bf1c      	itt	ne
 8006114:	1a1b      	subne	r3, r3, r0
 8006116:	50a3      	strne	r3, [r4, r2]
 8006118:	e7af      	b.n	800607a <_malloc_r+0x22>
 800611a:	6862      	ldr	r2, [r4, #4]
 800611c:	42a3      	cmp	r3, r4
 800611e:	bf0c      	ite	eq
 8006120:	f8c8 2000 	streq.w	r2, [r8]
 8006124:	605a      	strne	r2, [r3, #4]
 8006126:	e7eb      	b.n	8006100 <_malloc_r+0xa8>
 8006128:	4623      	mov	r3, r4
 800612a:	6864      	ldr	r4, [r4, #4]
 800612c:	e7ae      	b.n	800608c <_malloc_r+0x34>
 800612e:	463c      	mov	r4, r7
 8006130:	687f      	ldr	r7, [r7, #4]
 8006132:	e7b6      	b.n	80060a2 <_malloc_r+0x4a>
 8006134:	461a      	mov	r2, r3
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	42a3      	cmp	r3, r4
 800613a:	d1fb      	bne.n	8006134 <_malloc_r+0xdc>
 800613c:	2300      	movs	r3, #0
 800613e:	6053      	str	r3, [r2, #4]
 8006140:	e7de      	b.n	8006100 <_malloc_r+0xa8>
 8006142:	230c      	movs	r3, #12
 8006144:	6033      	str	r3, [r6, #0]
 8006146:	4630      	mov	r0, r6
 8006148:	f000 f80c 	bl	8006164 <__malloc_unlock>
 800614c:	e794      	b.n	8006078 <_malloc_r+0x20>
 800614e:	6005      	str	r5, [r0, #0]
 8006150:	e7d6      	b.n	8006100 <_malloc_r+0xa8>
 8006152:	bf00      	nop
 8006154:	20000398 	.word	0x20000398

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	@ (8006160 <__malloc_lock+0x8>)
 800615a:	f7ff b8b4 	b.w	80052c6 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20000390 	.word	0x20000390

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__malloc_unlock+0x8>)
 8006166:	f7ff b8af 	b.w	80052c8 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20000390 	.word	0x20000390

08006170 <_Balloc>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	69c6      	ldr	r6, [r0, #28]
 8006174:	4604      	mov	r4, r0
 8006176:	460d      	mov	r5, r1
 8006178:	b976      	cbnz	r6, 8006198 <_Balloc+0x28>
 800617a:	2010      	movs	r0, #16
 800617c:	f7ff ff42 	bl	8006004 <malloc>
 8006180:	4602      	mov	r2, r0
 8006182:	61e0      	str	r0, [r4, #28]
 8006184:	b920      	cbnz	r0, 8006190 <_Balloc+0x20>
 8006186:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <_Balloc+0x78>)
 8006188:	4818      	ldr	r0, [pc, #96]	@ (80061ec <_Balloc+0x7c>)
 800618a:	216b      	movs	r1, #107	@ 0x6b
 800618c:	f000 fdfa 	bl	8006d84 <__assert_func>
 8006190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006194:	6006      	str	r6, [r0, #0]
 8006196:	60c6      	str	r6, [r0, #12]
 8006198:	69e6      	ldr	r6, [r4, #28]
 800619a:	68f3      	ldr	r3, [r6, #12]
 800619c:	b183      	cbz	r3, 80061c0 <_Balloc+0x50>
 800619e:	69e3      	ldr	r3, [r4, #28]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061a6:	b9b8      	cbnz	r0, 80061d8 <_Balloc+0x68>
 80061a8:	2101      	movs	r1, #1
 80061aa:	fa01 f605 	lsl.w	r6, r1, r5
 80061ae:	1d72      	adds	r2, r6, #5
 80061b0:	0092      	lsls	r2, r2, #2
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fe04 	bl	8006dc0 <_calloc_r>
 80061b8:	b160      	cbz	r0, 80061d4 <_Balloc+0x64>
 80061ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061be:	e00e      	b.n	80061de <_Balloc+0x6e>
 80061c0:	2221      	movs	r2, #33	@ 0x21
 80061c2:	2104      	movs	r1, #4
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fdfb 	bl	8006dc0 <_calloc_r>
 80061ca:	69e3      	ldr	r3, [r4, #28]
 80061cc:	60f0      	str	r0, [r6, #12]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e4      	bne.n	800619e <_Balloc+0x2e>
 80061d4:	2000      	movs	r0, #0
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	6802      	ldr	r2, [r0, #0]
 80061da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061de:	2300      	movs	r3, #0
 80061e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061e4:	e7f7      	b.n	80061d6 <_Balloc+0x66>
 80061e6:	bf00      	nop
 80061e8:	08007075 	.word	0x08007075
 80061ec:	080070f5 	.word	0x080070f5

080061f0 <_Bfree>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	69c6      	ldr	r6, [r0, #28]
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b976      	cbnz	r6, 8006218 <_Bfree+0x28>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ff02 	bl	8006004 <malloc>
 8006200:	4602      	mov	r2, r0
 8006202:	61e8      	str	r0, [r5, #28]
 8006204:	b920      	cbnz	r0, 8006210 <_Bfree+0x20>
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <_Bfree+0x3c>)
 8006208:	4809      	ldr	r0, [pc, #36]	@ (8006230 <_Bfree+0x40>)
 800620a:	218f      	movs	r1, #143	@ 0x8f
 800620c:	f000 fdba 	bl	8006d84 <__assert_func>
 8006210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006214:	6006      	str	r6, [r0, #0]
 8006216:	60c6      	str	r6, [r0, #12]
 8006218:	b13c      	cbz	r4, 800622a <_Bfree+0x3a>
 800621a:	69eb      	ldr	r3, [r5, #28]
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006224:	6021      	str	r1, [r4, #0]
 8006226:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	08007075 	.word	0x08007075
 8006230:	080070f5 	.word	0x080070f5

08006234 <__multadd>:
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	690d      	ldr	r5, [r1, #16]
 800623a:	4607      	mov	r7, r0
 800623c:	460c      	mov	r4, r1
 800623e:	461e      	mov	r6, r3
 8006240:	f101 0c14 	add.w	ip, r1, #20
 8006244:	2000      	movs	r0, #0
 8006246:	f8dc 3000 	ldr.w	r3, [ip]
 800624a:	b299      	uxth	r1, r3
 800624c:	fb02 6101 	mla	r1, r2, r1, r6
 8006250:	0c1e      	lsrs	r6, r3, #16
 8006252:	0c0b      	lsrs	r3, r1, #16
 8006254:	fb02 3306 	mla	r3, r2, r6, r3
 8006258:	b289      	uxth	r1, r1
 800625a:	3001      	adds	r0, #1
 800625c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006260:	4285      	cmp	r5, r0
 8006262:	f84c 1b04 	str.w	r1, [ip], #4
 8006266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800626a:	dcec      	bgt.n	8006246 <__multadd+0x12>
 800626c:	b30e      	cbz	r6, 80062b2 <__multadd+0x7e>
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	42ab      	cmp	r3, r5
 8006272:	dc19      	bgt.n	80062a8 <__multadd+0x74>
 8006274:	6861      	ldr	r1, [r4, #4]
 8006276:	4638      	mov	r0, r7
 8006278:	3101      	adds	r1, #1
 800627a:	f7ff ff79 	bl	8006170 <_Balloc>
 800627e:	4680      	mov	r8, r0
 8006280:	b928      	cbnz	r0, 800628e <__multadd+0x5a>
 8006282:	4602      	mov	r2, r0
 8006284:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <__multadd+0x84>)
 8006286:	480d      	ldr	r0, [pc, #52]	@ (80062bc <__multadd+0x88>)
 8006288:	21ba      	movs	r1, #186	@ 0xba
 800628a:	f000 fd7b 	bl	8006d84 <__assert_func>
 800628e:	6922      	ldr	r2, [r4, #16]
 8006290:	3202      	adds	r2, #2
 8006292:	f104 010c 	add.w	r1, r4, #12
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	300c      	adds	r0, #12
 800629a:	f000 fd65 	bl	8006d68 <memcpy>
 800629e:	4621      	mov	r1, r4
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa5 	bl	80061f0 <_Bfree>
 80062a6:	4644      	mov	r4, r8
 80062a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062ac:	3501      	adds	r5, #1
 80062ae:	615e      	str	r6, [r3, #20]
 80062b0:	6125      	str	r5, [r4, #16]
 80062b2:	4620      	mov	r0, r4
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	080070e4 	.word	0x080070e4
 80062bc:	080070f5 	.word	0x080070f5

080062c0 <__hi0bits>:
 80062c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062c4:	4603      	mov	r3, r0
 80062c6:	bf36      	itet	cc
 80062c8:	0403      	lslcc	r3, r0, #16
 80062ca:	2000      	movcs	r0, #0
 80062cc:	2010      	movcc	r0, #16
 80062ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d2:	bf3c      	itt	cc
 80062d4:	021b      	lslcc	r3, r3, #8
 80062d6:	3008      	addcc	r0, #8
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062dc:	bf3c      	itt	cc
 80062de:	011b      	lslcc	r3, r3, #4
 80062e0:	3004      	addcc	r0, #4
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	bf3c      	itt	cc
 80062e8:	009b      	lslcc	r3, r3, #2
 80062ea:	3002      	addcc	r0, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	db05      	blt.n	80062fc <__hi0bits+0x3c>
 80062f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062f4:	f100 0001 	add.w	r0, r0, #1
 80062f8:	bf08      	it	eq
 80062fa:	2020      	moveq	r0, #32
 80062fc:	4770      	bx	lr

080062fe <__lo0bits>:
 80062fe:	6803      	ldr	r3, [r0, #0]
 8006300:	4602      	mov	r2, r0
 8006302:	f013 0007 	ands.w	r0, r3, #7
 8006306:	d00b      	beq.n	8006320 <__lo0bits+0x22>
 8006308:	07d9      	lsls	r1, r3, #31
 800630a:	d421      	bmi.n	8006350 <__lo0bits+0x52>
 800630c:	0798      	lsls	r0, r3, #30
 800630e:	bf49      	itett	mi
 8006310:	085b      	lsrmi	r3, r3, #1
 8006312:	089b      	lsrpl	r3, r3, #2
 8006314:	2001      	movmi	r0, #1
 8006316:	6013      	strmi	r3, [r2, #0]
 8006318:	bf5c      	itt	pl
 800631a:	6013      	strpl	r3, [r2, #0]
 800631c:	2002      	movpl	r0, #2
 800631e:	4770      	bx	lr
 8006320:	b299      	uxth	r1, r3
 8006322:	b909      	cbnz	r1, 8006328 <__lo0bits+0x2a>
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	2010      	movs	r0, #16
 8006328:	b2d9      	uxtb	r1, r3
 800632a:	b909      	cbnz	r1, 8006330 <__lo0bits+0x32>
 800632c:	3008      	adds	r0, #8
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	0719      	lsls	r1, r3, #28
 8006332:	bf04      	itt	eq
 8006334:	091b      	lsreq	r3, r3, #4
 8006336:	3004      	addeq	r0, #4
 8006338:	0799      	lsls	r1, r3, #30
 800633a:	bf04      	itt	eq
 800633c:	089b      	lsreq	r3, r3, #2
 800633e:	3002      	addeq	r0, #2
 8006340:	07d9      	lsls	r1, r3, #31
 8006342:	d403      	bmi.n	800634c <__lo0bits+0x4e>
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	f100 0001 	add.w	r0, r0, #1
 800634a:	d003      	beq.n	8006354 <__lo0bits+0x56>
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4770      	bx	lr
 8006350:	2000      	movs	r0, #0
 8006352:	4770      	bx	lr
 8006354:	2020      	movs	r0, #32
 8006356:	4770      	bx	lr

08006358 <__i2b>:
 8006358:	b510      	push	{r4, lr}
 800635a:	460c      	mov	r4, r1
 800635c:	2101      	movs	r1, #1
 800635e:	f7ff ff07 	bl	8006170 <_Balloc>
 8006362:	4602      	mov	r2, r0
 8006364:	b928      	cbnz	r0, 8006372 <__i2b+0x1a>
 8006366:	4b05      	ldr	r3, [pc, #20]	@ (800637c <__i2b+0x24>)
 8006368:	4805      	ldr	r0, [pc, #20]	@ (8006380 <__i2b+0x28>)
 800636a:	f240 1145 	movw	r1, #325	@ 0x145
 800636e:	f000 fd09 	bl	8006d84 <__assert_func>
 8006372:	2301      	movs	r3, #1
 8006374:	6144      	str	r4, [r0, #20]
 8006376:	6103      	str	r3, [r0, #16]
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	080070e4 	.word	0x080070e4
 8006380:	080070f5 	.word	0x080070f5

08006384 <__multiply>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	4614      	mov	r4, r2
 800638a:	690a      	ldr	r2, [r1, #16]
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	bfa8      	it	ge
 8006392:	4623      	movge	r3, r4
 8006394:	460f      	mov	r7, r1
 8006396:	bfa4      	itt	ge
 8006398:	460c      	movge	r4, r1
 800639a:	461f      	movge	r7, r3
 800639c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80063a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80063a4:	68a3      	ldr	r3, [r4, #8]
 80063a6:	6861      	ldr	r1, [r4, #4]
 80063a8:	eb0a 0609 	add.w	r6, sl, r9
 80063ac:	42b3      	cmp	r3, r6
 80063ae:	b085      	sub	sp, #20
 80063b0:	bfb8      	it	lt
 80063b2:	3101      	addlt	r1, #1
 80063b4:	f7ff fedc 	bl	8006170 <_Balloc>
 80063b8:	b930      	cbnz	r0, 80063c8 <__multiply+0x44>
 80063ba:	4602      	mov	r2, r0
 80063bc:	4b44      	ldr	r3, [pc, #272]	@ (80064d0 <__multiply+0x14c>)
 80063be:	4845      	ldr	r0, [pc, #276]	@ (80064d4 <__multiply+0x150>)
 80063c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063c4:	f000 fcde 	bl	8006d84 <__assert_func>
 80063c8:	f100 0514 	add.w	r5, r0, #20
 80063cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063d0:	462b      	mov	r3, r5
 80063d2:	2200      	movs	r2, #0
 80063d4:	4543      	cmp	r3, r8
 80063d6:	d321      	bcc.n	800641c <__multiply+0x98>
 80063d8:	f107 0114 	add.w	r1, r7, #20
 80063dc:	f104 0214 	add.w	r2, r4, #20
 80063e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80063e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80063e8:	9302      	str	r3, [sp, #8]
 80063ea:	1b13      	subs	r3, r2, r4
 80063ec:	3b15      	subs	r3, #21
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	3304      	adds	r3, #4
 80063f4:	f104 0715 	add.w	r7, r4, #21
 80063f8:	42ba      	cmp	r2, r7
 80063fa:	bf38      	it	cc
 80063fc:	2304      	movcc	r3, #4
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	9b02      	ldr	r3, [sp, #8]
 8006402:	9103      	str	r1, [sp, #12]
 8006404:	428b      	cmp	r3, r1
 8006406:	d80c      	bhi.n	8006422 <__multiply+0x9e>
 8006408:	2e00      	cmp	r6, #0
 800640a:	dd03      	ble.n	8006414 <__multiply+0x90>
 800640c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006410:	2b00      	cmp	r3, #0
 8006412:	d05a      	beq.n	80064ca <__multiply+0x146>
 8006414:	6106      	str	r6, [r0, #16]
 8006416:	b005      	add	sp, #20
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	f843 2b04 	str.w	r2, [r3], #4
 8006420:	e7d8      	b.n	80063d4 <__multiply+0x50>
 8006422:	f8b1 a000 	ldrh.w	sl, [r1]
 8006426:	f1ba 0f00 	cmp.w	sl, #0
 800642a:	d023      	beq.n	8006474 <__multiply+0xf0>
 800642c:	f104 0e14 	add.w	lr, r4, #20
 8006430:	46a9      	mov	r9, r5
 8006432:	f04f 0c00 	mov.w	ip, #0
 8006436:	f85e 7b04 	ldr.w	r7, [lr], #4
 800643a:	f8d9 3000 	ldr.w	r3, [r9]
 800643e:	fa1f fb87 	uxth.w	fp, r7
 8006442:	b29b      	uxth	r3, r3
 8006444:	fb0a 330b 	mla	r3, sl, fp, r3
 8006448:	4463      	add	r3, ip
 800644a:	f8d9 c000 	ldr.w	ip, [r9]
 800644e:	0c3f      	lsrs	r7, r7, #16
 8006450:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006454:	fb0a c707 	mla	r7, sl, r7, ip
 8006458:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800645c:	b29b      	uxth	r3, r3
 800645e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006462:	4572      	cmp	r2, lr
 8006464:	f849 3b04 	str.w	r3, [r9], #4
 8006468:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800646c:	d8e3      	bhi.n	8006436 <__multiply+0xb2>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	f845 c003 	str.w	ip, [r5, r3]
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800647a:	3104      	adds	r1, #4
 800647c:	f1b9 0f00 	cmp.w	r9, #0
 8006480:	d021      	beq.n	80064c6 <__multiply+0x142>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	f104 0c14 	add.w	ip, r4, #20
 8006488:	46ae      	mov	lr, r5
 800648a:	f04f 0a00 	mov.w	sl, #0
 800648e:	f8bc b000 	ldrh.w	fp, [ip]
 8006492:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006496:	fb09 770b 	mla	r7, r9, fp, r7
 800649a:	4457      	add	r7, sl
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064a2:	f84e 3b04 	str.w	r3, [lr], #4
 80064a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064ae:	f8be 3000 	ldrh.w	r3, [lr]
 80064b2:	fb09 330a 	mla	r3, r9, sl, r3
 80064b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80064ba:	4562      	cmp	r2, ip
 80064bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064c0:	d8e5      	bhi.n	800648e <__multiply+0x10a>
 80064c2:	9f01      	ldr	r7, [sp, #4]
 80064c4:	51eb      	str	r3, [r5, r7]
 80064c6:	3504      	adds	r5, #4
 80064c8:	e79a      	b.n	8006400 <__multiply+0x7c>
 80064ca:	3e01      	subs	r6, #1
 80064cc:	e79c      	b.n	8006408 <__multiply+0x84>
 80064ce:	bf00      	nop
 80064d0:	080070e4 	.word	0x080070e4
 80064d4:	080070f5 	.word	0x080070f5

080064d8 <__pow5mult>:
 80064d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064dc:	4615      	mov	r5, r2
 80064de:	f012 0203 	ands.w	r2, r2, #3
 80064e2:	4607      	mov	r7, r0
 80064e4:	460e      	mov	r6, r1
 80064e6:	d007      	beq.n	80064f8 <__pow5mult+0x20>
 80064e8:	4c25      	ldr	r4, [pc, #148]	@ (8006580 <__pow5mult+0xa8>)
 80064ea:	3a01      	subs	r2, #1
 80064ec:	2300      	movs	r3, #0
 80064ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064f2:	f7ff fe9f 	bl	8006234 <__multadd>
 80064f6:	4606      	mov	r6, r0
 80064f8:	10ad      	asrs	r5, r5, #2
 80064fa:	d03d      	beq.n	8006578 <__pow5mult+0xa0>
 80064fc:	69fc      	ldr	r4, [r7, #28]
 80064fe:	b97c      	cbnz	r4, 8006520 <__pow5mult+0x48>
 8006500:	2010      	movs	r0, #16
 8006502:	f7ff fd7f 	bl	8006004 <malloc>
 8006506:	4602      	mov	r2, r0
 8006508:	61f8      	str	r0, [r7, #28]
 800650a:	b928      	cbnz	r0, 8006518 <__pow5mult+0x40>
 800650c:	4b1d      	ldr	r3, [pc, #116]	@ (8006584 <__pow5mult+0xac>)
 800650e:	481e      	ldr	r0, [pc, #120]	@ (8006588 <__pow5mult+0xb0>)
 8006510:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006514:	f000 fc36 	bl	8006d84 <__assert_func>
 8006518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800651c:	6004      	str	r4, [r0, #0]
 800651e:	60c4      	str	r4, [r0, #12]
 8006520:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006528:	b94c      	cbnz	r4, 800653e <__pow5mult+0x66>
 800652a:	f240 2171 	movw	r1, #625	@ 0x271
 800652e:	4638      	mov	r0, r7
 8006530:	f7ff ff12 	bl	8006358 <__i2b>
 8006534:	2300      	movs	r3, #0
 8006536:	f8c8 0008 	str.w	r0, [r8, #8]
 800653a:	4604      	mov	r4, r0
 800653c:	6003      	str	r3, [r0, #0]
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	07eb      	lsls	r3, r5, #31
 8006544:	d50a      	bpl.n	800655c <__pow5mult+0x84>
 8006546:	4631      	mov	r1, r6
 8006548:	4622      	mov	r2, r4
 800654a:	4638      	mov	r0, r7
 800654c:	f7ff ff1a 	bl	8006384 <__multiply>
 8006550:	4631      	mov	r1, r6
 8006552:	4680      	mov	r8, r0
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff fe4b 	bl	80061f0 <_Bfree>
 800655a:	4646      	mov	r6, r8
 800655c:	106d      	asrs	r5, r5, #1
 800655e:	d00b      	beq.n	8006578 <__pow5mult+0xa0>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	b938      	cbnz	r0, 8006574 <__pow5mult+0x9c>
 8006564:	4622      	mov	r2, r4
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ff0b 	bl	8006384 <__multiply>
 800656e:	6020      	str	r0, [r4, #0]
 8006570:	f8c0 9000 	str.w	r9, [r0]
 8006574:	4604      	mov	r4, r0
 8006576:	e7e4      	b.n	8006542 <__pow5mult+0x6a>
 8006578:	4630      	mov	r0, r6
 800657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657e:	bf00      	nop
 8006580:	08007150 	.word	0x08007150
 8006584:	08007075 	.word	0x08007075
 8006588:	080070f5 	.word	0x080070f5

0800658c <__lshift>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	460c      	mov	r4, r1
 8006592:	6849      	ldr	r1, [r1, #4]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	4607      	mov	r7, r0
 800659e:	4691      	mov	r9, r2
 80065a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065a4:	f108 0601 	add.w	r6, r8, #1
 80065a8:	42b3      	cmp	r3, r6
 80065aa:	db0b      	blt.n	80065c4 <__lshift+0x38>
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7ff fddf 	bl	8006170 <_Balloc>
 80065b2:	4605      	mov	r5, r0
 80065b4:	b948      	cbnz	r0, 80065ca <__lshift+0x3e>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b28      	ldr	r3, [pc, #160]	@ (800665c <__lshift+0xd0>)
 80065ba:	4829      	ldr	r0, [pc, #164]	@ (8006660 <__lshift+0xd4>)
 80065bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065c0:	f000 fbe0 	bl	8006d84 <__assert_func>
 80065c4:	3101      	adds	r1, #1
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	e7ee      	b.n	80065a8 <__lshift+0x1c>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f100 0114 	add.w	r1, r0, #20
 80065d0:	f100 0210 	add.w	r2, r0, #16
 80065d4:	4618      	mov	r0, r3
 80065d6:	4553      	cmp	r3, sl
 80065d8:	db33      	blt.n	8006642 <__lshift+0xb6>
 80065da:	6920      	ldr	r0, [r4, #16]
 80065dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065e0:	f104 0314 	add.w	r3, r4, #20
 80065e4:	f019 091f 	ands.w	r9, r9, #31
 80065e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065f0:	d02b      	beq.n	800664a <__lshift+0xbe>
 80065f2:	f1c9 0e20 	rsb	lr, r9, #32
 80065f6:	468a      	mov	sl, r1
 80065f8:	2200      	movs	r2, #0
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006600:	4310      	orrs	r0, r2
 8006602:	f84a 0b04 	str.w	r0, [sl], #4
 8006606:	f853 2b04 	ldr.w	r2, [r3], #4
 800660a:	459c      	cmp	ip, r3
 800660c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006610:	d8f3      	bhi.n	80065fa <__lshift+0x6e>
 8006612:	ebac 0304 	sub.w	r3, ip, r4
 8006616:	3b15      	subs	r3, #21
 8006618:	f023 0303 	bic.w	r3, r3, #3
 800661c:	3304      	adds	r3, #4
 800661e:	f104 0015 	add.w	r0, r4, #21
 8006622:	4584      	cmp	ip, r0
 8006624:	bf38      	it	cc
 8006626:	2304      	movcc	r3, #4
 8006628:	50ca      	str	r2, [r1, r3]
 800662a:	b10a      	cbz	r2, 8006630 <__lshift+0xa4>
 800662c:	f108 0602 	add.w	r6, r8, #2
 8006630:	3e01      	subs	r6, #1
 8006632:	4638      	mov	r0, r7
 8006634:	612e      	str	r6, [r5, #16]
 8006636:	4621      	mov	r1, r4
 8006638:	f7ff fdda 	bl	80061f0 <_Bfree>
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006642:	f842 0f04 	str.w	r0, [r2, #4]!
 8006646:	3301      	adds	r3, #1
 8006648:	e7c5      	b.n	80065d6 <__lshift+0x4a>
 800664a:	3904      	subs	r1, #4
 800664c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006650:	f841 2f04 	str.w	r2, [r1, #4]!
 8006654:	459c      	cmp	ip, r3
 8006656:	d8f9      	bhi.n	800664c <__lshift+0xc0>
 8006658:	e7ea      	b.n	8006630 <__lshift+0xa4>
 800665a:	bf00      	nop
 800665c:	080070e4 	.word	0x080070e4
 8006660:	080070f5 	.word	0x080070f5

08006664 <__mcmp>:
 8006664:	690a      	ldr	r2, [r1, #16]
 8006666:	4603      	mov	r3, r0
 8006668:	6900      	ldr	r0, [r0, #16]
 800666a:	1a80      	subs	r0, r0, r2
 800666c:	b530      	push	{r4, r5, lr}
 800666e:	d10e      	bne.n	800668e <__mcmp+0x2a>
 8006670:	3314      	adds	r3, #20
 8006672:	3114      	adds	r1, #20
 8006674:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006678:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800667c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006684:	4295      	cmp	r5, r2
 8006686:	d003      	beq.n	8006690 <__mcmp+0x2c>
 8006688:	d205      	bcs.n	8006696 <__mcmp+0x32>
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	bd30      	pop	{r4, r5, pc}
 8006690:	42a3      	cmp	r3, r4
 8006692:	d3f3      	bcc.n	800667c <__mcmp+0x18>
 8006694:	e7fb      	b.n	800668e <__mcmp+0x2a>
 8006696:	2001      	movs	r0, #1
 8006698:	e7f9      	b.n	800668e <__mcmp+0x2a>
	...

0800669c <__mdiff>:
 800669c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	4689      	mov	r9, r1
 80066a2:	4606      	mov	r6, r0
 80066a4:	4611      	mov	r1, r2
 80066a6:	4648      	mov	r0, r9
 80066a8:	4614      	mov	r4, r2
 80066aa:	f7ff ffdb 	bl	8006664 <__mcmp>
 80066ae:	1e05      	subs	r5, r0, #0
 80066b0:	d112      	bne.n	80066d8 <__mdiff+0x3c>
 80066b2:	4629      	mov	r1, r5
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff fd5b 	bl	8006170 <_Balloc>
 80066ba:	4602      	mov	r2, r0
 80066bc:	b928      	cbnz	r0, 80066ca <__mdiff+0x2e>
 80066be:	4b3e      	ldr	r3, [pc, #248]	@ (80067b8 <__mdiff+0x11c>)
 80066c0:	f240 2137 	movw	r1, #567	@ 0x237
 80066c4:	483d      	ldr	r0, [pc, #244]	@ (80067bc <__mdiff+0x120>)
 80066c6:	f000 fb5d 	bl	8006d84 <__assert_func>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066d0:	4610      	mov	r0, r2
 80066d2:	b003      	add	sp, #12
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d8:	bfbc      	itt	lt
 80066da:	464b      	movlt	r3, r9
 80066dc:	46a1      	movlt	r9, r4
 80066de:	4630      	mov	r0, r6
 80066e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80066e4:	bfba      	itte	lt
 80066e6:	461c      	movlt	r4, r3
 80066e8:	2501      	movlt	r5, #1
 80066ea:	2500      	movge	r5, #0
 80066ec:	f7ff fd40 	bl	8006170 <_Balloc>
 80066f0:	4602      	mov	r2, r0
 80066f2:	b918      	cbnz	r0, 80066fc <__mdiff+0x60>
 80066f4:	4b30      	ldr	r3, [pc, #192]	@ (80067b8 <__mdiff+0x11c>)
 80066f6:	f240 2145 	movw	r1, #581	@ 0x245
 80066fa:	e7e3      	b.n	80066c4 <__mdiff+0x28>
 80066fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006700:	6926      	ldr	r6, [r4, #16]
 8006702:	60c5      	str	r5, [r0, #12]
 8006704:	f109 0310 	add.w	r3, r9, #16
 8006708:	f109 0514 	add.w	r5, r9, #20
 800670c:	f104 0e14 	add.w	lr, r4, #20
 8006710:	f100 0b14 	add.w	fp, r0, #20
 8006714:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006718:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	46d9      	mov	r9, fp
 8006720:	f04f 0c00 	mov.w	ip, #0
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	f85e 0b04 	ldr.w	r0, [lr], #4
 800672a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	b281      	uxth	r1, r0
 8006732:	fa1f f38a 	uxth.w	r3, sl
 8006736:	1a5b      	subs	r3, r3, r1
 8006738:	0c00      	lsrs	r0, r0, #16
 800673a:	4463      	add	r3, ip
 800673c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006740:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006744:	b29b      	uxth	r3, r3
 8006746:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800674a:	4576      	cmp	r6, lr
 800674c:	f849 3b04 	str.w	r3, [r9], #4
 8006750:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006754:	d8e6      	bhi.n	8006724 <__mdiff+0x88>
 8006756:	1b33      	subs	r3, r6, r4
 8006758:	3b15      	subs	r3, #21
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	3415      	adds	r4, #21
 8006760:	3304      	adds	r3, #4
 8006762:	42a6      	cmp	r6, r4
 8006764:	bf38      	it	cc
 8006766:	2304      	movcc	r3, #4
 8006768:	441d      	add	r5, r3
 800676a:	445b      	add	r3, fp
 800676c:	461e      	mov	r6, r3
 800676e:	462c      	mov	r4, r5
 8006770:	4544      	cmp	r4, r8
 8006772:	d30e      	bcc.n	8006792 <__mdiff+0xf6>
 8006774:	f108 0103 	add.w	r1, r8, #3
 8006778:	1b49      	subs	r1, r1, r5
 800677a:	f021 0103 	bic.w	r1, r1, #3
 800677e:	3d03      	subs	r5, #3
 8006780:	45a8      	cmp	r8, r5
 8006782:	bf38      	it	cc
 8006784:	2100      	movcc	r1, #0
 8006786:	440b      	add	r3, r1
 8006788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800678c:	b191      	cbz	r1, 80067b4 <__mdiff+0x118>
 800678e:	6117      	str	r7, [r2, #16]
 8006790:	e79e      	b.n	80066d0 <__mdiff+0x34>
 8006792:	f854 1b04 	ldr.w	r1, [r4], #4
 8006796:	46e6      	mov	lr, ip
 8006798:	0c08      	lsrs	r0, r1, #16
 800679a:	fa1c fc81 	uxtah	ip, ip, r1
 800679e:	4471      	add	r1, lr
 80067a0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80067a4:	b289      	uxth	r1, r1
 80067a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067aa:	f846 1b04 	str.w	r1, [r6], #4
 80067ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067b2:	e7dd      	b.n	8006770 <__mdiff+0xd4>
 80067b4:	3f01      	subs	r7, #1
 80067b6:	e7e7      	b.n	8006788 <__mdiff+0xec>
 80067b8:	080070e4 	.word	0x080070e4
 80067bc:	080070f5 	.word	0x080070f5

080067c0 <__d2b>:
 80067c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80067c4:	2101      	movs	r1, #1
 80067c6:	9e08      	ldr	r6, [sp, #32]
 80067c8:	4690      	mov	r8, r2
 80067ca:	4699      	mov	r9, r3
 80067cc:	f7ff fcd0 	bl	8006170 <_Balloc>
 80067d0:	4604      	mov	r4, r0
 80067d2:	b930      	cbnz	r0, 80067e2 <__d2b+0x22>
 80067d4:	4602      	mov	r2, r0
 80067d6:	4b24      	ldr	r3, [pc, #144]	@ (8006868 <__d2b+0xa8>)
 80067d8:	4824      	ldr	r0, [pc, #144]	@ (800686c <__d2b+0xac>)
 80067da:	f240 310f 	movw	r1, #783	@ 0x30f
 80067de:	f000 fad1 	bl	8006d84 <__assert_func>
 80067e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067ea:	b10d      	cbz	r5, 80067f0 <__d2b+0x30>
 80067ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	f1b8 0300 	subs.w	r3, r8, #0
 80067f6:	d024      	beq.n	8006842 <__d2b+0x82>
 80067f8:	4668      	mov	r0, sp
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	f7ff fd7f 	bl	80062fe <__lo0bits>
 8006800:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006804:	b1d8      	cbz	r0, 800683e <__d2b+0x7e>
 8006806:	f1c0 0320 	rsb	r3, r0, #32
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	430b      	orrs	r3, r1
 8006810:	40c2      	lsrs	r2, r0
 8006812:	6163      	str	r3, [r4, #20]
 8006814:	9201      	str	r2, [sp, #4]
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	61a3      	str	r3, [r4, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bf0c      	ite	eq
 800681e:	2201      	moveq	r2, #1
 8006820:	2202      	movne	r2, #2
 8006822:	6122      	str	r2, [r4, #16]
 8006824:	b1ad      	cbz	r5, 8006852 <__d2b+0x92>
 8006826:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800682a:	4405      	add	r5, r0
 800682c:	6035      	str	r5, [r6, #0]
 800682e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006834:	6018      	str	r0, [r3, #0]
 8006836:	4620      	mov	r0, r4
 8006838:	b002      	add	sp, #8
 800683a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800683e:	6161      	str	r1, [r4, #20]
 8006840:	e7e9      	b.n	8006816 <__d2b+0x56>
 8006842:	a801      	add	r0, sp, #4
 8006844:	f7ff fd5b 	bl	80062fe <__lo0bits>
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	6163      	str	r3, [r4, #20]
 800684c:	3020      	adds	r0, #32
 800684e:	2201      	movs	r2, #1
 8006850:	e7e7      	b.n	8006822 <__d2b+0x62>
 8006852:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006856:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800685a:	6030      	str	r0, [r6, #0]
 800685c:	6918      	ldr	r0, [r3, #16]
 800685e:	f7ff fd2f 	bl	80062c0 <__hi0bits>
 8006862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006866:	e7e4      	b.n	8006832 <__d2b+0x72>
 8006868:	080070e4 	.word	0x080070e4
 800686c:	080070f5 	.word	0x080070f5

08006870 <__sfputc_r>:
 8006870:	6893      	ldr	r3, [r2, #8]
 8006872:	3b01      	subs	r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	b410      	push	{r4}
 8006878:	6093      	str	r3, [r2, #8]
 800687a:	da07      	bge.n	800688c <__sfputc_r+0x1c>
 800687c:	6994      	ldr	r4, [r2, #24]
 800687e:	42a3      	cmp	r3, r4
 8006880:	db01      	blt.n	8006886 <__sfputc_r+0x16>
 8006882:	290a      	cmp	r1, #10
 8006884:	d102      	bne.n	800688c <__sfputc_r+0x1c>
 8006886:	bc10      	pop	{r4}
 8006888:	f7fe bc0b 	b.w	80050a2 <__swbuf_r>
 800688c:	6813      	ldr	r3, [r2, #0]
 800688e:	1c58      	adds	r0, r3, #1
 8006890:	6010      	str	r0, [r2, #0]
 8006892:	7019      	strb	r1, [r3, #0]
 8006894:	4608      	mov	r0, r1
 8006896:	bc10      	pop	{r4}
 8006898:	4770      	bx	lr

0800689a <__sfputs_r>:
 800689a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	4614      	mov	r4, r2
 80068a2:	18d5      	adds	r5, r2, r3
 80068a4:	42ac      	cmp	r4, r5
 80068a6:	d101      	bne.n	80068ac <__sfputs_r+0x12>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e007      	b.n	80068bc <__sfputs_r+0x22>
 80068ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b0:	463a      	mov	r2, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ffdc 	bl	8006870 <__sfputc_r>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d1f3      	bne.n	80068a4 <__sfputs_r+0xa>
 80068bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068c0 <_vfiprintf_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	460d      	mov	r5, r1
 80068c6:	b09d      	sub	sp, #116	@ 0x74
 80068c8:	4614      	mov	r4, r2
 80068ca:	4698      	mov	r8, r3
 80068cc:	4606      	mov	r6, r0
 80068ce:	b118      	cbz	r0, 80068d8 <_vfiprintf_r+0x18>
 80068d0:	6a03      	ldr	r3, [r0, #32]
 80068d2:	b90b      	cbnz	r3, 80068d8 <_vfiprintf_r+0x18>
 80068d4:	f7fe fafc 	bl	8004ed0 <__sinit>
 80068d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d405      	bmi.n	80068ea <_vfiprintf_r+0x2a>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	059a      	lsls	r2, r3, #22
 80068e2:	d402      	bmi.n	80068ea <_vfiprintf_r+0x2a>
 80068e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068e6:	f7fe fcee 	bl	80052c6 <__retarget_lock_acquire_recursive>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	071b      	lsls	r3, r3, #28
 80068ee:	d501      	bpl.n	80068f4 <_vfiprintf_r+0x34>
 80068f0:	692b      	ldr	r3, [r5, #16]
 80068f2:	b99b      	cbnz	r3, 800691c <_vfiprintf_r+0x5c>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7fe fc12 	bl	8005120 <__swsetup_r>
 80068fc:	b170      	cbz	r0, 800691c <_vfiprintf_r+0x5c>
 80068fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006900:	07dc      	lsls	r4, r3, #31
 8006902:	d504      	bpl.n	800690e <_vfiprintf_r+0x4e>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	b01d      	add	sp, #116	@ 0x74
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	89ab      	ldrh	r3, [r5, #12]
 8006910:	0598      	lsls	r0, r3, #22
 8006912:	d4f7      	bmi.n	8006904 <_vfiprintf_r+0x44>
 8006914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006916:	f7fe fcd7 	bl	80052c8 <__retarget_lock_release_recursive>
 800691a:	e7f3      	b.n	8006904 <_vfiprintf_r+0x44>
 800691c:	2300      	movs	r3, #0
 800691e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006920:	2320      	movs	r3, #32
 8006922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006926:	f8cd 800c 	str.w	r8, [sp, #12]
 800692a:	2330      	movs	r3, #48	@ 0x30
 800692c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006adc <_vfiprintf_r+0x21c>
 8006930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006934:	f04f 0901 	mov.w	r9, #1
 8006938:	4623      	mov	r3, r4
 800693a:	469a      	mov	sl, r3
 800693c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006940:	b10a      	cbz	r2, 8006946 <_vfiprintf_r+0x86>
 8006942:	2a25      	cmp	r2, #37	@ 0x25
 8006944:	d1f9      	bne.n	800693a <_vfiprintf_r+0x7a>
 8006946:	ebba 0b04 	subs.w	fp, sl, r4
 800694a:	d00b      	beq.n	8006964 <_vfiprintf_r+0xa4>
 800694c:	465b      	mov	r3, fp
 800694e:	4622      	mov	r2, r4
 8006950:	4629      	mov	r1, r5
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffa1 	bl	800689a <__sfputs_r>
 8006958:	3001      	adds	r0, #1
 800695a:	f000 80a7 	beq.w	8006aac <_vfiprintf_r+0x1ec>
 800695e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006960:	445a      	add	r2, fp
 8006962:	9209      	str	r2, [sp, #36]	@ 0x24
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 809f 	beq.w	8006aac <_vfiprintf_r+0x1ec>
 800696e:	2300      	movs	r3, #0
 8006970:	f04f 32ff 	mov.w	r2, #4294967295
 8006974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006978:	f10a 0a01 	add.w	sl, sl, #1
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	9307      	str	r3, [sp, #28]
 8006980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006984:	931a      	str	r3, [sp, #104]	@ 0x68
 8006986:	4654      	mov	r4, sl
 8006988:	2205      	movs	r2, #5
 800698a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698e:	4853      	ldr	r0, [pc, #332]	@ (8006adc <_vfiprintf_r+0x21c>)
 8006990:	f7f9 fc1e 	bl	80001d0 <memchr>
 8006994:	9a04      	ldr	r2, [sp, #16]
 8006996:	b9d8      	cbnz	r0, 80069d0 <_vfiprintf_r+0x110>
 8006998:	06d1      	lsls	r1, r2, #27
 800699a:	bf44      	itt	mi
 800699c:	2320      	movmi	r3, #32
 800699e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069a2:	0713      	lsls	r3, r2, #28
 80069a4:	bf44      	itt	mi
 80069a6:	232b      	movmi	r3, #43	@ 0x2b
 80069a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069ac:	f89a 3000 	ldrb.w	r3, [sl]
 80069b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069b2:	d015      	beq.n	80069e0 <_vfiprintf_r+0x120>
 80069b4:	9a07      	ldr	r2, [sp, #28]
 80069b6:	4654      	mov	r4, sl
 80069b8:	2000      	movs	r0, #0
 80069ba:	f04f 0c0a 	mov.w	ip, #10
 80069be:	4621      	mov	r1, r4
 80069c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c4:	3b30      	subs	r3, #48	@ 0x30
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	d94b      	bls.n	8006a62 <_vfiprintf_r+0x1a2>
 80069ca:	b1b0      	cbz	r0, 80069fa <_vfiprintf_r+0x13a>
 80069cc:	9207      	str	r2, [sp, #28]
 80069ce:	e014      	b.n	80069fa <_vfiprintf_r+0x13a>
 80069d0:	eba0 0308 	sub.w	r3, r0, r8
 80069d4:	fa09 f303 	lsl.w	r3, r9, r3
 80069d8:	4313      	orrs	r3, r2
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	46a2      	mov	sl, r4
 80069de:	e7d2      	b.n	8006986 <_vfiprintf_r+0xc6>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	1d19      	adds	r1, r3, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	9103      	str	r1, [sp, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfbb      	ittet	lt
 80069ec:	425b      	neglt	r3, r3
 80069ee:	f042 0202 	orrlt.w	r2, r2, #2
 80069f2:	9307      	strge	r3, [sp, #28]
 80069f4:	9307      	strlt	r3, [sp, #28]
 80069f6:	bfb8      	it	lt
 80069f8:	9204      	strlt	r2, [sp, #16]
 80069fa:	7823      	ldrb	r3, [r4, #0]
 80069fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80069fe:	d10a      	bne.n	8006a16 <_vfiprintf_r+0x156>
 8006a00:	7863      	ldrb	r3, [r4, #1]
 8006a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a04:	d132      	bne.n	8006a6c <_vfiprintf_r+0x1ac>
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	1d1a      	adds	r2, r3, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	9203      	str	r2, [sp, #12]
 8006a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a12:	3402      	adds	r4, #2
 8006a14:	9305      	str	r3, [sp, #20]
 8006a16:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006ae0 <_vfiprintf_r+0x220>
 8006a1a:	7821      	ldrb	r1, [r4, #0]
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	4650      	mov	r0, sl
 8006a20:	f7f9 fbd6 	bl	80001d0 <memchr>
 8006a24:	b138      	cbz	r0, 8006a36 <_vfiprintf_r+0x176>
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	eba0 000a 	sub.w	r0, r0, sl
 8006a2c:	2240      	movs	r2, #64	@ 0x40
 8006a2e:	4082      	lsls	r2, r0
 8006a30:	4313      	orrs	r3, r2
 8006a32:	3401      	adds	r4, #1
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a3a:	482a      	ldr	r0, [pc, #168]	@ (8006ae4 <_vfiprintf_r+0x224>)
 8006a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a40:	2206      	movs	r2, #6
 8006a42:	f7f9 fbc5 	bl	80001d0 <memchr>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d03f      	beq.n	8006aca <_vfiprintf_r+0x20a>
 8006a4a:	4b27      	ldr	r3, [pc, #156]	@ (8006ae8 <_vfiprintf_r+0x228>)
 8006a4c:	bb1b      	cbnz	r3, 8006a96 <_vfiprintf_r+0x1d6>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	3307      	adds	r3, #7
 8006a52:	f023 0307 	bic.w	r3, r3, #7
 8006a56:	3308      	adds	r3, #8
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5c:	443b      	add	r3, r7
 8006a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a60:	e76a      	b.n	8006938 <_vfiprintf_r+0x78>
 8006a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a66:	460c      	mov	r4, r1
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e7a8      	b.n	80069be <_vfiprintf_r+0xfe>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	3401      	adds	r4, #1
 8006a70:	9305      	str	r3, [sp, #20]
 8006a72:	4619      	mov	r1, r3
 8006a74:	f04f 0c0a 	mov.w	ip, #10
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7e:	3a30      	subs	r2, #48	@ 0x30
 8006a80:	2a09      	cmp	r2, #9
 8006a82:	d903      	bls.n	8006a8c <_vfiprintf_r+0x1cc>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0c6      	beq.n	8006a16 <_vfiprintf_r+0x156>
 8006a88:	9105      	str	r1, [sp, #20]
 8006a8a:	e7c4      	b.n	8006a16 <_vfiprintf_r+0x156>
 8006a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a90:	4604      	mov	r4, r0
 8006a92:	2301      	movs	r3, #1
 8006a94:	e7f0      	b.n	8006a78 <_vfiprintf_r+0x1b8>
 8006a96:	ab03      	add	r3, sp, #12
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	4b13      	ldr	r3, [pc, #76]	@ (8006aec <_vfiprintf_r+0x22c>)
 8006a9e:	a904      	add	r1, sp, #16
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7fd fdcf 	bl	8004644 <_printf_float>
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	1c78      	adds	r0, r7, #1
 8006aaa:	d1d6      	bne.n	8006a5a <_vfiprintf_r+0x19a>
 8006aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aae:	07d9      	lsls	r1, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_vfiprintf_r+0x1fe>
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	059a      	lsls	r2, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_vfiprintf_r+0x1fe>
 8006ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aba:	f7fe fc05 	bl	80052c8 <__retarget_lock_release_recursive>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	065b      	lsls	r3, r3, #25
 8006ac2:	f53f af1f 	bmi.w	8006904 <_vfiprintf_r+0x44>
 8006ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ac8:	e71e      	b.n	8006908 <_vfiprintf_r+0x48>
 8006aca:	ab03      	add	r3, sp, #12
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <_vfiprintf_r+0x22c>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7fe f84f 	bl	8004b78 <_printf_i>
 8006ada:	e7e4      	b.n	8006aa6 <_vfiprintf_r+0x1e6>
 8006adc:	08007250 	.word	0x08007250
 8006ae0:	08007256 	.word	0x08007256
 8006ae4:	0800725a 	.word	0x0800725a
 8006ae8:	08004645 	.word	0x08004645
 8006aec:	0800689b 	.word	0x0800689b

08006af0 <__sflush_r>:
 8006af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	0716      	lsls	r6, r2, #28
 8006af8:	4605      	mov	r5, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	d454      	bmi.n	8006ba8 <__sflush_r+0xb8>
 8006afe:	684b      	ldr	r3, [r1, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc02      	bgt.n	8006b0a <__sflush_r+0x1a>
 8006b04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dd48      	ble.n	8006b9c <__sflush_r+0xac>
 8006b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	d045      	beq.n	8006b9c <__sflush_r+0xac>
 8006b10:	2300      	movs	r3, #0
 8006b12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b16:	682f      	ldr	r7, [r5, #0]
 8006b18:	6a21      	ldr	r1, [r4, #32]
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	d030      	beq.n	8006b80 <__sflush_r+0x90>
 8006b1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	0759      	lsls	r1, r3, #29
 8006b24:	d505      	bpl.n	8006b32 <__sflush_r+0x42>
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b2c:	b10b      	cbz	r3, 8006b32 <__sflush_r+0x42>
 8006b2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	2300      	movs	r3, #0
 8006b34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b36:	6a21      	ldr	r1, [r4, #32]
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b0      	blx	r6
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	d106      	bne.n	8006b50 <__sflush_r+0x60>
 8006b42:	6829      	ldr	r1, [r5, #0]
 8006b44:	291d      	cmp	r1, #29
 8006b46:	d82b      	bhi.n	8006ba0 <__sflush_r+0xb0>
 8006b48:	4a28      	ldr	r2, [pc, #160]	@ (8006bec <__sflush_r+0xfc>)
 8006b4a:	410a      	asrs	r2, r1
 8006b4c:	07d6      	lsls	r6, r2, #31
 8006b4e:	d427      	bmi.n	8006ba0 <__sflush_r+0xb0>
 8006b50:	2200      	movs	r2, #0
 8006b52:	6062      	str	r2, [r4, #4]
 8006b54:	04d9      	lsls	r1, r3, #19
 8006b56:	6922      	ldr	r2, [r4, #16]
 8006b58:	6022      	str	r2, [r4, #0]
 8006b5a:	d504      	bpl.n	8006b66 <__sflush_r+0x76>
 8006b5c:	1c42      	adds	r2, r0, #1
 8006b5e:	d101      	bne.n	8006b64 <__sflush_r+0x74>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b903      	cbnz	r3, 8006b66 <__sflush_r+0x76>
 8006b64:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b68:	602f      	str	r7, [r5, #0]
 8006b6a:	b1b9      	cbz	r1, 8006b9c <__sflush_r+0xac>
 8006b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <__sflush_r+0x8a>
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7ff f9fb 	bl	8005f70 <_free_r>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b7e:	e00d      	b.n	8006b9c <__sflush_r+0xac>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b0      	blx	r6
 8006b86:	4602      	mov	r2, r0
 8006b88:	1c50      	adds	r0, r2, #1
 8006b8a:	d1c9      	bne.n	8006b20 <__sflush_r+0x30>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0c6      	beq.n	8006b20 <__sflush_r+0x30>
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d001      	beq.n	8006b9a <__sflush_r+0xaa>
 8006b96:	2b16      	cmp	r3, #22
 8006b98:	d11d      	bne.n	8006bd6 <__sflush_r+0xe6>
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e021      	b.n	8006be4 <__sflush_r+0xf4>
 8006ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba4:	b21b      	sxth	r3, r3
 8006ba6:	e01a      	b.n	8006bde <__sflush_r+0xee>
 8006ba8:	690f      	ldr	r7, [r1, #16]
 8006baa:	2f00      	cmp	r7, #0
 8006bac:	d0f6      	beq.n	8006b9c <__sflush_r+0xac>
 8006bae:	0793      	lsls	r3, r2, #30
 8006bb0:	680e      	ldr	r6, [r1, #0]
 8006bb2:	bf08      	it	eq
 8006bb4:	694b      	ldreq	r3, [r1, #20]
 8006bb6:	600f      	str	r7, [r1, #0]
 8006bb8:	bf18      	it	ne
 8006bba:	2300      	movne	r3, #0
 8006bbc:	1bf6      	subs	r6, r6, r7
 8006bbe:	608b      	str	r3, [r1, #8]
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	ddeb      	ble.n	8006b9c <__sflush_r+0xac>
 8006bc4:	6a21      	ldr	r1, [r4, #32]
 8006bc6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006bca:	4633      	mov	r3, r6
 8006bcc:	463a      	mov	r2, r7
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47e0      	blx	ip
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	dc07      	bgt.n	8006be6 <__sflush_r+0xf6>
 8006bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be6:	4407      	add	r7, r0
 8006be8:	1a36      	subs	r6, r6, r0
 8006bea:	e7e9      	b.n	8006bc0 <__sflush_r+0xd0>
 8006bec:	dfbffffe 	.word	0xdfbffffe

08006bf0 <_fflush_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	690b      	ldr	r3, [r1, #16]
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	b913      	cbnz	r3, 8006c00 <_fflush_r+0x10>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	b118      	cbz	r0, 8006c0a <_fflush_r+0x1a>
 8006c02:	6a03      	ldr	r3, [r0, #32]
 8006c04:	b90b      	cbnz	r3, 8006c0a <_fflush_r+0x1a>
 8006c06:	f7fe f963 	bl	8004ed0 <__sinit>
 8006c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f3      	beq.n	8006bfa <_fflush_r+0xa>
 8006c12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c14:	07d0      	lsls	r0, r2, #31
 8006c16:	d404      	bmi.n	8006c22 <_fflush_r+0x32>
 8006c18:	0599      	lsls	r1, r3, #22
 8006c1a:	d402      	bmi.n	8006c22 <_fflush_r+0x32>
 8006c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c1e:	f7fe fb52 	bl	80052c6 <__retarget_lock_acquire_recursive>
 8006c22:	4628      	mov	r0, r5
 8006c24:	4621      	mov	r1, r4
 8006c26:	f7ff ff63 	bl	8006af0 <__sflush_r>
 8006c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c2c:	07da      	lsls	r2, r3, #31
 8006c2e:	4605      	mov	r5, r0
 8006c30:	d4e4      	bmi.n	8006bfc <_fflush_r+0xc>
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	059b      	lsls	r3, r3, #22
 8006c36:	d4e1      	bmi.n	8006bfc <_fflush_r+0xc>
 8006c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c3a:	f7fe fb45 	bl	80052c8 <__retarget_lock_release_recursive>
 8006c3e:	e7dd      	b.n	8006bfc <_fflush_r+0xc>

08006c40 <__swhatbuf_r>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	460c      	mov	r4, r1
 8006c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	b096      	sub	sp, #88	@ 0x58
 8006c4c:	4615      	mov	r5, r2
 8006c4e:	461e      	mov	r6, r3
 8006c50:	da0d      	bge.n	8006c6e <__swhatbuf_r+0x2e>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c58:	f04f 0100 	mov.w	r1, #0
 8006c5c:	bf14      	ite	ne
 8006c5e:	2340      	movne	r3, #64	@ 0x40
 8006c60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c64:	2000      	movs	r0, #0
 8006c66:	6031      	str	r1, [r6, #0]
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	b016      	add	sp, #88	@ 0x58
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	466a      	mov	r2, sp
 8006c70:	f000 f848 	bl	8006d04 <_fstat_r>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	dbec      	blt.n	8006c52 <__swhatbuf_r+0x12>
 8006c78:	9901      	ldr	r1, [sp, #4]
 8006c7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c82:	4259      	negs	r1, r3
 8006c84:	4159      	adcs	r1, r3
 8006c86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c8a:	e7eb      	b.n	8006c64 <__swhatbuf_r+0x24>

08006c8c <__smakebuf_r>:
 8006c8c:	898b      	ldrh	r3, [r1, #12]
 8006c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c90:	079d      	lsls	r5, r3, #30
 8006c92:	4606      	mov	r6, r0
 8006c94:	460c      	mov	r4, r1
 8006c96:	d507      	bpl.n	8006ca8 <__smakebuf_r+0x1c>
 8006c98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	6163      	str	r3, [r4, #20]
 8006ca4:	b003      	add	sp, #12
 8006ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca8:	ab01      	add	r3, sp, #4
 8006caa:	466a      	mov	r2, sp
 8006cac:	f7ff ffc8 	bl	8006c40 <__swhatbuf_r>
 8006cb0:	9f00      	ldr	r7, [sp, #0]
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff f9ce 	bl	8006058 <_malloc_r>
 8006cbc:	b948      	cbnz	r0, 8006cd2 <__smakebuf_r+0x46>
 8006cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc2:	059a      	lsls	r2, r3, #22
 8006cc4:	d4ee      	bmi.n	8006ca4 <__smakebuf_r+0x18>
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	f043 0302 	orr.w	r3, r3, #2
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	e7e2      	b.n	8006c98 <__smakebuf_r+0xc>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	6020      	str	r0, [r4, #0]
 8006cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ce2:	b15b      	cbz	r3, 8006cfc <__smakebuf_r+0x70>
 8006ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f81d 	bl	8006d28 <_isatty_r>
 8006cee:	b128      	cbz	r0, 8006cfc <__smakebuf_r+0x70>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	431d      	orrs	r5, r3
 8006d00:	81a5      	strh	r5, [r4, #12]
 8006d02:	e7cf      	b.n	8006ca4 <__smakebuf_r+0x18>

08006d04 <_fstat_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d07      	ldr	r5, [pc, #28]	@ (8006d24 <_fstat_r+0x20>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	602b      	str	r3, [r5, #0]
 8006d12:	f7fa fc17 	bl	8001544 <_fstat>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d102      	bne.n	8006d20 <_fstat_r+0x1c>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b103      	cbz	r3, 8006d20 <_fstat_r+0x1c>
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	bd38      	pop	{r3, r4, r5, pc}
 8006d22:	bf00      	nop
 8006d24:	2000038c 	.word	0x2000038c

08006d28 <_isatty_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d06      	ldr	r5, [pc, #24]	@ (8006d44 <_isatty_r+0x1c>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7fa fc15 	bl	8001562 <_isatty>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_isatty_r+0x1a>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_isatty_r+0x1a>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	2000038c 	.word	0x2000038c

08006d48 <_sbrk_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d06      	ldr	r5, [pc, #24]	@ (8006d64 <_sbrk_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	f7fa fc1c 	bl	8001590 <_sbrk>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_sbrk_r+0x1a>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_sbrk_r+0x1a>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	2000038c 	.word	0x2000038c

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <__assert_func>:
 8006d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d86:	4614      	mov	r4, r2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <__assert_func+0x2c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	68d8      	ldr	r0, [r3, #12]
 8006d92:	b954      	cbnz	r4, 8006daa <__assert_func+0x26>
 8006d94:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <__assert_func+0x30>)
 8006d96:	461c      	mov	r4, r3
 8006d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d9c:	9100      	str	r1, [sp, #0]
 8006d9e:	462b      	mov	r3, r5
 8006da0:	4905      	ldr	r1, [pc, #20]	@ (8006db8 <__assert_func+0x34>)
 8006da2:	f000 f841 	bl	8006e28 <fiprintf>
 8006da6:	f000 f851 	bl	8006e4c <abort>
 8006daa:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <__assert_func+0x38>)
 8006dac:	e7f4      	b.n	8006d98 <__assert_func+0x14>
 8006dae:	bf00      	nop
 8006db0:	20000018 	.word	0x20000018
 8006db4:	080072a6 	.word	0x080072a6
 8006db8:	08007278 	.word	0x08007278
 8006dbc:	0800726b 	.word	0x0800726b

08006dc0 <_calloc_r>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	fba1 5402 	umull	r5, r4, r1, r2
 8006dc6:	b93c      	cbnz	r4, 8006dd8 <_calloc_r+0x18>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7ff f945 	bl	8006058 <_malloc_r>
 8006dce:	4606      	mov	r6, r0
 8006dd0:	b928      	cbnz	r0, 8006dde <_calloc_r+0x1e>
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	220c      	movs	r2, #12
 8006dda:	6002      	str	r2, [r0, #0]
 8006ddc:	e7f9      	b.n	8006dd2 <_calloc_r+0x12>
 8006dde:	462a      	mov	r2, r5
 8006de0:	4621      	mov	r1, r4
 8006de2:	f7fe f9f3 	bl	80051cc <memset>
 8006de6:	e7f5      	b.n	8006dd4 <_calloc_r+0x14>

08006de8 <__ascii_mbtowc>:
 8006de8:	b082      	sub	sp, #8
 8006dea:	b901      	cbnz	r1, 8006dee <__ascii_mbtowc+0x6>
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	b142      	cbz	r2, 8006e02 <__ascii_mbtowc+0x1a>
 8006df0:	b14b      	cbz	r3, 8006e06 <__ascii_mbtowc+0x1e>
 8006df2:	7813      	ldrb	r3, [r2, #0]
 8006df4:	600b      	str	r3, [r1, #0]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	1e10      	subs	r0, r2, #0
 8006dfa:	bf18      	it	ne
 8006dfc:	2001      	movne	r0, #1
 8006dfe:	b002      	add	sp, #8
 8006e00:	4770      	bx	lr
 8006e02:	4610      	mov	r0, r2
 8006e04:	e7fb      	b.n	8006dfe <__ascii_mbtowc+0x16>
 8006e06:	f06f 0001 	mvn.w	r0, #1
 8006e0a:	e7f8      	b.n	8006dfe <__ascii_mbtowc+0x16>

08006e0c <__ascii_wctomb>:
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4608      	mov	r0, r1
 8006e10:	b141      	cbz	r1, 8006e24 <__ascii_wctomb+0x18>
 8006e12:	2aff      	cmp	r2, #255	@ 0xff
 8006e14:	d904      	bls.n	8006e20 <__ascii_wctomb+0x14>
 8006e16:	228a      	movs	r2, #138	@ 0x8a
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	4770      	bx	lr
 8006e20:	700a      	strb	r2, [r1, #0]
 8006e22:	2001      	movs	r0, #1
 8006e24:	4770      	bx	lr
	...

08006e28 <fiprintf>:
 8006e28:	b40e      	push	{r1, r2, r3}
 8006e2a:	b503      	push	{r0, r1, lr}
 8006e2c:	4601      	mov	r1, r0
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	4805      	ldr	r0, [pc, #20]	@ (8006e48 <fiprintf+0x20>)
 8006e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	f7ff fd41 	bl	80068c0 <_vfiprintf_r>
 8006e3e:	b002      	add	sp, #8
 8006e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e44:	b003      	add	sp, #12
 8006e46:	4770      	bx	lr
 8006e48:	20000018 	.word	0x20000018

08006e4c <abort>:
 8006e4c:	b508      	push	{r3, lr}
 8006e4e:	2006      	movs	r0, #6
 8006e50:	f000 f82c 	bl	8006eac <raise>
 8006e54:	2001      	movs	r0, #1
 8006e56:	f7fa fb26 	bl	80014a6 <_exit>

08006e5a <_raise_r>:
 8006e5a:	291f      	cmp	r1, #31
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4605      	mov	r5, r0
 8006e60:	460c      	mov	r4, r1
 8006e62:	d904      	bls.n	8006e6e <_raise_r+0x14>
 8006e64:	2316      	movs	r3, #22
 8006e66:	6003      	str	r3, [r0, #0]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	bd38      	pop	{r3, r4, r5, pc}
 8006e6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e70:	b112      	cbz	r2, 8006e78 <_raise_r+0x1e>
 8006e72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e76:	b94b      	cbnz	r3, 8006e8c <_raise_r+0x32>
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 f831 	bl	8006ee0 <_getpid_r>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	4601      	mov	r1, r0
 8006e82:	4628      	mov	r0, r5
 8006e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e88:	f000 b818 	b.w	8006ebc <_kill_r>
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d00a      	beq.n	8006ea6 <_raise_r+0x4c>
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	d103      	bne.n	8006e9c <_raise_r+0x42>
 8006e94:	2316      	movs	r3, #22
 8006e96:	6003      	str	r3, [r0, #0]
 8006e98:	2001      	movs	r0, #1
 8006e9a:	e7e7      	b.n	8006e6c <_raise_r+0x12>
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4798      	blx	r3
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e7e0      	b.n	8006e6c <_raise_r+0x12>
	...

08006eac <raise>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	@ (8006eb8 <raise+0xc>)
 8006eae:	4601      	mov	r1, r0
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	f7ff bfd2 	b.w	8006e5a <_raise_r>
 8006eb6:	bf00      	nop
 8006eb8:	20000018 	.word	0x20000018

08006ebc <_kill_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	@ (8006edc <_kill_r+0x20>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	f7fa fadc 	bl	8001486 <_kill>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d102      	bne.n	8006ed8 <_kill_r+0x1c>
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	b103      	cbz	r3, 8006ed8 <_kill_r+0x1c>
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	2000038c 	.word	0x2000038c

08006ee0 <_getpid_r>:
 8006ee0:	f7fa baca 	b.w	8001478 <_getpid>

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
