
SENSOR4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08006f50  08006f50  00007f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007408  08007408  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007408  08007408  00008408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007410  08007410  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007410  08007410  00008410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007418  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000001c8  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000039c  2000039c  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007403  00000000  00000000  000091fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016d2  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00011cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e0  00000000  00000000  000124c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f42  00000000  00000000  00012aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095f4  00000000  00000000  000339e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4dcc  00000000  00000000  0003cfd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101da2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fcc  00000000  00000000  00101de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00104db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f34 	.word	0x08006f34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006f34 	.word	0x08006f34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <user_delay_us>:
/* USER CODE BEGIN PFP */
	SPI_HandleTypeDef hspi1 ; // SPI Handle for SPI1
	int8_t spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);  // to read the data from sensor
	int8_t spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);  // to write data to sensor

	void user_delay_us(uint32_t period, void *intf_ptr) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
		HAL_Delay(period / 1000);  //  for millisecond delay
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <user_delay_us+0x24>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	099b      	lsrs	r3, r3, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fe59 	bl	8002b64 <HAL_Delay>
	}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	10624dd3 	.word	0x10624dd3

08000ec0 <spi_read.1>:
		struct bme280_data comp_data;

  	  	  int8_t rslt;
  	  	    uint8_t cs_pin = GPIO_PIN_4 ;  // chip select pin / NSS pin

  	  	int8_t spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6139      	str	r1, [r7, #16]
 8000ec8:	60fa      	str	r2, [r7, #12]
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4603      	mov	r3, r0
 8000ece:	75fb      	strb	r3, [r7, #23]
 8000ed0:	f8c7 c004 	str.w	ip, [r7, #4]
  	  				    uint8_t cs_pin = *(uint8_t *)intf_ptr;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	77fb      	strb	r3, [r7, #31]

  	  	    // Set the MSB of reg_addr for reading (MSB = 1)
  	  	        reg_addr |= 0x80;
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	75fb      	strb	r3, [r7, #23]
  	  	    //  HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);

  	  		// Pull CS low to select the sensor
  	  			HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_RESET);
 8000ee4:	7ffb      	ldrb	r3, [r7, #31]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	481f      	ldr	r0, [pc, #124]	@ (8000f6c <spi_read.1+0xac>)
 8000eee:	f002 f8db 	bl	80030a8 <HAL_GPIO_WritePin>

  	  		// Send the register address
  	  			if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000ef2:	f107 0117 	add.w	r1, r7, #23
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2201      	movs	r2, #1
 8000efc:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <spi_read.1+0xb0>)
 8000efe:	f002 fdde 	bl	8003abe <HAL_SPI_Transmit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00c      	beq.n	8000f22 <spi_read.1+0x62>
  	  				printf("Failed to send read register address\n");
 8000f08:	481a      	ldr	r0, [pc, #104]	@ (8000f74 <spi_read.1+0xb4>)
 8000f0a:	f004 f8a7 	bl	800505c <puts>
  	  				HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);  // Pull CS high on error
 8000f0e:	7ffb      	ldrb	r3, [r7, #31]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	4815      	ldr	r0, [pc, #84]	@ (8000f6c <spi_read.1+0xac>)
 8000f18:	f002 f8c6 	bl	80030a8 <HAL_GPIO_WritePin>
  	  				return BME280_E_COMM_FAIL;
 8000f1c:	f06f 0301 	mvn.w	r3, #1
 8000f20:	e01f      	b.n	8000f62 <spi_read.1+0xa2>
  	  			}

  	  		// Receive the data
  	  			if (HAL_SPI_Receive(&hspi1, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <spi_read.1+0xb0>)
 8000f2e:	f002 ff09 	bl	8003d44 <HAL_SPI_Receive>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00c      	beq.n	8000f52 <spi_read.1+0x92>
  	  				printf("Failed to receive data\n");
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <spi_read.1+0xb8>)
 8000f3a:	f004 f88f 	bl	800505c <puts>
  	  				HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);  // Pull CS high on error
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <spi_read.1+0xac>)
 8000f48:	f002 f8ae 	bl	80030a8 <HAL_GPIO_WritePin>
  	  				return BME280_E_COMM_FAIL;
 8000f4c:	f06f 0301 	mvn.w	r3, #1
 8000f50:	e007      	b.n	8000f62 <spi_read.1+0xa2>
  	  			}

  	  		// Pull CS high to deselect the sensor
  	  			HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <spi_read.1+0xac>)
 8000f5c:	f002 f8a4 	bl	80030a8 <HAL_GPIO_WritePin>
  	  			return BME280_OK;
 8000f60:	2300      	movs	r3, #0
  	  			}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	200001f0 	.word	0x200001f0
 8000f74:	08006f50 	.word	0x08006f50
 8000f78:	08006f78 	.word	0x08006f78

08000f7c <main>:
	{
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	b0a5      	sub	sp, #148	@ 0x94
 8000f80:	af00      	add	r7, sp, #0
	int main(void)
 8000f82:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000f86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000f8a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f8e:	f103 0410 	add.w	r4, r3, #16
 8000f92:	f107 0568 	add.w	r5, r7, #104	@ 0x68
 8000f96:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <main+0x134>)
 8000f98:	4626      	mov	r6, r4
 8000f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000fa0:	60a5      	str	r5, [r4, #8]
 8000fa2:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <main+0x138>)
 8000fa4:	60e3      	str	r3, [r4, #12]
 8000fa6:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000faa:	f107 0568 	add.w	r5, r7, #104	@ 0x68
 8000fae:	4b40      	ldr	r3, [pc, #256]	@ (80010b0 <main+0x134>)
 8000fb0:	4626      	mov	r6, r4
 8000fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000fb8:	60a5      	str	r5, [r4, #8]
 8000fba:	4b3f      	ldr	r3, [pc, #252]	@ (80010b8 <main+0x13c>)
 8000fbc:	60e3      	str	r3, [r4, #12]
		HAL_Init();
 8000fbe:	f001 fd63 	bl	8002a88 <HAL_Init>
		SystemClock_Config();
 8000fc2:	f000 f8d9 	bl	8001178 <SystemClock_Config>
		MX_GPIO_Init();
 8000fc6:	f000 f977 	bl	80012b8 <MX_GPIO_Init>
		MX_SPI1_Init();
 8000fca:	f000 f93f 	bl	800124c <MX_SPI1_Init>
  	  	    uint8_t cs_pin = GPIO_PIN_4 ;  // chip select pin / NSS pin
 8000fce:	2310      	movs	r3, #16
 8000fd0:	71fb      	strb	r3, [r7, #7]



  	  	// Initialize the sensor

		dev.intf_ptr = &cs_pin ;
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		dev.intf = BME280_SPI_INTF ;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		dev.read = spi_read;
 8000fdc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000fe0:	3310      	adds	r3, #16
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
		dev.write = spi_write;
 8000fe8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
		dev.delay_us =  user_delay_us;
 8000ff2:	4b32      	ldr	r3, [pc, #200]	@ (80010bc <main+0x140>)
 8000ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c


       rslt = bme280_init(&dev);
 8000ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fb57 	bl	80016ae <bme280_init>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

       // Check if the initialization was successful
       if (rslt == BME280_OK) {
 8001006:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800100a:	2b00      	cmp	r3, #0
 800100c:	d124      	bne.n	8001058 <main+0xdc>
          printf("BME280 initialization successful!\n");
 800100e:	482c      	ldr	r0, [pc, #176]	@ (80010c0 <main+0x144>)
 8001010:	f004 f824 	bl	800505c <puts>
          return 0;
       }

      // settings configuration for BME280
      uint8_t settings_sel;
      settings.osr_h = BME280_OVERSAMPLING_16X;
 8001014:	2305      	movs	r3, #5
 8001016:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      settings.osr_p = BME280_OVERSAMPLING_16X;
 800101a:	2305      	movs	r3, #5
 800101c:	f887 3020 	strb.w	r3, [r7, #32]
      settings.osr_p = BME280_OVERSAMPLING_16X;
 8001020:	2305      	movs	r3, #5
 8001022:	f887 3020 	strb.w	r3, [r7, #32]
      settings.filter = BME280_FILTER_COEFF_16;
 8001026:	2304      	movs	r3, #4
 8001028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      settings.standby_time = BME280_STANDBY_TIME_1000_MS;
 800102c:	2305      	movs	r3, #5
 800102e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	  settings_sel = BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP | BME280_SEL_OSR_HUM | BME280_SEL_FILTER | BME280_SEL_STANDBY;
 8001032:	231f      	movs	r3, #31
 8001034:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	  bme280_set_sensor_settings(settings_sel,&settings,  &dev);  // applying setting configurations to sensor
 8001038:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800103c:	f107 0120 	add.w	r1, r7, #32
 8001040:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fc0c 	bl	8001862 <bme280_set_sensor_settings>
	  bme280_set_sensor_mode(BME280_POWERMODE_NORMAL, &dev);      // applying sensor mode
 800104a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800104e:	4619      	mov	r1, r3
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fc55 	bl	8001900 <bme280_set_sensor_mode>
 8001056:	e007      	b.n	8001068 <main+0xec>
          printf("BME280 initialization failed with code: %d\n", rslt);
 8001058:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800105c:	4619      	mov	r1, r3
 800105e:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <main+0x148>)
 8001060:	f003 ff94 	bl	8004f8c <iprintf>
          return 0;
 8001064:	2300      	movs	r3, #0
 8001066:	e01f      	b.n	80010a8 <main+0x12c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);   // reading and compensating temperature,pressure and humidity values from the sensor
 8001068:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4619      	mov	r1, r3
 8001072:	2007      	movs	r0, #7
 8001074:	f000 fcd5 	bl	8001a22 <bme280_get_sensor_data>
 8001078:	4603      	mov	r3, r0
 800107a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	  	  printf("Temperature: %0.2f °C\n", comp_data.temperature);
 800107e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001082:	4811      	ldr	r0, [pc, #68]	@ (80010c8 <main+0x14c>)
 8001084:	f003 ff82 	bl	8004f8c <iprintf>
		  printf("Pressure: %0.2f hPa\n", comp_data.pressure);
 8001088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800108c:	480f      	ldr	r0, [pc, #60]	@ (80010cc <main+0x150>)
 800108e:	f003 ff7d 	bl	8004f8c <iprintf>
		  printf("Humidity: %0.2f %%\n", comp_data.humidity);
 8001092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001096:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <main+0x154>)
 8001098:	f003 ff78 	bl	8004f8c <iprintf>
	  HAL_Delay(1000);
 800109c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a0:	f001 fd60 	bl	8002b64 <HAL_Delay>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);   // reading and compensating temperature,pressure and humidity values from the sensor
 80010a4:	bf00      	nop
 80010a6:	e7df      	b.n	8001068 <main+0xec>
//		 		  printf("Pressure: %d hPa\n", uncomp_data.pressure);
//		 		  printf("Humidity: %d%%\n", uncomp_data.humidity);
//		 		 HAL_Delay(500);
  }

}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3794      	adds	r7, #148	@ 0x94
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b0:	08006f90 	.word	0x08006f90
 80010b4:	08000ec1 	.word	0x08000ec1
 80010b8:	080010d5 	.word	0x080010d5
 80010bc:	08000e99 	.word	0x08000e99
 80010c0:	08006fa0 	.word	0x08006fa0
 80010c4:	08006fc4 	.word	0x08006fc4
 80010c8:	08006ff0 	.word	0x08006ff0
 80010cc:	08007008 	.word	0x08007008
 80010d0:	08007020 	.word	0x08007020

080010d4 <spi_write.0>:
  	  	  int8_t spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6139      	str	r1, [r7, #16]
 80010dc:	60fa      	str	r2, [r7, #12]
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4603      	mov	r3, r0
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	f8c7 c004 	str.w	ip, [r7, #4]
  	  	  uint8_t cs_pin = *(uint8_t *)intf_ptr;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	77fb      	strb	r3, [r7, #31]
  	  	  HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_RESET);
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	481b      	ldr	r0, [pc, #108]	@ (8001164 <spi_write.0+0x90>)
 80010f8:	f001 ffd6 	bl	80030a8 <HAL_GPIO_WritePin>
  	  	  printf("Writing to register 0x%02X\n", reg_addr);
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	4619      	mov	r1, r3
 8001100:	4819      	ldr	r0, [pc, #100]	@ (8001168 <spi_write.0+0x94>)
 8001102:	f003 ff43 	bl	8004f8c <iprintf>
  	  	  if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001106:	f107 0117 	add.w	r1, r7, #23
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	2201      	movs	r2, #1
 8001110:	4816      	ldr	r0, [pc, #88]	@ (800116c <spi_write.0+0x98>)
 8001112:	f002 fcd4 	bl	8003abe <HAL_SPI_Transmit>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <spi_write.0+0x54>
  	  		  printf("Failed to send register address\n");
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <spi_write.0+0x9c>)
 800111e:	f003 ff9d 	bl	800505c <puts>
  	  		  return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e018      	b.n	800115a <spi_write.0+0x86>
  	  	  if (HAL_SPI_Transmit(&hspi1, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	b29a      	uxth	r2, r3
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	480e      	ldr	r0, [pc, #56]	@ (800116c <spi_write.0+0x98>)
 8001134:	f002 fcc3 	bl	8003abe <HAL_SPI_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <spi_write.0+0x76>
  	  		  printf("Failed to send data\n");
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <spi_write.0+0xa0>)
 8001140:	f003 ff8c 	bl	800505c <puts>
  	  		  return -1;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	e007      	b.n	800115a <spi_write.0+0x86>
  	  	  HAL_GPIO_WritePin(GPIOA, cs_pin, GPIO_PIN_SET);
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	b29b      	uxth	r3, r3
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	4804      	ldr	r0, [pc, #16]	@ (8001164 <spi_write.0+0x90>)
 8001154:	f001 ffa8 	bl	80030a8 <HAL_GPIO_WritePin>
  	  	  return 0;
 8001158:	2300      	movs	r3, #0
  	  	  }
 800115a:	4618      	mov	r0, r3
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020000 	.word	0x40020000
 8001168:	08007034 	.word	0x08007034
 800116c:	200001f0 	.word	0x200001f0
 8001170:	08007050 	.word	0x08007050
 8001174:	08007070 	.word	0x08007070

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	@ 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	@ 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f004 f848 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <SystemClock_Config+0xcc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	4a27      	ldr	r2, [pc, #156]	@ (8001244 <SystemClock_Config+0xcc>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <SystemClock_Config+0xd0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <SystemClock_Config+0xd0>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e8:	2308      	movs	r3, #8
 80011ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80011ec:	2332      	movs	r3, #50	@ 0x32
 80011ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 ff6b 	bl	80030d8 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001208:	f000 f898 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001218:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800121e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f9cc 	bl	80035c8 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001236:	f000 f881 	bl	800133c <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	@ 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001252:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <MX_SPI1_Init+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800127c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_SPI1_Init+0x64>)
 8001298:	220a      	movs	r2, #10
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <MX_SPI1_Init+0x64>)
 800129e:	f002 fb85 	bl	80039ac <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a8:	f000 f848 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200001f0 	.word	0x200001f0
 80012b4:	40013000 	.word	0x40013000

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_GPIO_Init+0x7c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <MX_GPIO_Init+0x7c>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_GPIO_Init+0x7c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_GPIO_Init+0x7c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <MX_GPIO_Init+0x7c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_GPIO_Init+0x7c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2110      	movs	r1, #16
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <MX_GPIO_Init+0x80>)
 800130c:	f001 fecc 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001310:	2310      	movs	r3, #16
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_GPIO_Init+0x80>)
 8001328:	f001 fd24 	bl	8002d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <Error_Handler+0x8>

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f001 fcc0 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	@ (800141c <HAL_SPI_MspInit+0x84>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12b      	bne.n	8001412 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_SPI_MspInit+0x88>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <HAL_SPI_MspInit+0x88>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_SPI_MspInit+0x88>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_SPI_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a10      	ldr	r2, [pc, #64]	@ (8001420 <HAL_SPI_MspInit+0x88>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <HAL_SPI_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013f2:	23e0      	movs	r3, #224	@ 0xe0
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001402:	2305      	movs	r3, #5
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <HAL_SPI_MspInit+0x8c>)
 800140e:	f001 fcb1 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40013000 	.word	0x40013000
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <MemManage_Handler+0x4>

08001440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <UsageFault_Handler+0x4>

08001450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f001 fb58 	bl	8002b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <ITM_SendChar+0x44>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <ITM_SendChar+0x44>)
 8001490:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001494:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001496:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <ITM_SendChar+0x48>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <ITM_SendChar+0x48>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80014a2:	bf00      	nop
 80014a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f8      	beq.n	80014a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014b2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	6013      	str	r3, [r2, #0]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	e000edfc 	.word	0xe000edfc
 80014c8:	e0000e00 	.word	0xe0000e00

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <_kill>:

int _kill(int pid, int sig)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e4:	f003 feec 	bl	80052c0 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2216      	movs	r2, #22
 80014ec:	601a      	str	r2, [r3, #0]
  return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_exit>:

void _exit (int status)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001502:	f04f 31ff 	mov.w	r1, #4294967295
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffe7 	bl	80014da <_kill>
  while (1) {}    /* Make sure we hang here */
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <_exit+0x12>

08001510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001522:	f3af 8000 	nop.w
 8001526:	4601      	mov	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
  }

  return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e009      	b.n	8001570 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff8b 	bl	8001480 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf1      	blt.n	800155c <_write+0x12>
  }
  return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_close>:

int _close(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a8:	605a      	str	r2, [r3, #4]
  return 0;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <_isatty>:

int _isatty(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
	...

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	@ (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f003 fe54 	bl	80052c0 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	220c      	movs	r2, #12
 800161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20020000 	.word	0x20020000
 8001644:	00000400 	.word	0x00000400
 8001648:	20000248 	.word	0x20000248
 800164c:	200003a0 	.word	0x200003a0

08001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001660:	f7ff fff6 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001666:	490d      	ldr	r1, [pc, #52]	@ (800169c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800167c:	4c0a      	ldr	r4, [pc, #40]	@ (80016a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168a:	f003 fe1f 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fc75 	bl	8000f7c <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016a0:	08007418 	.word	0x08007418
  ldr r2, =_sbss
 80016a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016a8:	2000039c 	.word	0x2000039c

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>

080016ae <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73bb      	strb	r3, [r7, #14]

    /* Read the chip-id of bme280 sensor */
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
 80016ba:	f107 010e 	add.w	r1, r7, #14
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	20d0      	movs	r0, #208	@ 0xd0
 80016c4:	f000 f823 	bl	800170e <bme280_get_regs>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

    /* Check for chip id validity */
    if (rslt == BME280_OK)
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d116      	bne.n	8001702 <bme280_init+0x54>
    {
        if (chip_id == BME280_CHIP_ID)
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	2b60      	cmp	r3, #96	@ 0x60
 80016d8:	d111      	bne.n	80016fe <bme280_init+0x50>
        {
            dev->chip_id = chip_id;
 80016da:	7bba      	ldrb	r2, [r7, #14]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	701a      	strb	r2, [r3, #0]

            /* Reset the sensor */
            rslt = bme280_soft_reset(dev);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f958 	bl	8001996 <bme280_soft_reset>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME280_OK)
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <bme280_init+0x54>
            {
                /* Read the calibration data */
                rslt = get_calib_data(dev);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f001 f822 	bl	800273c <get_calib_data>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <bme280_init+0x54>
            }
        }
        else
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80016fe:	23fc      	movs	r3, #252	@ 0xfc
 8001700:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b087      	sub	sp, #28
 8001712:	af00      	add	r7, sp, #0
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f001 f993 	bl	8002a4a <null_ptr_check>
 8001724:	4603      	mov	r3, r0
 8001726:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BME280_OK) && (reg_data != NULL))
 8001728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d11e      	bne.n	800176e <bme280_get_regs+0x60>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01b      	beq.n	800176e <bme280_get_regs+0x60>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	785b      	ldrb	r3, [r3, #1]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <bme280_get_regs+0x38>
        {
            reg_addr = reg_addr | 0x80;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001744:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68dc      	ldr	r4, [r3, #12]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	7bf8      	ldrb	r0, [r7, #15]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	47a0      	blx	r4
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <bme280_get_regs+0x64>
        {
            rslt = BME280_E_COMM_FAIL;
 8001768:	23fe      	movs	r3, #254	@ 0xfe
 800176a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800176c:	e001      	b.n	8001772 <bme280_get_regs+0x64>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800176e:	23ff      	movs	r3, #255	@ 0xff
 8001770:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001776:	4618      	mov	r0, r3
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}

0800177e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 800177e:	b590      	push	{r4, r7, lr}
 8001780:	b08d      	sub	sp, #52	@ 0x34
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */
    uint32_t temp_len;
    uint32_t reg_addr_cnt;

    if (len > BME280_MAX_LEN)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d901      	bls.n	8001796 <bme280_set_regs+0x18>
    {
        len = BME280_MAX_LEN;
 8001792:	230a      	movs	r3, #10
 8001794:	607b      	str	r3, [r7, #4]
    }

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001796:	6838      	ldr	r0, [r7, #0]
 8001798:	f001 f957 	bl	8002a4a <null_ptr_check>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80017a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d150      	bne.n	800184c <bme280_set_regs+0xce>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d04d      	beq.n	800184c <bme280_set_regs+0xce>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d04a      	beq.n	800184c <bme280_set_regs+0xce>
    {
        if (len != 0)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d043      	beq.n	8001844 <bme280_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	743b      	strb	r3, [r7, #16]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d014      	beq.n	80017f4 <bme280_set_regs+0x76>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ce:	e00d      	b.n	80017ec <bme280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	4413      	add	r3, r2
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	440b      	add	r3, r1
 80017de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3ed      	bcc.n	80017d0 <bme280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d90b      	bls.n	8001812 <bme280_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80017fa:	f107 0110 	add.w	r1, r7, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 ffdf 	bl	80027c6 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	3b01      	subs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001810:	e001      	b.n	8001816 <bme280_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	691c      	ldr	r4, [r3, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	7818      	ldrb	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f107 0110 	add.w	r1, r7, #16
 8001826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001828:	47a0      	blx	r4
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	721a      	strb	r2, [r3, #8]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00b      	beq.n	8001854 <bme280_set_regs+0xd6>
            {
                rslt = BME280_E_COMM_FAIL;
 800183c:	23fe      	movs	r3, #254	@ 0xfe
 800183e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 8001842:	e007      	b.n	8001854 <bme280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8001844:	23fd      	movs	r3, #253	@ 0xfd
 8001846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 800184a:	e003      	b.n	8001854 <bme280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800184c:	23ff      	movs	r3, #255	@ 0xff
 800184e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001852:	e000      	b.n	8001856 <bme280_set_regs+0xd8>
        if (len != 0)
 8001854:	bf00      	nop
    }

    return rslt;
 8001856:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800185a:	4618      	mov	r0, r3
 800185c:	3734      	adds	r7, #52	@ 0x34
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <bme280_set_sensor_settings>:
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings,
                                  const struct bme280_settings *settings,
                                  struct bme280_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t sensor_mode;

    if (settings != NULL)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03c      	beq.n	80018f0 <bme280_set_sensor_settings+0x8e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001876:	f107 0316 	add.w	r3, r7, #22
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f86a 	bl	8001956 <bme280_get_sensor_mode>
 8001882:	4603      	mov	r3, r0
 8001884:	75fb      	strb	r3, [r7, #23]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_POWERMODE_SLEEP))
 8001886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d107      	bne.n	800189e <bme280_set_sensor_settings+0x3c>
 800188e:	7dbb      	ldrb	r3, [r7, #22]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <bme280_set_sensor_settings+0x3c>
        {
            rslt = put_device_to_sleep(dev);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fb4c 	bl	8001f32 <put_device_to_sleep>
 800189a:	4603      	mov	r3, r0
 800189c:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BME280_OK)
 800189e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d126      	bne.n	80018f4 <bme280_set_sensor_settings+0x92>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	4619      	mov	r1, r3
 80018aa:	2007      	movs	r0, #7
 80018ac:	f001 f8b2 	bl	8002a14 <are_settings_changed>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <bme280_set_sensor_settings+0x64>
            {
                rslt = set_osr_settings(desired_settings, settings, dev);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f94a 	bl	8001b56 <set_osr_settings>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80018c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d112      	bne.n	80018f4 <bme280_set_sensor_settings+0x92>
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	4619      	mov	r1, r3
 80018d2:	2018      	movs	r0, #24
 80018d4:	f001 f89e 	bl	8002a14 <are_settings_changed>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <bme280_set_sensor_settings+0x92>
            {
                rslt = set_filter_standby_settings(desired_settings, settings, dev);
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f9d3 	bl	8001c90 <set_filter_standby_settings>
 80018ea:	4603      	mov	r3, r0
 80018ec:	75fb      	strb	r3, [r7, #23]
 80018ee:	e001      	b.n	80018f4 <bme280_set_sensor_settings+0x92>
            }
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80018f0:	23ff      	movs	r3, #255	@ 0xff
 80018f2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80018f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800190c:	f107 030e 	add.w	r3, r7, #14
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f81f 	bl	8001956 <bme280_get_sensor_mode>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]

    /* If the sensor is not in sleep mode put the device to sleep
     * mode
     */
    if ((rslt == BME280_OK) && (last_set_mode != BME280_POWERMODE_SLEEP))
 800191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <bme280_set_sensor_mode+0x34>
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <bme280_set_sensor_mode+0x34>
    {
        rslt = put_device_to_sleep(dev);
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f000 fb01 	bl	8001f32 <put_device_to_sleep>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <bme280_set_sensor_mode+0x4a>
    {
        rslt = write_power_mode(sensor_mode, dev);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fac3 	bl	8001ecc <write_power_mode>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (sensor_mode != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00f      	beq.n	8001986 <bme280_get_sensor_mode+0x30>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_REG_PWR_CTRL, sensor_mode, 1, dev);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	20f4      	movs	r0, #244	@ 0xf4
 800196e:	f7ff fece 	bl	800170e <bme280_get_regs>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode to variable */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e001      	b.n	800198a <bme280_get_sensor_mode+0x34>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001986:	23ff      	movs	r3, #255	@ 0xff
 8001988:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_RESET;
 800199e:	23e0      	movs	r3, #224	@ 0xe0
 80019a0:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80019a6:	2305      	movs	r3, #5
 80019a8:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80019aa:	23b6      	movs	r3, #182	@ 0xb6
 80019ac:	72fb      	strb	r3, [r7, #11]

    /* Write the soft reset command in the sensor */
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80019ae:	f107 010b 	add.w	r1, r7, #11
 80019b2:	f107 000d 	add.w	r0, r7, #13
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f7ff fee0 	bl	800177e <bme280_set_regs>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d125      	bne.n	8001a16 <bme280_soft_reset+0x80>
    {
        /* If NVM not copied yet, Wait for NVM to copy */
        do
        {
            /* As per data sheet - Table 1, startup time is 2 ms. */
            dev->delay_us(BME280_STARTUP_DELAY, dev->intf_ptr);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6852      	ldr	r2, [r2, #4]
 80019d2:	4611      	mov	r1, r2
 80019d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019d8:	4798      	blx	r3
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
 80019da:	f107 010c 	add.w	r1, r7, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	20f3      	movs	r0, #243	@ 0xf3
 80019e4:	f7ff fe93 	bl	800170e <bme280_get_regs>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]

        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <bme280_soft_reset+0x72>
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	73ba      	strb	r2, [r7, #14]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <bme280_soft_reset+0x72>
 80019fe:	7b3b      	ldrb	r3, [r7, #12]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e0      	bne.n	80019ca <bme280_soft_reset+0x34>

        if (status_reg & BME280_STATUS_IM_UPDATE)
 8001a08:	7b3b      	ldrb	r3, [r7, #12]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <bme280_soft_reset+0x80>
        {
            rslt = BME280_E_NVM_COPY_FAILED;
 8001a12:	23fa      	movs	r3, #250	@ 0xfa
 8001a14:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b08a      	sub	sp, #40	@ 0x28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]

    if (comp_data != NULL)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d021      	beq.n	8001a8e <bme280_get_sensor_data+0x6c>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 8001a4a:	f107 011c 	add.w	r1, r7, #28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2208      	movs	r2, #8
 8001a52:	20f7      	movs	r0, #247	@ 0xf7
 8001a54:	f7ff fe5b 	bl	800170e <bme280_get_regs>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 8001a5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <bme280_get_sensor_data+0x72>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001a66:	f107 0210 	add.w	r2, r7, #16
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f9e6 	bl	8001e42 <parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	f107 0110 	add.w	r1, r7, #16
 8001a7e:	7bf8      	ldrb	r0, [r7, #15]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	f000 f80d 	bl	8001aa0 <bme280_compensate_data>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a8c:	e002      	b.n	8001a94 <bme280_get_sensor_data+0x72>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001a8e:	23ff      	movs	r3, #255	@ 0xff
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d045      	beq.n	8001b46 <bme280_compensate_data+0xa6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d042      	beq.n	8001b46 <bme280_compensate_data+0xa6>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03f      	beq.n	8001b46 <bme280_compensate_data+0xa6>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f000 fa65 	bl	8001fcc <compensate_temperature>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        if (sensor_comp & BME280_PRESS)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <bme280_compensate_data+0x88>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f000 fb25 	bl	8002168 <compensate_pressure>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BME280_HUM)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <bme280_compensate_data+0xaa>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	68b8      	ldr	r0, [r7, #8]
 8001b36:	f000 fce5 	bl	8002504 <compensate_humidity>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if (sensor_comp & BME280_HUM)
 8001b44:	e001      	b.n	8001b4a <bme280_compensate_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001b46:	23ff      	movs	r3, #255	@ 0xff
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001b64:	2301      	movs	r3, #1
 8001b66:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_SEL_OSR_HUM)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f000 f815 	bl	8001ba4 <set_osr_humidity_settings>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP))
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f842 	bl	8001c18 <set_osr_press_temp_settings>
 8001b94:	4603      	mov	r3, r0
 8001b96:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_REG_CTRL_HUM;
 8001bae:	23f2      	movs	r3, #242	@ 0xf2
 8001bb0:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001bbe:	f107 010e 	add.w	r1, r7, #14
 8001bc2:	f107 000c 	add.w	r0, r7, #12
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f7ff fdd8 	bl	800177e <bme280_set_regs>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_REG_CTRL_MEAS;
 8001bda:	23f4      	movs	r3, #244	@ 0xf4
 8001bdc:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001bde:	7b38      	ldrb	r0, [r7, #12]
 8001be0:	f107 010d 	add.w	r1, r7, #13
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f7ff fd91 	bl	800170e <bme280_get_regs>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001bf8:	f107 010d 	add.w	r1, r7, #13
 8001bfc:	f107 000c 	add.w	r0, r7, #12
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f7ff fdbb 	bl	800177e <bme280_set_regs>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CTRL_MEAS;
 8001c26:	23f4      	movs	r3, #244	@ 0xf4
 8001c28:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001c2a:	7db8      	ldrb	r0, [r7, #22]
 8001c2c:	f107 0115 	add.w	r1, r7, #21
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f7ff fd6b 	bl	800170e <bme280_get_regs>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_OSR_PRESS)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001c4e:	f107 0315 	add.w	r3, r7, #21
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f88c 	bl	8001d72 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_SEL_OSR_TEMP)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001c64:	f107 0315 	add.w	r3, r7, #21
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f89d 	bl	8001daa <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001c70:	f107 0115 	add.w	r1, r7, #21
 8001c74:	f107 0016 	add.w	r0, r7, #22
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f7ff fd7f 	bl	800177e <bme280_set_regs>
 8001c80:	4603      	mov	r3, r0
 8001c82:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CONFIG;
 8001c9e:	23f5      	movs	r3, #245	@ 0xf5
 8001ca0:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001ca2:	7db8      	ldrb	r0, [r7, #22]
 8001ca4:	f107 0115 	add.w	r1, r7, #21
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f7ff fd2f 	bl	800170e <bme280_get_regs>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11f      	bne.n	8001cfc <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_FILTER)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001cc6:	f107 0315 	add.w	r3, r7, #21
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 f81b 	bl	8001d08 <fill_filter_settings>
        }

        if (desired_settings & BME280_SEL_STANDBY)
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001cdc:	f107 0315 	add.w	r3, r7, #21
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f82c 	bl	8001d40 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001ce8:	f107 0115 	add.w	r1, r7, #21
 8001cec:	f107 0016 	add.w	r0, r7, #22
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f7ff fd43 	bl	800177e <bme280_set_regs>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	f023 031c 	bic.w	r3, r3, #28
 8001d1c:	b25a      	sxtb	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	f003 031c 	and.w	r3, r3, #28
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	701a      	strb	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	015b      	lsls	r3, r3, #5
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	701a      	strb	r2, [r3, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	f023 031c 	bic.w	r3, r3, #28
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f003 031c 	and.w	r3, r3, #28
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	701a      	strb	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	701a      	strb	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * bme280_settings structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3302      	adds	r3, #2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	109b      	asrs	r3, r3, #2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	109b      	asrs	r3, r3, #2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	711a      	strb	r2, [r3, #4]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b087      	sub	sp, #28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3302      	adds	r3, #2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3303      	adds	r3, #3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	031b      	lsls	r3, r3, #12
 8001e80:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3305      	adds	r3, #5
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3306      	adds	r3, #6
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	609a      	str	r2, [r3, #8]
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_PWR_CTRL;
 8001ed8:	23f4      	movs	r3, #244	@ 0xf4
 8001eda:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001edc:	7bb8      	ldrb	r0, [r7, #14]
 8001ede:	f107 010d 	add.w	r1, r7, #13
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f7ff fc12 	bl	800170e <bme280_get_regs>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d117      	bne.n	8001f26 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001ef6:	7b7b      	ldrb	r3, [r7, #13]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	b25a      	sxtb	r2, r3
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001f12:	f107 010d 	add.w	r1, r7, #13
 8001f16:	f107 000e 	add.w	r0, r7, #14
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f7ff fc2e 	bl	800177e <bme280_set_regs>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 8001f3a:	f107 0110 	add.w	r1, r7, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	20f2      	movs	r0, #242	@ 0xf2
 8001f44:	f7ff fbe3 	bl	800170e <bme280_get_regs>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d118      	bne.n	8001f86 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff3c 	bl	8001ddc <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fd16 	bl	8001996 <bme280_soft_reset>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f808 	bl	8001f92 <reload_device_settings>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	201f      	movs	r0, #31
 8001fa2:	f7ff fdd8 	bl	8001b56 <set_osr_settings>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	201f      	movs	r0, #31
 8001fb8:	f7ff fe6a 	bl	8001c90 <set_filter_standby_settings>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b08c      	sub	sp, #48	@ 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b5d      	ldr	r3, [pc, #372]	@ (8002150 <compensate_temperature+0x184>)
 8001fdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8002154 <compensate_temperature+0x188>)
 8001fe6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa88 	bl	8000504 <__aeabi_ui2d>
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	4b57      	ldr	r3, [pc, #348]	@ (8002158 <compensate_temperature+0x18c>)
 8001ffa:	f7fe fc27 	bl	800084c <__aeabi_ddiv>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4614      	mov	r4, r2
 8002004:	461d      	mov	r5, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa7a 	bl	8000504 <__aeabi_ui2d>
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	4b51      	ldr	r3, [pc, #324]	@ (800215c <compensate_temperature+0x190>)
 8002016:	f7fe fc19 	bl	800084c <__aeabi_ddiv>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe f931 	bl	8000288 <__aeabi_dsub>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa75 	bl	8000524 <__aeabi_i2d>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002042:	f7fe fad9 	bl	80005f8 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa56 	bl	8000504 <__aeabi_ui2d>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002060:	f7fe fbf4 	bl	800084c <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4614      	mov	r4, r2
 800206a:	461d      	mov	r5, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa47 	bl	8000504 <__aeabi_ui2d>
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <compensate_temperature+0x194>)
 800207c:	f7fe fbe6 	bl	800084c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4620      	mov	r0, r4
 8002086:	4629      	mov	r1, r5
 8002088:	f7fe f8fe 	bl	8000288 <__aeabi_dsub>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002098:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800209c:	f7fe faac 	bl	80005f8 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4614      	mov	r4, r2
 80020a6:	461d      	mov	r5, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa38 	bl	8000524 <__aeabi_i2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe fa9c 	bl	80005f8 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 80020c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d0:	f7fe f8dc 	bl	800028c <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f7fe fd3c 	bl	8000b58 <__aeabi_d2iz>
 80020e0:	4602      	mov	r2, r0
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 80020e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ee:	f7fe f8cd 	bl	800028c <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <compensate_temperature+0x198>)
 8002100:	f7fe fba4 	bl	800084c <__aeabi_ddiv>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    if (temperature < temperature_min)
 800210c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002110:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002114:	f7fe fce2 	bl	8000adc <__aeabi_dcmplt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800211e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002122:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002126:	e00c      	b.n	8002142 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8002128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002130:	f7fe fcf2 	bl	8000b18 <__aeabi_dcmpgt>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 800213a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }

    return temperature;
 8002142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	3730      	adds	r7, #48	@ 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	c0440000 	.word	0xc0440000
 8002154:	40554000 	.word	0x40554000
 8002158:	40d00000 	.word	0x40d00000
 800215c:	40900000 	.word	0x40900000
 8002160:	40c00000 	.word	0x40c00000
 8002164:	40b40000 	.word	0x40b40000

08002168 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b08e      	sub	sp, #56	@ 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8002172:	a3c5      	add	r3, pc, #788	@ (adr r3, 8002488 <compensate_pressure+0x320>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double pressure_max = 110000.0;
 800217c:	a3c4      	add	r3, pc, #784	@ (adr r3, 8002490 <compensate_pressure+0x328>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9ca 	bl	8000524 <__aeabi_i2d>
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002198:	f7fe fb58 	bl	800084c <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4bbd      	ldr	r3, [pc, #756]	@ (80024a0 <compensate_pressure+0x338>)
 80021aa:	f7fe f86d 	bl	8000288 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80021b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021be:	f7fe fa1b 	bl	80005f8 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4614      	mov	r4, r2
 80021c8:	461d      	mov	r5, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9a7 	bl	8000524 <__aeabi_i2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe fa0b 	bl	80005f8 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4bad      	ldr	r3, [pc, #692]	@ (80024a4 <compensate_pressure+0x33c>)
 80021f0:	f7fe fb2c 	bl	800084c <__aeabi_ddiv>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f98e 	bl	8000524 <__aeabi_i2d>
 8002208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220c:	f7fe f9f4 	bl	80005f8 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	f7fe f836 	bl	800028c <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002228:	f7fe f830 	bl	800028c <__adddf3>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	4b9b      	ldr	r3, [pc, #620]	@ (80024a8 <compensate_pressure+0x340>)
 800223a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800223e:	f7fe fb05 	bl	800084c <__aeabi_ddiv>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f967 	bl	8000524 <__aeabi_i2d>
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b94      	ldr	r3, [pc, #592]	@ (80024ac <compensate_pressure+0x344>)
 800225c:	f7fe f9cc 	bl	80005f8 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f7fe f810 	bl	800028c <__adddf3>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f952 	bl	8000524 <__aeabi_i2d>
 8002280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002284:	f7fe f9b8 	bl	80005f8 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b82      	ldr	r3, [pc, #520]	@ (80024b0 <compensate_pressure+0x348>)
 80022a6:	f7fe fad1 	bl	800084c <__aeabi_ddiv>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f933 	bl	8000524 <__aeabi_i2d>
 80022be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c2:	f7fe f999 	bl	80005f8 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d2:	f7fd ffdb 	bl	800028c <__adddf3>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <compensate_pressure+0x348>)
 80022e4:	f7fe fab2 	bl	800084c <__aeabi_ddiv>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	4b6b      	ldr	r3, [pc, #428]	@ (80024a4 <compensate_pressure+0x33c>)
 80022f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022fa:	f7fe faa7 	bl	800084c <__aeabi_ddiv>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	4b6a      	ldr	r3, [pc, #424]	@ (80024b4 <compensate_pressure+0x34c>)
 800230c:	f7fd ffbe 	bl	800028c <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4614      	mov	r4, r2
 8002316:	461d      	mov	r5, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	88db      	ldrh	r3, [r3, #6]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8f1 	bl	8000504 <__aeabi_ui2d>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4620      	mov	r0, r4
 8002328:	4629      	mov	r1, r5
 800232a:	f7fe f965 	bl	80005f8 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* Avoid exception caused by division by zero */
    if (var1 > (0.0))
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002342:	f7fe fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80d0 	beq.w	80024ee <compensate_pressure+0x386>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f8d6 	bl	8000504 <__aeabi_ui2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	f04f 0000 	mov.w	r0, #0
 8002360:	4955      	ldr	r1, [pc, #340]	@ (80024b8 <compensate_pressure+0x350>)
 8002362:	f7fd ff91 	bl	8000288 <__aeabi_dsub>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <compensate_pressure+0x354>)
 8002374:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002378:	f7fe fa68 	bl	800084c <__aeabi_ddiv>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002384:	f7fd ff80 	bl	8000288 <__aeabi_dsub>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	a341      	add	r3, pc, #260	@ (adr r3, 8002498 <compensate_pressure+0x330>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe f92f 	bl	80005f8 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a6:	f7fe fa51 	bl	800084c <__aeabi_ddiv>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f8b3 	bl	8000524 <__aeabi_i2d>
 80023be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023c2:	f7fe f919 	bl	80005f8 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023d2:	f7fe f911 	bl	80005f8 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <compensate_pressure+0x358>)
 80023e4:	f7fe fa32 	bl	800084c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f894 	bl	8000524 <__aeabi_i2d>
 80023fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002400:	f7fe f8fa 	bl	80005f8 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <compensate_pressure+0x33c>)
 8002412:	f7fe fa1b 	bl	800084c <__aeabi_ddiv>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800241e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002426:	f7fd ff31 	bl	800028c <__adddf3>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4614      	mov	r4, r2
 8002430:	461d      	mov	r5, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f873 	bl	8000524 <__aeabi_i2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff21 	bl	800028c <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <compensate_pressure+0x35c>)
 8002458:	f7fe f9f8 	bl	800084c <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002464:	f7fd ff12 	bl	800028c <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

        if (pressure < pressure_min)
 8002470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002474:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002478:	f7fe fb30 	bl	8000adc <__aeabi_dcmplt>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d027      	beq.n	80024d2 <compensate_pressure+0x36a>
 8002482:	e021      	b.n	80024c8 <compensate_pressure+0x360>
 8002484:	f3af 8000 	nop.w
 8002488:	00000000 	.word	0x00000000
 800248c:	40dd4c00 	.word	0x40dd4c00
 8002490:	00000000 	.word	0x00000000
 8002494:	40fadb00 	.word	0x40fadb00
 8002498:	00000000 	.word	0x00000000
 800249c:	40b86a00 	.word	0x40b86a00
 80024a0:	40ef4000 	.word	0x40ef4000
 80024a4:	40e00000 	.word	0x40e00000
 80024a8:	40100000 	.word	0x40100000
 80024ac:	40f00000 	.word	0x40f00000
 80024b0:	41200000 	.word	0x41200000
 80024b4:	3ff00000 	.word	0x3ff00000
 80024b8:	41300000 	.word	0x41300000
 80024bc:	40b00000 	.word	0x40b00000
 80024c0:	41e00000 	.word	0x41e00000
 80024c4:	40300000 	.word	0x40300000
        {
            pressure = pressure_min;
 80024c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80024d0:	e011      	b.n	80024f6 <compensate_pressure+0x38e>
        }
        else if (pressure > pressure_max)
 80024d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80024da:	f7fe fb1d 	bl	8000b18 <__aeabi_dcmpgt>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <compensate_pressure+0x38e>
        {
            pressure = pressure_max;
 80024e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80024ec:	e003      	b.n	80024f6 <compensate_pressure+0x38e>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 80024ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    return pressure;
 80024f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	3738      	adds	r7, #56	@ 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bdb0      	pop	{r4, r5, r7, pc}

08002504 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b094      	sub	sp, #80	@ 0x50
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double humidity_max = 100.0;
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b7f      	ldr	r3, [pc, #508]	@ (800271c <compensate_humidity+0x218>)
 8002520:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd fffb 	bl	8000524 <__aeabi_i2d>
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b7b      	ldr	r3, [pc, #492]	@ (8002720 <compensate_humidity+0x21c>)
 8002534:	f7fd fea8 	bl	8000288 <__aeabi_dsub>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ffec 	bl	8000524 <__aeabi_i2d>
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b74      	ldr	r3, [pc, #464]	@ (8002724 <compensate_humidity+0x220>)
 8002552:	f7fe f851 	bl	80005f8 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4614      	mov	r4, r2
 800255c:	461d      	mov	r5, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ffdd 	bl	8000524 <__aeabi_i2d>
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b6e      	ldr	r3, [pc, #440]	@ (8002728 <compensate_humidity+0x224>)
 8002570:	f7fe f96c 	bl	800084c <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002580:	f7fe f83a 	bl	80005f8 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fd fe7e 	bl	800028c <__adddf3>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    var3 = uncomp_data->humidity - var2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffb1 	bl	8000504 <__aeabi_ui2d>
 80025a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025a6:	f7fd fe6f 	bl	8000288 <__aeabi_dsub>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffb3 	bl	8000524 <__aeabi_i2d>
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b5a      	ldr	r3, [pc, #360]	@ (800272c <compensate_humidity+0x228>)
 80025c4:	f7fe f942 	bl	800084c <__aeabi_ddiv>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	7f1b      	ldrb	r3, [r3, #28]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ff95 	bl	8000504 <__aeabi_ui2d>
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b54      	ldr	r3, [pc, #336]	@ (8002730 <compensate_humidity+0x22c>)
 80025e0:	f7fe f934 	bl	800084c <__aeabi_ddiv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025f0:	f7fe f802 	bl	80005f8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b4c      	ldr	r3, [pc, #304]	@ (8002734 <compensate_humidity+0x230>)
 8002602:	f7fd fe43 	bl	800028c <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff85 	bl	8000524 <__aeabi_i2d>
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <compensate_humidity+0x22c>)
 8002620:	f7fe f914 	bl	800084c <__aeabi_ddiv>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002630:	f7fd ffe2 	bl	80005f8 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002640:	f7fd ffda 	bl	80005f8 <__aeabi_dmul>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <compensate_humidity+0x230>)
 8002652:	f7fd fe1b 	bl	800028c <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 800265e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002662:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002666:	f7fd ffc7 	bl	80005f8 <__aeabi_dmul>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	461d      	mov	r5, r3
 8002672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800267a:	f7fd ffbd 	bl	80005f8 <__aeabi_dmul>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fd ffb7 	bl	80005f8 <__aeabi_dmul>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	7e1b      	ldrb	r3, [r3, #24]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff34 	bl	8000504 <__aeabi_ui2d>
 800269c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a0:	f7fd ffaa 	bl	80005f8 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <compensate_humidity+0x234>)
 80026b2:	f7fe f8cb 	bl	800084c <__aeabi_ddiv>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	491d      	ldr	r1, [pc, #116]	@ (8002734 <compensate_humidity+0x230>)
 80026c0:	f7fd fde2 	bl	8000288 <__aeabi_dsub>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026cc:	f7fd ff94 	bl	80005f8 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (humidity > humidity_max)
 80026d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80026e0:	f7fe fa1a 	bl	8000b18 <__aeabi_dcmpgt>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 80026ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80026f2:	e00c      	b.n	800270e <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 80026f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80026fc:	f7fe f9ee 	bl	8000adc <__aeabi_dcmplt>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8002706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800270a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    }

    return humidity;
 800270e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	3750      	adds	r7, #80	@ 0x50
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	40590000 	.word	0x40590000
 8002720:	40f2c000 	.word	0x40f2c000
 8002724:	40500000 	.word	0x40500000
 8002728:	40d00000 	.word	0x40d00000
 800272c:	40f00000 	.word	0x40f00000
 8002730:	41900000 	.word	0x41900000
 8002734:	3ff00000 	.word	0x3ff00000
 8002738:	41200000 	.word	0x41200000

0800273c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_TEMP_PRESS_CALIB_DATA;
 8002744:	2388      	movs	r3, #136	@ 0x88
 8002746:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
 8002760:	f107 010c 	add.w	r1, r7, #12
 8002764:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	221a      	movs	r2, #26
 800276c:	f7fe ffcf 	bl	800170e <bme280_get_regs>
 8002770:	4603      	mov	r3, r0
 8002772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BME280_OK)
 8002776:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11d      	bne.n	80027ba <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f848 	bl	800281a <parse_temp_press_calib_data>
        reg_addr = BME280_REG_HUMIDITY_CALIB_DATA;
 800278a:	23e1      	movs	r3, #225	@ 0xe1
 800278c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
 8002790:	f107 010c 	add.w	r1, r7, #12
 8002794:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2207      	movs	r2, #7
 800279c:	f7fe ffb7 	bl	800170e <bme280_get_regs>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 80027a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f8df 	bl	8002978 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80027ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3728      	adds	r7, #40	@ 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80027d4:	2301      	movs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e015      	b.n	8002806 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	441a      	add	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	3b01      	subs	r3, #1
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	440b      	add	r3, r1
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	441a      	add	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	440b      	add	r3, r1
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3e5      	bcc.n	80027da <interleave_reg_addr+0x14>
    }
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	3318      	adds	r3, #24
 8002828:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3301      	adds	r3, #1
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b21a      	sxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b21b      	sxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	b21b      	sxth	r3, r3
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3303      	adds	r3, #3
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3302      	adds	r3, #2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21a      	sxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3305      	adds	r3, #5
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21a      	sxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b21b      	sxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b21a      	sxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3307      	adds	r3, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b21a      	sxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3306      	adds	r3, #6
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b21b      	sxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b21b      	sxth	r3, r3
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3309      	adds	r3, #9
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21a      	sxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3308      	adds	r3, #8
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	4313      	orrs	r3, r2
 80028a8:	b21a      	sxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	330b      	adds	r3, #11
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	b21a      	sxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	330a      	adds	r3, #10
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	330d      	adds	r3, #13
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	330c      	adds	r3, #12
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21a      	sxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	330f      	adds	r3, #15
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	330e      	adds	r3, #14
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3311      	adds	r3, #17
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b21a      	sxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3310      	adds	r3, #16
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21a      	sxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3313      	adds	r3, #19
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	b21a      	sxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3312      	adds	r3, #18
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b21b      	sxth	r3, r3
 8002928:	4313      	orrs	r3, r2
 800292a:	b21a      	sxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3315      	adds	r3, #21
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3314      	adds	r3, #20
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b21b      	sxth	r3, r3
 8002942:	4313      	orrs	r3, r2
 8002944:	b21a      	sxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3317      	adds	r3, #23
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	b21a      	sxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3316      	adds	r3, #22
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b21b      	sxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b21a      	sxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3319      	adds	r3, #25
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	761a      	strb	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3318      	adds	r3, #24
 8002986:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3301      	adds	r3, #1
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	b21a      	sxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b21b      	sxth	r3, r3
 8002998:	4313      	orrs	r3, r2
 800299a:	b21a      	sxth	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3302      	adds	r3, #2
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3303      	adds	r3, #3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80029c8:	8a7a      	ldrh	r2, [r7, #18]
 80029ca:	8a3b      	ldrh	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3305      	adds	r3, #5
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	b29b      	uxth	r3, r3
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80029f0:	89fa      	ldrh	r2, [r7, #14]
 80029f2:	89bb      	ldrh	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3306      	adds	r3, #6
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b25a      	sxtb	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	71fb      	strb	r3, [r7, #7]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002a28:	79fa      	ldrb	r2, [r7, #7]
 8002a2a:	79bb      	ldrb	r3, [r7, #6]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e001      	b.n	8002a3e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <null_ptr_check+0x26>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <null_ptr_check+0x26>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <null_ptr_check+0x26>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8002a70:	23ff      	movs	r3, #255	@ 0xff
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e001      	b.n	8002a7a <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <HAL_Init+0x40>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <HAL_Init+0x40>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	@ (8002ac8 <HAL_Init+0x40>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 f92b 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f000 f808 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abc:	f7fe fc44 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_InitTick+0x54>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_InitTick+0x58>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f935 	bl	8002d5a <HAL_SYSTICK_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00e      	b.n	8002b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d80a      	bhi.n	8002b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b00:	2200      	movs	r2, #0
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f000 f90b 	bl	8002d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b0c:	4a06      	ldr	r2, [pc, #24]	@ (8002b28 <HAL_InitTick+0x5c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000008 	.word	0x20000008
 8002b28:	20000004 	.word	0x20000004

08002b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_IncTick+0x1c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_IncTick+0x20>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a03      	ldr	r2, [pc, #12]	@ (8002b4c <HAL_IncTick+0x20>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	2000024c 	.word	0x2000024c

08002b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b02      	ldr	r3, [pc, #8]	@ (8002b60 <HAL_GetTick+0x10>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	2000024c 	.word	0x2000024c

08002b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d005      	beq.n	8002b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <HAL_Delay+0x44>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b8a:	bf00      	nop
 8002b8c:	f7ff ffe0 	bl	8002b50 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d8f7      	bhi.n	8002b8c <HAL_Delay+0x28>
  {
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000008 	.word	0x20000008

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	db0a      	blt.n	8002c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	490c      	ldr	r1, [pc, #48]	@ (8002c5c <__NVIC_SetPriority+0x4c>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	440b      	add	r3, r1
 8002c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c38:	e00a      	b.n	8002c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4908      	ldr	r1, [pc, #32]	@ (8002c60 <__NVIC_SetPriority+0x50>)
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3b04      	subs	r3, #4
 8002c48:	0112      	lsls	r2, r2, #4
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	761a      	strb	r2, [r3, #24]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f1c3 0307 	rsb	r3, r3, #7
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	bf28      	it	cs
 8002c82:	2304      	movcs	r3, #4
 8002c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d902      	bls.n	8002c94 <NVIC_EncodePriority+0x30>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3b03      	subs	r3, #3
 8002c92:	e000      	b.n	8002c96 <NVIC_EncodePriority+0x32>
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	4313      	orrs	r3, r2
         );
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	@ 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cd8:	d301      	bcc.n	8002cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e00f      	b.n	8002cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <SysTick_Config+0x40>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	f7ff ff90 	bl	8002c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf0:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <SysTick_Config+0x40>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf6:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <SysTick_Config+0x40>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	e000e010 	.word	0xe000e010

08002d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ff49 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d34:	f7ff ff5e 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ff90 	bl	8002c64 <NVIC_EncodePriority>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff5f 	bl	8002c10 <__NVIC_SetPriority>
}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffb0 	bl	8002cc8 <SysTick_Config>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	@ 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e16b      	b.n	8003068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 815a 	bne.w	8003062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80b4 	beq.w	8003062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b5f      	ldr	r3, [pc, #380]	@ (800307c <HAL_GPIO_Init+0x308>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a5e      	ldr	r2, [pc, #376]	@ (800307c <HAL_GPIO_Init+0x308>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800307c <HAL_GPIO_Init+0x308>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a5a      	ldr	r2, [pc, #360]	@ (8003080 <HAL_GPIO_Init+0x30c>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a51      	ldr	r2, [pc, #324]	@ (8003084 <HAL_GPIO_Init+0x310>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a50      	ldr	r2, [pc, #320]	@ (8003088 <HAL_GPIO_Init+0x314>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800308c <HAL_GPIO_Init+0x318>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4e      	ldr	r2, [pc, #312]	@ (8003090 <HAL_GPIO_Init+0x31c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003094 <HAL_GPIO_Init+0x320>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x216>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4c      	ldr	r2, [pc, #304]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x212>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800309c <HAL_GPIO_Init+0x328>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x20e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4a      	ldr	r2, [pc, #296]	@ (80030a0 <HAL_GPIO_Init+0x32c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x20a>
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e00e      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f82:	2306      	movs	r3, #6
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4934      	ldr	r1, [pc, #208]	@ (8003080 <HAL_GPIO_Init+0x30c>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b3a      	ldr	r3, [pc, #232]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a31      	ldr	r2, [pc, #196]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a26      	ldr	r2, [pc, #152]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300e:	4b25      	ldr	r3, [pc, #148]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003032:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003038:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800305c:	4a11      	ldr	r2, [pc, #68]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f ae90 	bls.w	8002d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40020800 	.word	0x40020800
 8003090:	40020c00 	.word	0x40020c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40021400 	.word	0x40021400
 800309c:	40021800 	.word	0x40021800
 80030a0:	40021c00 	.word	0x40021c00
 80030a4:	40013c00 	.word	0x40013c00

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c4:	e003      	b.n	80030ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c6:	887b      	ldrh	r3, [r7, #2]
 80030c8:	041a      	lsls	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e267      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d075      	beq.n	80031e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f6:	4b88      	ldr	r3, [pc, #544]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d00c      	beq.n	800311c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b85      	ldr	r3, [pc, #532]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310e:	4b82      	ldr	r3, [pc, #520]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b7e      	ldr	r3, [pc, #504]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_RCC_OscConfig+0x108>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e242      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x74>
 800313e:	4b76      	ldr	r3, [pc, #472]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a75      	ldr	r2, [pc, #468]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b70      	ldr	r3, [pc, #448]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6f      	ldr	r2, [pc, #444]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6d      	ldr	r3, [pc, #436]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6c      	ldr	r2, [pc, #432]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 8003170:	4b69      	ldr	r3, [pc, #420]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a68      	ldr	r2, [pc, #416]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a65      	ldr	r2, [pc, #404]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fcde 	bl	8002b50 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff fcda 	bl	8002b50 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	@ 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e207      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xc0>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7ff fcca 	bl	8002b50 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff fcc6 	bl	8002b50 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1f3      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0xe8>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b47      	ldr	r3, [pc, #284]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b44      	ldr	r3, [pc, #272]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1c7      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4937      	ldr	r1, [pc, #220]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7ff fc7f 	bl	8002b50 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003256:	f7ff fc7b 	bl	8002b50 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1a8      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4925      	ldr	r1, [pc, #148]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7ff fc5e 	bl	8002b50 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003298:	f7ff fc5a 	bl	8002b50 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e187      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d036      	beq.n	8003330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x248>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7ff fc3e 	bl	8002b50 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d8:	f7ff fc3a 	bl	8002b50 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e167      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x200>
 80032f6:	e01b      	b.n	8003330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCC_OscConfig+0x248>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7ff fc27 	bl	8002b50 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	e00e      	b.n	8003324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003306:	f7ff fc23 	bl	8002b50 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d907      	bls.n	8003324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e150      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	42470000 	.word	0x42470000
 8003320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ea      	bne.n	8003306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8097 	beq.w	800346c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b81      	ldr	r3, [pc, #516]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b7d      	ldr	r3, [pc, #500]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a7c      	ldr	r2, [pc, #496]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b77      	ldr	r3, [pc, #476]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4b74      	ldr	r3, [pc, #464]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a73      	ldr	r2, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7ff fbe3 	bl	8002b50 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7ff fbdf 	bl	8002b50 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e10c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2ea>
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a63      	ldr	r2, [pc, #396]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x30c>
 80033ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a5b      	ldr	r2, [pc, #364]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033e4:	4b58      	ldr	r3, [pc, #352]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a57      	ldr	r2, [pc, #348]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f0:	4b55      	ldr	r3, [pc, #340]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4a54      	ldr	r2, [pc, #336]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7ff fba4 	bl	8002b50 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7ff fba0 	bl	8002b50 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0cb      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCC_OscConfig+0x334>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7ff fb8e 	bl	8002b50 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7ff fb8a 	bl	8002b50 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0b5      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	4b3e      	ldr	r3, [pc, #248]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b39      	ldr	r3, [pc, #228]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	4a38      	ldr	r2, [pc, #224]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a1 	beq.w	80035b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003476:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d05c      	beq.n	800353c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d141      	bne.n	800350e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7ff fb5e 	bl	8002b50 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7ff fb5a 	bl	8002b50 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e087      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	491b      	ldr	r1, [pc, #108]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7ff fb33 	bl	8002b50 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7ff fb2f 	bl	8002b50 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e05c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x416>
 800350c:	e054      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7ff fb1c 	bl	8002b50 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7ff fb18 	bl	8002b50 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e045      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e038      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
 8003550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x4ec>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d028      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d121      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d11a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800358a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cc      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b68      	ldr	r3, [pc, #416]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d90c      	bls.n	8003604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b65      	ldr	r3, [pc, #404]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d044      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b37      	ldr	r3, [pc, #220]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4934      	ldr	r1, [pc, #208]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7ff fa4a 	bl	8002b50 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7ff fa46 	bl	8002b50 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d20c      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f821 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490a      	ldr	r1, [pc, #40]	@ (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff f9ac 	bl	8002acc <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	08007084 	.word	0x08007084
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b094      	sub	sp, #80	@ 0x50
 800379a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a0:	2300      	movs	r3, #0
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a4:	2300      	movs	r3, #0
 80037a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ac:	4b7c      	ldr	r3, [pc, #496]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d00d      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x40>
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	f200 80e7 	bhi.w	800398c <HAL_RCC_GetSysClockFreq+0x1f8>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x3a>
 80037c6:	e0e1      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x210>)
 80037ca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80037cc:	e0e1      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ce:	4b76      	ldr	r3, [pc, #472]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x214>)
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037d2:	e0de      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d4:	4b72      	ldr	r3, [pc, #456]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037de:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d065      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b6d      	ldr	r3, [pc, #436]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	2200      	movs	r2, #0
 80037f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
 8003802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	0159      	lsls	r1, r3, #5
 8003814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003818:	0150      	lsls	r0, r2, #5
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4621      	mov	r1, r4
 8003820:	1a51      	subs	r1, r2, r1
 8003822:	6139      	str	r1, [r7, #16]
 8003824:	4629      	mov	r1, r5
 8003826:	eb63 0301 	sbc.w	r3, r3, r1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003838:	4659      	mov	r1, fp
 800383a:	018b      	lsls	r3, r1, #6
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003842:	4651      	mov	r1, sl
 8003844:	018a      	lsls	r2, r1, #6
 8003846:	46d4      	mov	ip, sl
 8003848:	ebb2 080c 	subs.w	r8, r2, ip
 800384c:	4659      	mov	r1, fp
 800384e:	eb63 0901 	sbc.w	r9, r3, r1
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003866:	4690      	mov	r8, r2
 8003868:	4699      	mov	r9, r3
 800386a:	4623      	mov	r3, r4
 800386c:	eb18 0303 	adds.w	r3, r8, r3
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	462b      	mov	r3, r5
 8003874:	eb49 0303 	adc.w	r3, r9, r3
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003886:	4629      	mov	r1, r5
 8003888:	024b      	lsls	r3, r1, #9
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	4604      	mov	r4, r0
 8003890:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003894:	4601      	mov	r1, r0
 8003896:	024a      	lsls	r2, r1, #9
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800389e:	2200      	movs	r2, #0
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a8:	f7fd f97e 	bl	8000ba8 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b4:	e05c      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b3a      	ldr	r3, [pc, #232]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	2200      	movs	r2, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	4611      	mov	r1, r2
 80038c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80038cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	0159      	lsls	r1, r3, #5
 80038de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e2:	0150      	lsls	r0, r2, #5
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	46c4      	mov	ip, r8
 80038ea:	ebb2 0a0c 	subs.w	sl, r2, ip
 80038ee:	4640      	mov	r0, r8
 80038f0:	4649      	mov	r1, r9
 80038f2:	468c      	mov	ip, r1
 80038f4:	eb63 0b0c 	sbc.w	fp, r3, ip
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800390c:	ebb2 040a 	subs.w	r4, r2, sl
 8003910:	eb63 050b 	sbc.w	r5, r3, fp
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	00eb      	lsls	r3, r5, #3
 800391e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003922:	00e2      	lsls	r2, r4, #3
 8003924:	4614      	mov	r4, r2
 8003926:	461d      	mov	r5, r3
 8003928:	4603      	mov	r3, r0
 800392a:	18e3      	adds	r3, r4, r3
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	460b      	mov	r3, r1
 8003930:	eb45 0303 	adc.w	r3, r5, r3
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003942:	4629      	mov	r1, r5
 8003944:	028b      	lsls	r3, r1, #10
 8003946:	4620      	mov	r0, r4
 8003948:	4629      	mov	r1, r5
 800394a:	4604      	mov	r4, r0
 800394c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003950:	4601      	mov	r1, r0
 8003952:	028a      	lsls	r2, r1, #10
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395a:	2200      	movs	r2, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	61fa      	str	r2, [r7, #28]
 8003960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003964:	f7fd f920 	bl	8000ba8 <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4613      	mov	r3, r2
 800396e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800398a:	e002      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x210>)
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003994:	4618      	mov	r0, r3
 8003996:	3750      	adds	r7, #80	@ 0x50
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	00f42400 	.word	0x00f42400
 80039a8:	007a1200 	.word	0x007a1200

080039ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07b      	b.n	8003ab6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ce:	d009      	beq.n	80039e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
 80039d6:	e005      	b.n	80039e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fcca 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a68:	ea42 0103 	orr.w	r1, r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	f003 0104 	and.w	r1, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	f003 0210 	and.w	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b088      	sub	sp, #32
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_SPI_Transmit+0x22>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e12d      	b.n	8003d3c <HAL_SPI_Transmit+0x27e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae8:	f7ff f832 	bl	8002b50 <HAL_GetTick>
 8003aec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d002      	beq.n	8003b04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
 8003b00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b02:	e116      	b.n	8003d32 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x52>
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b14:	e10d      	b.n	8003d32 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b5c:	d10f      	bne.n	8003b7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d007      	beq.n	8003b9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba4:	d14f      	bne.n	8003c46 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_SPI_Transmit+0xf6>
 8003bae:	8afb      	ldrh	r3, [r7, #22]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d142      	bne.n	8003c3a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	881a      	ldrh	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bd8:	e02f      	b.n	8003c3a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d112      	bne.n	8003c0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	881a      	ldrh	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	1c9a      	adds	r2, r3, #2
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c0c:	e015      	b.n	8003c3a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0e:	f7fe ff9f 	bl	8002b50 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d803      	bhi.n	8003c26 <HAL_SPI_Transmit+0x168>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d102      	bne.n	8003c2c <HAL_SPI_Transmit+0x16e>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c38:	e07b      	b.n	8003d32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ca      	bne.n	8003bda <HAL_SPI_Transmit+0x11c>
 8003c44:	e050      	b.n	8003ce8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Transmit+0x196>
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d144      	bne.n	8003cde <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	7812      	ldrb	r2, [r2, #0]
 8003c60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c7a:	e030      	b.n	8003cde <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d113      	bne.n	8003cb2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cb0:	e015      	b.n	8003cde <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb2:	f7fe ff4d 	bl	8002b50 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d803      	bhi.n	8003cca <HAL_SPI_Transmit+0x20c>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d102      	bne.n	8003cd0 <HAL_SPI_Transmit+0x212>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003cdc:	e029      	b.n	8003d32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1c9      	bne.n	8003c7c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fbdf 	bl	80044b0 <SPI_EndRxTxTransaction>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e003      	b.n	8003d32 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003d3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
 8003d66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d68:	e0fb      	b.n	8003f62 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d72:	d112      	bne.n	8003d9a <HAL_SPI_Receive+0x56>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f8ef 	bl	8003f74 <HAL_SPI_TransmitReceive>
 8003d96:	4603      	mov	r3, r0
 8003d98:	e0e8      	b.n	8003f6c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_SPI_Receive+0x64>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0e1      	b.n	8003f6c <HAL_SPI_Receive+0x228>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db0:	f7fe fece 	bl	8002b50 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Receive+0x7e>
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dc6:	e0cc      	b.n	8003f62 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0e:	d10f      	bne.n	8003e30 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	d007      	beq.n	8003e4e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d16a      	bne.n	8003f2c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e56:	e032      	b.n	8003ebe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d115      	bne.n	8003e92 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f103 020c 	add.w	r2, r3, #12
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e90:	e015      	b.n	8003ebe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e92:	f7fe fe5d 	bl	8002b50 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d803      	bhi.n	8003eaa <HAL_SPI_Receive+0x166>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d102      	bne.n	8003eb0 <HAL_SPI_Receive+0x16c>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ebc:	e051      	b.n	8003f62 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1c7      	bne.n	8003e58 <HAL_SPI_Receive+0x114>
 8003ec8:	e035      	b.n	8003f36 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d113      	bne.n	8003f00 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003efe:	e015      	b.n	8003f2c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f00:	f7fe fe26 	bl	8002b50 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d803      	bhi.n	8003f18 <HAL_SPI_Receive+0x1d4>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Receive+0x1da>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f2a:	e01a      	b.n	8003f62 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1c9      	bne.n	8003eca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fa52 	bl	80043e4 <SPI_EndRxTransaction>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
 8003f58:	e003      	b.n	8003f62 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	@ 0x30
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f82:	2301      	movs	r3, #1
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x26>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e198      	b.n	80042cc <HAL_SPI_TransmitReceive+0x358>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa2:	f7fe fdd5 	bl	8002b50 <HAL_GetTick>
 8003fa6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d00f      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x70>
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fca:	d107      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x68>
 8003fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d003      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003fe2:	e16d      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x82>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x82>
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ffc:	e160      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b04      	cmp	r3, #4
 8004008:	d003      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2205      	movs	r2, #5
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	887a      	ldrh	r2, [r7, #2]
 8004022:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	887a      	ldrh	r2, [r7, #2]
 800403a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d007      	beq.n	8004066 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800406e:	d17c      	bne.n	800416a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_TransmitReceive+0x10a>
 8004078:	8b7b      	ldrh	r3, [r7, #26]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d16a      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a2:	e057      	b.n	8004154 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d11b      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x176>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d016      	beq.n	80040ea <HAL_SPI_TransmitReceive+0x176>
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d113      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	881a      	ldrh	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	1c9a      	adds	r2, r3, #2
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d119      	bne.n	800412c <HAL_SPI_TransmitReceive+0x1b8>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d014      	beq.n	800412c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	b292      	uxth	r2, r2
 800410e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004128:	2301      	movs	r3, #1
 800412a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800412c:	f7fe fd10 	bl	8002b50 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004138:	429a      	cmp	r2, r3
 800413a:	d80b      	bhi.n	8004154 <HAL_SPI_TransmitReceive+0x1e0>
 800413c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d007      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004152:	e0b5      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1a2      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x130>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d19d      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x130>
 8004168:	e080      	b.n	800426c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x204>
 8004172:	8b7b      	ldrh	r3, [r7, #26]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d16f      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	e05b      	b.n	8004258 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d11c      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x274>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d017      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x274>
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d114      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	7812      	ldrb	r2, [r2, #0]
 80041ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d119      	bne.n	800422a <HAL_SPI_TransmitReceive+0x2b6>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d014      	beq.n	800422a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004226:	2301      	movs	r3, #1
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800422a:	f7fe fc91 	bl	8002b50 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004236:	429a      	cmp	r2, r3
 8004238:	d803      	bhi.n	8004242 <HAL_SPI_TransmitReceive+0x2ce>
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d102      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x2d4>
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d107      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004256:	e033      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d19e      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x22c>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d199      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800426c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f91d 	bl	80044b0 <SPI_EndRxTxTransaction>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d006      	beq.n	800428a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004288:	e01a      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b6:	e003      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80042c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3730      	adds	r7, #48	@ 0x30
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042e4:	f7fe fc34 	bl	8002b50 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042f4:	f7fe fc2c 	bl	8002b50 <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	0d1b      	lsrs	r3, r3, #20
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	e054      	b.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d050      	beq.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004314:	f7fe fc1c 	bl	8002b50 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	d902      	bls.n	800432a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d13d      	bne.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004342:	d111      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800434c:	d004      	beq.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004356:	d107      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004370:	d10f      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e017      	b.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d19b      	bne.n	800430c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000000 	.word	0x20000000

080043e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f8:	d111      	bne.n	800441e <SPI_EndRxTransaction+0x3a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004402:	d004      	beq.n	800440e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440c:	d107      	bne.n	800441e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800441c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004426:	d12a      	bne.n	800447e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d012      	beq.n	8004458 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff ff49 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02d      	beq.n	80044a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e026      	b.n	80044a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	2101      	movs	r1, #1
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff ff36 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01a      	beq.n	80044a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e013      	b.n	80044a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	2101      	movs	r1, #1
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff ff23 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e000      	b.n	80044a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2201      	movs	r2, #1
 80044c4:	2102      	movs	r1, #2
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff ff04 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e032      	b.n	8004548 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004550 <SPI_EndRxTxTransaction+0xa0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <SPI_EndRxTxTransaction+0xa4>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	0d5b      	lsrs	r3, r3, #21
 80044ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004500:	d112      	bne.n	8004528 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2200      	movs	r2, #0
 800450a:	2180      	movs	r1, #128	@ 0x80
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fee1 	bl	80042d4 <SPI_WaitFlagStateUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e00f      	b.n	8004548 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3b01      	subs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453e:	2b80      	cmp	r3, #128	@ 0x80
 8004540:	d0f2      	beq.n	8004528 <SPI_EndRxTxTransaction+0x78>
 8004542:	e000      	b.n	8004546 <SPI_EndRxTxTransaction+0x96>
        break;
 8004544:	bf00      	nop
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000000 	.word	0x20000000
 8004554:	165e9f81 	.word	0x165e9f81

08004558 <__cvt>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	461d      	mov	r5, r3
 8004562:	4614      	mov	r4, r2
 8004564:	bfbc      	itt	lt
 8004566:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800456a:	4614      	movlt	r4, r2
 800456c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800456e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004570:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004574:	bfb6      	itet	lt
 8004576:	461d      	movlt	r5, r3
 8004578:	2300      	movge	r3, #0
 800457a:	232d      	movlt	r3, #45	@ 0x2d
 800457c:	7013      	strb	r3, [r2, #0]
 800457e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004580:	f023 0820 	bic.w	r8, r3, #32
 8004584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004588:	d005      	beq.n	8004596 <__cvt+0x3e>
 800458a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800458e:	d100      	bne.n	8004592 <__cvt+0x3a>
 8004590:	3601      	adds	r6, #1
 8004592:	2302      	movs	r3, #2
 8004594:	e000      	b.n	8004598 <__cvt+0x40>
 8004596:	2303      	movs	r3, #3
 8004598:	aa07      	add	r2, sp, #28
 800459a:	9204      	str	r2, [sp, #16]
 800459c:	aa06      	add	r2, sp, #24
 800459e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045a2:	e9cd 3600 	strd	r3, r6, [sp]
 80045a6:	4622      	mov	r2, r4
 80045a8:	462b      	mov	r3, r5
 80045aa:	f000 ff41 	bl	8005430 <_dtoa_r>
 80045ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045b2:	4607      	mov	r7, r0
 80045b4:	d119      	bne.n	80045ea <__cvt+0x92>
 80045b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80045b8:	07db      	lsls	r3, r3, #31
 80045ba:	d50e      	bpl.n	80045da <__cvt+0x82>
 80045bc:	eb00 0906 	add.w	r9, r0, r6
 80045c0:	2200      	movs	r2, #0
 80045c2:	2300      	movs	r3, #0
 80045c4:	4620      	mov	r0, r4
 80045c6:	4629      	mov	r1, r5
 80045c8:	f7fc fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80045cc:	b108      	cbz	r0, 80045d2 <__cvt+0x7a>
 80045ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80045d2:	2230      	movs	r2, #48	@ 0x30
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	454b      	cmp	r3, r9
 80045d8:	d31e      	bcc.n	8004618 <__cvt+0xc0>
 80045da:	9b07      	ldr	r3, [sp, #28]
 80045dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80045de:	1bdb      	subs	r3, r3, r7
 80045e0:	4638      	mov	r0, r7
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	b008      	add	sp, #32
 80045e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045ee:	eb00 0906 	add.w	r9, r0, r6
 80045f2:	d1e5      	bne.n	80045c0 <__cvt+0x68>
 80045f4:	7803      	ldrb	r3, [r0, #0]
 80045f6:	2b30      	cmp	r3, #48	@ 0x30
 80045f8:	d10a      	bne.n	8004610 <__cvt+0xb8>
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	4620      	mov	r0, r4
 8004600:	4629      	mov	r1, r5
 8004602:	f7fc fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8004606:	b918      	cbnz	r0, 8004610 <__cvt+0xb8>
 8004608:	f1c6 0601 	rsb	r6, r6, #1
 800460c:	f8ca 6000 	str.w	r6, [sl]
 8004610:	f8da 3000 	ldr.w	r3, [sl]
 8004614:	4499      	add	r9, r3
 8004616:	e7d3      	b.n	80045c0 <__cvt+0x68>
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	9107      	str	r1, [sp, #28]
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e7d9      	b.n	80045d4 <__cvt+0x7c>

08004620 <__exponent>:
 8004620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004622:	2900      	cmp	r1, #0
 8004624:	bfba      	itte	lt
 8004626:	4249      	neglt	r1, r1
 8004628:	232d      	movlt	r3, #45	@ 0x2d
 800462a:	232b      	movge	r3, #43	@ 0x2b
 800462c:	2909      	cmp	r1, #9
 800462e:	7002      	strb	r2, [r0, #0]
 8004630:	7043      	strb	r3, [r0, #1]
 8004632:	dd29      	ble.n	8004688 <__exponent+0x68>
 8004634:	f10d 0307 	add.w	r3, sp, #7
 8004638:	461d      	mov	r5, r3
 800463a:	270a      	movs	r7, #10
 800463c:	461a      	mov	r2, r3
 800463e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004642:	fb07 1416 	mls	r4, r7, r6, r1
 8004646:	3430      	adds	r4, #48	@ 0x30
 8004648:	f802 4c01 	strb.w	r4, [r2, #-1]
 800464c:	460c      	mov	r4, r1
 800464e:	2c63      	cmp	r4, #99	@ 0x63
 8004650:	f103 33ff 	add.w	r3, r3, #4294967295
 8004654:	4631      	mov	r1, r6
 8004656:	dcf1      	bgt.n	800463c <__exponent+0x1c>
 8004658:	3130      	adds	r1, #48	@ 0x30
 800465a:	1e94      	subs	r4, r2, #2
 800465c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004660:	1c41      	adds	r1, r0, #1
 8004662:	4623      	mov	r3, r4
 8004664:	42ab      	cmp	r3, r5
 8004666:	d30a      	bcc.n	800467e <__exponent+0x5e>
 8004668:	f10d 0309 	add.w	r3, sp, #9
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	42ac      	cmp	r4, r5
 8004670:	bf88      	it	hi
 8004672:	2300      	movhi	r3, #0
 8004674:	3302      	adds	r3, #2
 8004676:	4403      	add	r3, r0
 8004678:	1a18      	subs	r0, r3, r0
 800467a:	b003      	add	sp, #12
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004682:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004686:	e7ed      	b.n	8004664 <__exponent+0x44>
 8004688:	2330      	movs	r3, #48	@ 0x30
 800468a:	3130      	adds	r1, #48	@ 0x30
 800468c:	7083      	strb	r3, [r0, #2]
 800468e:	70c1      	strb	r1, [r0, #3]
 8004690:	1d03      	adds	r3, r0, #4
 8004692:	e7f1      	b.n	8004678 <__exponent+0x58>

08004694 <_printf_float>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	b091      	sub	sp, #68	@ 0x44
 800469a:	460c      	mov	r4, r1
 800469c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80046a0:	4616      	mov	r6, r2
 80046a2:	461f      	mov	r7, r3
 80046a4:	4605      	mov	r5, r0
 80046a6:	f000 fdc1 	bl	800522c <_localeconv_r>
 80046aa:	6803      	ldr	r3, [r0, #0]
 80046ac:	9308      	str	r3, [sp, #32]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb fdde 	bl	8000270 <strlen>
 80046b4:	2300      	movs	r3, #0
 80046b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80046b8:	f8d8 3000 	ldr.w	r3, [r8]
 80046bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80046be:	3307      	adds	r3, #7
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	f103 0208 	add.w	r2, r3, #8
 80046c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046cc:	f8d4 b000 	ldr.w	fp, [r4]
 80046d0:	f8c8 2000 	str.w	r2, [r8]
 80046d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80046e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046ea:	4b9d      	ldr	r3, [pc, #628]	@ (8004960 <_printf_float+0x2cc>)
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295
 80046f0:	f7fc fa1c 	bl	8000b2c <__aeabi_dcmpun>
 80046f4:	bb70      	cbnz	r0, 8004754 <_printf_float+0xc0>
 80046f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046fa:	4b99      	ldr	r3, [pc, #612]	@ (8004960 <_printf_float+0x2cc>)
 80046fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004700:	f7fc f9f6 	bl	8000af0 <__aeabi_dcmple>
 8004704:	bb30      	cbnz	r0, 8004754 <_printf_float+0xc0>
 8004706:	2200      	movs	r2, #0
 8004708:	2300      	movs	r3, #0
 800470a:	4640      	mov	r0, r8
 800470c:	4649      	mov	r1, r9
 800470e:	f7fc f9e5 	bl	8000adc <__aeabi_dcmplt>
 8004712:	b110      	cbz	r0, 800471a <_printf_float+0x86>
 8004714:	232d      	movs	r3, #45	@ 0x2d
 8004716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800471a:	4a92      	ldr	r2, [pc, #584]	@ (8004964 <_printf_float+0x2d0>)
 800471c:	4b92      	ldr	r3, [pc, #584]	@ (8004968 <_printf_float+0x2d4>)
 800471e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004722:	bf94      	ite	ls
 8004724:	4690      	movls	r8, r2
 8004726:	4698      	movhi	r8, r3
 8004728:	2303      	movs	r3, #3
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	f02b 0304 	bic.w	r3, fp, #4
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	f04f 0900 	mov.w	r9, #0
 8004736:	9700      	str	r7, [sp, #0]
 8004738:	4633      	mov	r3, r6
 800473a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800473c:	4621      	mov	r1, r4
 800473e:	4628      	mov	r0, r5
 8004740:	f000 f9d4 	bl	8004aec <_printf_common>
 8004744:	3001      	adds	r0, #1
 8004746:	f040 808f 	bne.w	8004868 <_printf_float+0x1d4>
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	b011      	add	sp, #68	@ 0x44
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fc f9e6 	bl	8000b2c <__aeabi_dcmpun>
 8004760:	b140      	cbz	r0, 8004774 <_printf_float+0xe0>
 8004762:	464b      	mov	r3, r9
 8004764:	2b00      	cmp	r3, #0
 8004766:	bfbc      	itt	lt
 8004768:	232d      	movlt	r3, #45	@ 0x2d
 800476a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800476e:	4a7f      	ldr	r2, [pc, #508]	@ (800496c <_printf_float+0x2d8>)
 8004770:	4b7f      	ldr	r3, [pc, #508]	@ (8004970 <_printf_float+0x2dc>)
 8004772:	e7d4      	b.n	800471e <_printf_float+0x8a>
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800477c:	d13f      	bne.n	80047fe <_printf_float+0x16a>
 800477e:	2306      	movs	r3, #6
 8004780:	6063      	str	r3, [r4, #4]
 8004782:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004786:	2200      	movs	r2, #0
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	9206      	str	r2, [sp, #24]
 800478c:	aa0e      	add	r2, sp, #56	@ 0x38
 800478e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004792:	aa0d      	add	r2, sp, #52	@ 0x34
 8004794:	9203      	str	r2, [sp, #12]
 8004796:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800479a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4642      	mov	r2, r8
 80047a4:	464b      	mov	r3, r9
 80047a6:	4628      	mov	r0, r5
 80047a8:	910a      	str	r1, [sp, #40]	@ 0x28
 80047aa:	f7ff fed5 	bl	8004558 <__cvt>
 80047ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047b0:	2947      	cmp	r1, #71	@ 0x47
 80047b2:	4680      	mov	r8, r0
 80047b4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80047b6:	d128      	bne.n	800480a <_printf_float+0x176>
 80047b8:	1cc8      	adds	r0, r1, #3
 80047ba:	db02      	blt.n	80047c2 <_printf_float+0x12e>
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	4299      	cmp	r1, r3
 80047c0:	dd40      	ble.n	8004844 <_printf_float+0x1b0>
 80047c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80047c6:	fa5f fa8a 	uxtb.w	sl, sl
 80047ca:	3901      	subs	r1, #1
 80047cc:	4652      	mov	r2, sl
 80047ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047d2:	910d      	str	r1, [sp, #52]	@ 0x34
 80047d4:	f7ff ff24 	bl	8004620 <__exponent>
 80047d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047da:	1813      	adds	r3, r2, r0
 80047dc:	2a01      	cmp	r2, #1
 80047de:	4681      	mov	r9, r0
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	dc02      	bgt.n	80047ea <_printf_float+0x156>
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	07d2      	lsls	r2, r2, #31
 80047e8:	d501      	bpl.n	80047ee <_printf_float+0x15a>
 80047ea:	3301      	adds	r3, #1
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d09f      	beq.n	8004736 <_printf_float+0xa2>
 80047f6:	232d      	movs	r3, #45	@ 0x2d
 80047f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047fc:	e79b      	b.n	8004736 <_printf_float+0xa2>
 80047fe:	2947      	cmp	r1, #71	@ 0x47
 8004800:	d1bf      	bne.n	8004782 <_printf_float+0xee>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1bd      	bne.n	8004782 <_printf_float+0xee>
 8004806:	2301      	movs	r3, #1
 8004808:	e7ba      	b.n	8004780 <_printf_float+0xec>
 800480a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800480e:	d9dc      	bls.n	80047ca <_printf_float+0x136>
 8004810:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004814:	d118      	bne.n	8004848 <_printf_float+0x1b4>
 8004816:	2900      	cmp	r1, #0
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	dd0b      	ble.n	8004834 <_printf_float+0x1a0>
 800481c:	6121      	str	r1, [r4, #16]
 800481e:	b913      	cbnz	r3, 8004826 <_printf_float+0x192>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	07d0      	lsls	r0, r2, #31
 8004824:	d502      	bpl.n	800482c <_printf_float+0x198>
 8004826:	3301      	adds	r3, #1
 8004828:	440b      	add	r3, r1
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800482e:	f04f 0900 	mov.w	r9, #0
 8004832:	e7dc      	b.n	80047ee <_printf_float+0x15a>
 8004834:	b913      	cbnz	r3, 800483c <_printf_float+0x1a8>
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	07d2      	lsls	r2, r2, #31
 800483a:	d501      	bpl.n	8004840 <_printf_float+0x1ac>
 800483c:	3302      	adds	r3, #2
 800483e:	e7f4      	b.n	800482a <_printf_float+0x196>
 8004840:	2301      	movs	r3, #1
 8004842:	e7f2      	b.n	800482a <_printf_float+0x196>
 8004844:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800484a:	4299      	cmp	r1, r3
 800484c:	db05      	blt.n	800485a <_printf_float+0x1c6>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	6121      	str	r1, [r4, #16]
 8004852:	07d8      	lsls	r0, r3, #31
 8004854:	d5ea      	bpl.n	800482c <_printf_float+0x198>
 8004856:	1c4b      	adds	r3, r1, #1
 8004858:	e7e7      	b.n	800482a <_printf_float+0x196>
 800485a:	2900      	cmp	r1, #0
 800485c:	bfd4      	ite	le
 800485e:	f1c1 0202 	rsble	r2, r1, #2
 8004862:	2201      	movgt	r2, #1
 8004864:	4413      	add	r3, r2
 8004866:	e7e0      	b.n	800482a <_printf_float+0x196>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	055a      	lsls	r2, r3, #21
 800486c:	d407      	bmi.n	800487e <_printf_float+0x1ea>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	4642      	mov	r2, r8
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	d12b      	bne.n	80048d4 <_printf_float+0x240>
 800487c:	e765      	b.n	800474a <_printf_float+0xb6>
 800487e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004882:	f240 80dd 	bls.w	8004a40 <_printf_float+0x3ac>
 8004886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	f7fc f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004892:	2800      	cmp	r0, #0
 8004894:	d033      	beq.n	80048fe <_printf_float+0x26a>
 8004896:	4a37      	ldr	r2, [pc, #220]	@ (8004974 <_printf_float+0x2e0>)
 8004898:	2301      	movs	r3, #1
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	f43f af52 	beq.w	800474a <_printf_float+0xb6>
 80048a6:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80048aa:	4543      	cmp	r3, r8
 80048ac:	db02      	blt.n	80048b4 <_printf_float+0x220>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	07d8      	lsls	r0, r3, #31
 80048b2:	d50f      	bpl.n	80048d4 <_printf_float+0x240>
 80048b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af43 	beq.w	800474a <_printf_float+0xb6>
 80048c4:	f04f 0900 	mov.w	r9, #0
 80048c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80048cc:	f104 0a1a 	add.w	sl, r4, #26
 80048d0:	45c8      	cmp	r8, r9
 80048d2:	dc09      	bgt.n	80048e8 <_printf_float+0x254>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	f100 8103 	bmi.w	8004ae2 <_printf_float+0x44e>
 80048dc:	68e0      	ldr	r0, [r4, #12]
 80048de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048e0:	4298      	cmp	r0, r3
 80048e2:	bfb8      	it	lt
 80048e4:	4618      	movlt	r0, r3
 80048e6:	e732      	b.n	800474e <_printf_float+0xba>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4652      	mov	r2, sl
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f af29 	beq.w	800474a <_printf_float+0xb6>
 80048f8:	f109 0901 	add.w	r9, r9, #1
 80048fc:	e7e8      	b.n	80048d0 <_printf_float+0x23c>
 80048fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004900:	2b00      	cmp	r3, #0
 8004902:	dc39      	bgt.n	8004978 <_printf_float+0x2e4>
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <_printf_float+0x2e0>)
 8004906:	2301      	movs	r3, #1
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af1b 	beq.w	800474a <_printf_float+0xb6>
 8004914:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004918:	ea59 0303 	orrs.w	r3, r9, r3
 800491c:	d102      	bne.n	8004924 <_printf_float+0x290>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	07d9      	lsls	r1, r3, #31
 8004922:	d5d7      	bpl.n	80048d4 <_printf_float+0x240>
 8004924:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af0b 	beq.w	800474a <_printf_float+0xb6>
 8004934:	f04f 0a00 	mov.w	sl, #0
 8004938:	f104 0b1a 	add.w	fp, r4, #26
 800493c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800493e:	425b      	negs	r3, r3
 8004940:	4553      	cmp	r3, sl
 8004942:	dc01      	bgt.n	8004948 <_printf_float+0x2b4>
 8004944:	464b      	mov	r3, r9
 8004946:	e793      	b.n	8004870 <_printf_float+0x1dc>
 8004948:	2301      	movs	r3, #1
 800494a:	465a      	mov	r2, fp
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f aef9 	beq.w	800474a <_printf_float+0xb6>
 8004958:	f10a 0a01 	add.w	sl, sl, #1
 800495c:	e7ee      	b.n	800493c <_printf_float+0x2a8>
 800495e:	bf00      	nop
 8004960:	7fefffff 	.word	0x7fefffff
 8004964:	08007094 	.word	0x08007094
 8004968:	08007098 	.word	0x08007098
 800496c:	0800709c 	.word	0x0800709c
 8004970:	080070a0 	.word	0x080070a0
 8004974:	080070a4 	.word	0x080070a4
 8004978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800497a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800497e:	4553      	cmp	r3, sl
 8004980:	bfa8      	it	ge
 8004982:	4653      	movge	r3, sl
 8004984:	2b00      	cmp	r3, #0
 8004986:	4699      	mov	r9, r3
 8004988:	dc36      	bgt.n	80049f8 <_printf_float+0x364>
 800498a:	f04f 0b00 	mov.w	fp, #0
 800498e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004992:	f104 021a 	add.w	r2, r4, #26
 8004996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004998:	930a      	str	r3, [sp, #40]	@ 0x28
 800499a:	eba3 0309 	sub.w	r3, r3, r9
 800499e:	455b      	cmp	r3, fp
 80049a0:	dc31      	bgt.n	8004a06 <_printf_float+0x372>
 80049a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049a4:	459a      	cmp	sl, r3
 80049a6:	dc3a      	bgt.n	8004a1e <_printf_float+0x38a>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	07da      	lsls	r2, r3, #31
 80049ac:	d437      	bmi.n	8004a1e <_printf_float+0x38a>
 80049ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049b0:	ebaa 0903 	sub.w	r9, sl, r3
 80049b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049b6:	ebaa 0303 	sub.w	r3, sl, r3
 80049ba:	4599      	cmp	r9, r3
 80049bc:	bfa8      	it	ge
 80049be:	4699      	movge	r9, r3
 80049c0:	f1b9 0f00 	cmp.w	r9, #0
 80049c4:	dc33      	bgt.n	8004a2e <_printf_float+0x39a>
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ce:	f104 0b1a 	add.w	fp, r4, #26
 80049d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049d4:	ebaa 0303 	sub.w	r3, sl, r3
 80049d8:	eba3 0309 	sub.w	r3, r3, r9
 80049dc:	4543      	cmp	r3, r8
 80049de:	f77f af79 	ble.w	80048d4 <_printf_float+0x240>
 80049e2:	2301      	movs	r3, #1
 80049e4:	465a      	mov	r2, fp
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f aeac 	beq.w	800474a <_printf_float+0xb6>
 80049f2:	f108 0801 	add.w	r8, r8, #1
 80049f6:	e7ec      	b.n	80049d2 <_printf_float+0x33e>
 80049f8:	4642      	mov	r2, r8
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	d1c2      	bne.n	800498a <_printf_float+0x2f6>
 8004a04:	e6a1      	b.n	800474a <_printf_float+0xb6>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f ae9a 	beq.w	800474a <_printf_float+0xb6>
 8004a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a18:	f10b 0b01 	add.w	fp, fp, #1
 8004a1c:	e7bb      	b.n	8004996 <_printf_float+0x302>
 8004a1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d1c0      	bne.n	80049ae <_printf_float+0x31a>
 8004a2c:	e68d      	b.n	800474a <_printf_float+0xb6>
 8004a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a30:	464b      	mov	r3, r9
 8004a32:	4442      	add	r2, r8
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d1c3      	bne.n	80049c6 <_printf_float+0x332>
 8004a3e:	e684      	b.n	800474a <_printf_float+0xb6>
 8004a40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a44:	f1ba 0f01 	cmp.w	sl, #1
 8004a48:	dc01      	bgt.n	8004a4e <_printf_float+0x3ba>
 8004a4a:	07db      	lsls	r3, r3, #31
 8004a4c:	d536      	bpl.n	8004abc <_printf_float+0x428>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4642      	mov	r2, r8
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f ae76 	beq.w	800474a <_printf_float+0xb6>
 8004a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f ae6e 	beq.w	800474a <_printf_float+0xb6>
 8004a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a72:	2200      	movs	r2, #0
 8004a74:	2300      	movs	r3, #0
 8004a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a7a:	f7fc f825 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a7e:	b9c0      	cbnz	r0, 8004ab2 <_printf_float+0x41e>
 8004a80:	4653      	mov	r3, sl
 8004a82:	f108 0201 	add.w	r2, r8, #1
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d10c      	bne.n	8004aaa <_printf_float+0x416>
 8004a90:	e65b      	b.n	800474a <_printf_float+0xb6>
 8004a92:	2301      	movs	r3, #1
 8004a94:	465a      	mov	r2, fp
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f ae54 	beq.w	800474a <_printf_float+0xb6>
 8004aa2:	f108 0801 	add.w	r8, r8, #1
 8004aa6:	45d0      	cmp	r8, sl
 8004aa8:	dbf3      	blt.n	8004a92 <_printf_float+0x3fe>
 8004aaa:	464b      	mov	r3, r9
 8004aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ab0:	e6df      	b.n	8004872 <_printf_float+0x1de>
 8004ab2:	f04f 0800 	mov.w	r8, #0
 8004ab6:	f104 0b1a 	add.w	fp, r4, #26
 8004aba:	e7f4      	b.n	8004aa6 <_printf_float+0x412>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4642      	mov	r2, r8
 8004ac0:	e7e1      	b.n	8004a86 <_printf_float+0x3f2>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	464a      	mov	r2, r9
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f ae3c 	beq.w	800474a <_printf_float+0xb6>
 8004ad2:	f108 0801 	add.w	r8, r8, #1
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004ada:	1a5b      	subs	r3, r3, r1
 8004adc:	4543      	cmp	r3, r8
 8004ade:	dcf0      	bgt.n	8004ac2 <_printf_float+0x42e>
 8004ae0:	e6fc      	b.n	80048dc <_printf_float+0x248>
 8004ae2:	f04f 0800 	mov.w	r8, #0
 8004ae6:	f104 0919 	add.w	r9, r4, #25
 8004aea:	e7f4      	b.n	8004ad6 <_printf_float+0x442>

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4616      	mov	r6, r2
 8004af2:	4698      	mov	r8, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bfb8      	it	lt
 8004b00:	4613      	movlt	r3, r2
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b08:	4607      	mov	r7, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	b10a      	cbz	r2, 8004b12 <_printf_common+0x26>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	6833      	ldrmi	r3, [r6, #0]
 8004b1a:	3302      	addmi	r3, #2
 8004b1c:	6033      	strmi	r3, [r6, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	f015 0506 	ands.w	r5, r5, #6
 8004b24:	d106      	bne.n	8004b34 <_printf_common+0x48>
 8004b26:	f104 0a19 	add.w	sl, r4, #25
 8004b2a:	68e3      	ldr	r3, [r4, #12]
 8004b2c:	6832      	ldr	r2, [r6, #0]
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	42ab      	cmp	r3, r5
 8004b32:	dc26      	bgt.n	8004b82 <_printf_common+0x96>
 8004b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	3b00      	subs	r3, #0
 8004b3c:	bf18      	it	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	0692      	lsls	r2, r2, #26
 8004b42:	d42b      	bmi.n	8004b9c <_printf_common+0xb0>
 8004b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b48:	4641      	mov	r1, r8
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c8      	blx	r9
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d01e      	beq.n	8004b90 <_printf_common+0xa4>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	bf02      	ittt	eq
 8004b5e:	68e5      	ldreq	r5, [r4, #12]
 8004b60:	6833      	ldreq	r3, [r6, #0]
 8004b62:	1aed      	subeq	r5, r5, r3
 8004b64:	68a3      	ldr	r3, [r4, #8]
 8004b66:	bf0c      	ite	eq
 8004b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b6c:	2500      	movne	r5, #0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bfc4      	itt	gt
 8004b72:	1a9b      	subgt	r3, r3, r2
 8004b74:	18ed      	addgt	r5, r5, r3
 8004b76:	2600      	movs	r6, #0
 8004b78:	341a      	adds	r4, #26
 8004b7a:	42b5      	cmp	r5, r6
 8004b7c:	d11a      	bne.n	8004bb4 <_printf_common+0xc8>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e008      	b.n	8004b94 <_printf_common+0xa8>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4652      	mov	r2, sl
 8004b86:	4641      	mov	r1, r8
 8004b88:	4638      	mov	r0, r7
 8004b8a:	47c8      	blx	r9
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_printf_common+0xac>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	3501      	adds	r5, #1
 8004b9a:	e7c6      	b.n	8004b2a <_printf_common+0x3e>
 8004b9c:	18e1      	adds	r1, r4, r3
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	2030      	movs	r0, #48	@ 0x30
 8004ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ba6:	4422      	add	r2, r4
 8004ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	e7c7      	b.n	8004b44 <_printf_common+0x58>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4641      	mov	r1, r8
 8004bba:	4638      	mov	r0, r7
 8004bbc:	47c8      	blx	r9
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d0e6      	beq.n	8004b90 <_printf_common+0xa4>
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7d9      	b.n	8004b7a <_printf_common+0x8e>
	...

08004bc8 <_printf_i>:
 8004bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	7e0f      	ldrb	r7, [r1, #24]
 8004bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bd0:	2f78      	cmp	r7, #120	@ 0x78
 8004bd2:	4691      	mov	r9, r2
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	469a      	mov	sl, r3
 8004bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bde:	d807      	bhi.n	8004bf0 <_printf_i+0x28>
 8004be0:	2f62      	cmp	r7, #98	@ 0x62
 8004be2:	d80a      	bhi.n	8004bfa <_printf_i+0x32>
 8004be4:	2f00      	cmp	r7, #0
 8004be6:	f000 80d2 	beq.w	8004d8e <_printf_i+0x1c6>
 8004bea:	2f58      	cmp	r7, #88	@ 0x58
 8004bec:	f000 80b9 	beq.w	8004d62 <_printf_i+0x19a>
 8004bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bf8:	e03a      	b.n	8004c70 <_printf_i+0xa8>
 8004bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bfe:	2b15      	cmp	r3, #21
 8004c00:	d8f6      	bhi.n	8004bf0 <_printf_i+0x28>
 8004c02:	a101      	add	r1, pc, #4	@ (adr r1, 8004c08 <_printf_i+0x40>)
 8004c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c75 	.word	0x08004c75
 8004c10:	08004bf1 	.word	0x08004bf1
 8004c14:	08004bf1 	.word	0x08004bf1
 8004c18:	08004bf1 	.word	0x08004bf1
 8004c1c:	08004bf1 	.word	0x08004bf1
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004bf1 	.word	0x08004bf1
 8004c28:	08004bf1 	.word	0x08004bf1
 8004c2c:	08004bf1 	.word	0x08004bf1
 8004c30:	08004bf1 	.word	0x08004bf1
 8004c34:	08004d75 	.word	0x08004d75
 8004c38:	08004c9f 	.word	0x08004c9f
 8004c3c:	08004d2f 	.word	0x08004d2f
 8004c40:	08004bf1 	.word	0x08004bf1
 8004c44:	08004bf1 	.word	0x08004bf1
 8004c48:	08004d97 	.word	0x08004d97
 8004c4c:	08004bf1 	.word	0x08004bf1
 8004c50:	08004c9f 	.word	0x08004c9f
 8004c54:	08004bf1 	.word	0x08004bf1
 8004c58:	08004bf1 	.word	0x08004bf1
 8004c5c:	08004d37 	.word	0x08004d37
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6032      	str	r2, [r6, #0]
 8004c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c70:	2301      	movs	r3, #1
 8004c72:	e09d      	b.n	8004db0 <_printf_i+0x1e8>
 8004c74:	6833      	ldr	r3, [r6, #0]
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	1d19      	adds	r1, r3, #4
 8004c7a:	6031      	str	r1, [r6, #0]
 8004c7c:	0606      	lsls	r6, r0, #24
 8004c7e:	d501      	bpl.n	8004c84 <_printf_i+0xbc>
 8004c80:	681d      	ldr	r5, [r3, #0]
 8004c82:	e003      	b.n	8004c8c <_printf_i+0xc4>
 8004c84:	0645      	lsls	r5, r0, #25
 8004c86:	d5fb      	bpl.n	8004c80 <_printf_i+0xb8>
 8004c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	da03      	bge.n	8004c98 <_printf_i+0xd0>
 8004c90:	232d      	movs	r3, #45	@ 0x2d
 8004c92:	426d      	negs	r5, r5
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c98:	4859      	ldr	r0, [pc, #356]	@ (8004e00 <_printf_i+0x238>)
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	e011      	b.n	8004cc2 <_printf_i+0xfa>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	0608      	lsls	r0, r1, #24
 8004ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ca8:	d402      	bmi.n	8004cb0 <_printf_i+0xe8>
 8004caa:	0649      	lsls	r1, r1, #25
 8004cac:	bf48      	it	mi
 8004cae:	b2ad      	uxthmi	r5, r5
 8004cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cb2:	4853      	ldr	r0, [pc, #332]	@ (8004e00 <_printf_i+0x238>)
 8004cb4:	6033      	str	r3, [r6, #0]
 8004cb6:	bf14      	ite	ne
 8004cb8:	230a      	movne	r3, #10
 8004cba:	2308      	moveq	r3, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cc2:	6866      	ldr	r6, [r4, #4]
 8004cc4:	60a6      	str	r6, [r4, #8]
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	bfa2      	ittt	ge
 8004cca:	6821      	ldrge	r1, [r4, #0]
 8004ccc:	f021 0104 	bicge.w	r1, r1, #4
 8004cd0:	6021      	strge	r1, [r4, #0]
 8004cd2:	b90d      	cbnz	r5, 8004cd8 <_printf_i+0x110>
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d04b      	beq.n	8004d70 <_printf_i+0x1a8>
 8004cd8:	4616      	mov	r6, r2
 8004cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cde:	fb03 5711 	mls	r7, r3, r1, r5
 8004ce2:	5dc7      	ldrb	r7, [r0, r7]
 8004ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ce8:	462f      	mov	r7, r5
 8004cea:	42bb      	cmp	r3, r7
 8004cec:	460d      	mov	r5, r1
 8004cee:	d9f4      	bls.n	8004cda <_printf_i+0x112>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d10b      	bne.n	8004d0c <_printf_i+0x144>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	07df      	lsls	r7, r3, #31
 8004cf8:	d508      	bpl.n	8004d0c <_printf_i+0x144>
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	6861      	ldr	r1, [r4, #4]
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	bfde      	ittt	le
 8004d02:	2330      	movle	r3, #48	@ 0x30
 8004d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d0c:	1b92      	subs	r2, r2, r6
 8004d0e:	6122      	str	r2, [r4, #16]
 8004d10:	f8cd a000 	str.w	sl, [sp]
 8004d14:	464b      	mov	r3, r9
 8004d16:	aa03      	add	r2, sp, #12
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	f7ff fee6 	bl	8004aec <_printf_common>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d14a      	bne.n	8004dba <_printf_i+0x1f2>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	b004      	add	sp, #16
 8004d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	f043 0320 	orr.w	r3, r3, #32
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	4833      	ldr	r0, [pc, #204]	@ (8004e04 <_printf_i+0x23c>)
 8004d38:	2778      	movs	r7, #120	@ 0x78
 8004d3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	6831      	ldr	r1, [r6, #0]
 8004d42:	061f      	lsls	r7, r3, #24
 8004d44:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d48:	d402      	bmi.n	8004d50 <_printf_i+0x188>
 8004d4a:	065f      	lsls	r7, r3, #25
 8004d4c:	bf48      	it	mi
 8004d4e:	b2ad      	uxthmi	r5, r5
 8004d50:	6031      	str	r1, [r6, #0]
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	bf44      	itt	mi
 8004d56:	f043 0320 	orrmi.w	r3, r3, #32
 8004d5a:	6023      	strmi	r3, [r4, #0]
 8004d5c:	b11d      	cbz	r5, 8004d66 <_printf_i+0x19e>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	e7ac      	b.n	8004cbc <_printf_i+0xf4>
 8004d62:	4827      	ldr	r0, [pc, #156]	@ (8004e00 <_printf_i+0x238>)
 8004d64:	e7e9      	b.n	8004d3a <_printf_i+0x172>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f023 0320 	bic.w	r3, r3, #32
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	e7f6      	b.n	8004d5e <_printf_i+0x196>
 8004d70:	4616      	mov	r6, r2
 8004d72:	e7bd      	b.n	8004cf0 <_printf_i+0x128>
 8004d74:	6833      	ldr	r3, [r6, #0]
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	6961      	ldr	r1, [r4, #20]
 8004d7a:	1d18      	adds	r0, r3, #4
 8004d7c:	6030      	str	r0, [r6, #0]
 8004d7e:	062e      	lsls	r6, r5, #24
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	d501      	bpl.n	8004d88 <_printf_i+0x1c0>
 8004d84:	6019      	str	r1, [r3, #0]
 8004d86:	e002      	b.n	8004d8e <_printf_i+0x1c6>
 8004d88:	0668      	lsls	r0, r5, #25
 8004d8a:	d5fb      	bpl.n	8004d84 <_printf_i+0x1bc>
 8004d8c:	8019      	strh	r1, [r3, #0]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	4616      	mov	r6, r2
 8004d94:	e7bc      	b.n	8004d10 <_printf_i+0x148>
 8004d96:	6833      	ldr	r3, [r6, #0]
 8004d98:	1d1a      	adds	r2, r3, #4
 8004d9a:	6032      	str	r2, [r6, #0]
 8004d9c:	681e      	ldr	r6, [r3, #0]
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	2100      	movs	r1, #0
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7fb fa14 	bl	80001d0 <memchr>
 8004da8:	b108      	cbz	r0, 8004dae <_printf_i+0x1e6>
 8004daa:	1b80      	subs	r0, r0, r6
 8004dac:	6060      	str	r0, [r4, #4]
 8004dae:	6863      	ldr	r3, [r4, #4]
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	2300      	movs	r3, #0
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db8:	e7aa      	b.n	8004d10 <_printf_i+0x148>
 8004dba:	6923      	ldr	r3, [r4, #16]
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	47d0      	blx	sl
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d0ad      	beq.n	8004d24 <_printf_i+0x15c>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	079b      	lsls	r3, r3, #30
 8004dcc:	d413      	bmi.n	8004df6 <_printf_i+0x22e>
 8004dce:	68e0      	ldr	r0, [r4, #12]
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	4298      	cmp	r0, r3
 8004dd4:	bfb8      	it	lt
 8004dd6:	4618      	movlt	r0, r3
 8004dd8:	e7a6      	b.n	8004d28 <_printf_i+0x160>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4632      	mov	r2, r6
 8004dde:	4649      	mov	r1, r9
 8004de0:	4640      	mov	r0, r8
 8004de2:	47d0      	blx	sl
 8004de4:	3001      	adds	r0, #1
 8004de6:	d09d      	beq.n	8004d24 <_printf_i+0x15c>
 8004de8:	3501      	adds	r5, #1
 8004dea:	68e3      	ldr	r3, [r4, #12]
 8004dec:	9903      	ldr	r1, [sp, #12]
 8004dee:	1a5b      	subs	r3, r3, r1
 8004df0:	42ab      	cmp	r3, r5
 8004df2:	dcf2      	bgt.n	8004dda <_printf_i+0x212>
 8004df4:	e7eb      	b.n	8004dce <_printf_i+0x206>
 8004df6:	2500      	movs	r5, #0
 8004df8:	f104 0619 	add.w	r6, r4, #25
 8004dfc:	e7f5      	b.n	8004dea <_printf_i+0x222>
 8004dfe:	bf00      	nop
 8004e00:	080070a6 	.word	0x080070a6
 8004e04:	080070b7 	.word	0x080070b7

08004e08 <std>:
 8004e08:	2300      	movs	r3, #0
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e16:	6083      	str	r3, [r0, #8]
 8004e18:	8181      	strh	r1, [r0, #12]
 8004e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e1c:	81c2      	strh	r2, [r0, #14]
 8004e1e:	6183      	str	r3, [r0, #24]
 8004e20:	4619      	mov	r1, r3
 8004e22:	2208      	movs	r2, #8
 8004e24:	305c      	adds	r0, #92	@ 0x5c
 8004e26:	f000 f9f9 	bl	800521c <memset>
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <std+0x58>)
 8004e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <std+0x5c>)
 8004e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e32:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <std+0x60>)
 8004e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e36:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <std+0x64>)
 8004e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <std+0x68>)
 8004e3c:	6224      	str	r4, [r4, #32]
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d006      	beq.n	8004e50 <std+0x48>
 8004e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e46:	4294      	cmp	r4, r2
 8004e48:	d002      	beq.n	8004e50 <std+0x48>
 8004e4a:	33d0      	adds	r3, #208	@ 0xd0
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d105      	bne.n	8004e5c <std+0x54>
 8004e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	f000 ba5c 	b.w	8005314 <__retarget_lock_init_recursive>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	bf00      	nop
 8004e60:	0800506d 	.word	0x0800506d
 8004e64:	0800508f 	.word	0x0800508f
 8004e68:	080050c7 	.word	0x080050c7
 8004e6c:	080050eb 	.word	0x080050eb
 8004e70:	20000250 	.word	0x20000250

08004e74 <stdio_exit_handler>:
 8004e74:	4a02      	ldr	r2, [pc, #8]	@ (8004e80 <stdio_exit_handler+0xc>)
 8004e76:	4903      	ldr	r1, [pc, #12]	@ (8004e84 <stdio_exit_handler+0x10>)
 8004e78:	4803      	ldr	r0, [pc, #12]	@ (8004e88 <stdio_exit_handler+0x14>)
 8004e7a:	f000 b869 	b.w	8004f50 <_fwalk_sglue>
 8004e7e:	bf00      	nop
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	08006c41 	.word	0x08006c41
 8004e88:	2000001c 	.word	0x2000001c

08004e8c <cleanup_stdio>:
 8004e8c:	6841      	ldr	r1, [r0, #4]
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <cleanup_stdio+0x34>)
 8004e90:	4299      	cmp	r1, r3
 8004e92:	b510      	push	{r4, lr}
 8004e94:	4604      	mov	r4, r0
 8004e96:	d001      	beq.n	8004e9c <cleanup_stdio+0x10>
 8004e98:	f001 fed2 	bl	8006c40 <_fflush_r>
 8004e9c:	68a1      	ldr	r1, [r4, #8]
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <cleanup_stdio+0x38>)
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <cleanup_stdio+0x1e>
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f001 fecb 	bl	8006c40 <_fflush_r>
 8004eaa:	68e1      	ldr	r1, [r4, #12]
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <cleanup_stdio+0x3c>)
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	d004      	beq.n	8004ebc <cleanup_stdio+0x30>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb8:	f001 bec2 	b.w	8006c40 <_fflush_r>
 8004ebc:	bd10      	pop	{r4, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000250 	.word	0x20000250
 8004ec4:	200002b8 	.word	0x200002b8
 8004ec8:	20000320 	.word	0x20000320

08004ecc <global_stdio_init.part.0>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <global_stdio_init.part.0+0x30>)
 8004ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8004f00 <global_stdio_init.part.0+0x34>)
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f04 <global_stdio_init.part.0+0x38>)
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2104      	movs	r1, #4
 8004edc:	f7ff ff94 	bl	8004e08 <std>
 8004ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2109      	movs	r1, #9
 8004ee8:	f7ff ff8e 	bl	8004e08 <std>
 8004eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef6:	2112      	movs	r1, #18
 8004ef8:	f7ff bf86 	b.w	8004e08 <std>
 8004efc:	20000388 	.word	0x20000388
 8004f00:	20000250 	.word	0x20000250
 8004f04:	08004e75 	.word	0x08004e75

08004f08 <__sfp_lock_acquire>:
 8004f08:	4801      	ldr	r0, [pc, #4]	@ (8004f10 <__sfp_lock_acquire+0x8>)
 8004f0a:	f000 ba04 	b.w	8005316 <__retarget_lock_acquire_recursive>
 8004f0e:	bf00      	nop
 8004f10:	20000391 	.word	0x20000391

08004f14 <__sfp_lock_release>:
 8004f14:	4801      	ldr	r0, [pc, #4]	@ (8004f1c <__sfp_lock_release+0x8>)
 8004f16:	f000 b9ff 	b.w	8005318 <__retarget_lock_release_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	20000391 	.word	0x20000391

08004f20 <__sinit>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4604      	mov	r4, r0
 8004f24:	f7ff fff0 	bl	8004f08 <__sfp_lock_acquire>
 8004f28:	6a23      	ldr	r3, [r4, #32]
 8004f2a:	b11b      	cbz	r3, 8004f34 <__sinit+0x14>
 8004f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f30:	f7ff bff0 	b.w	8004f14 <__sfp_lock_release>
 8004f34:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <__sinit+0x28>)
 8004f36:	6223      	str	r3, [r4, #32]
 8004f38:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <__sinit+0x2c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f5      	bne.n	8004f2c <__sinit+0xc>
 8004f40:	f7ff ffc4 	bl	8004ecc <global_stdio_init.part.0>
 8004f44:	e7f2      	b.n	8004f2c <__sinit+0xc>
 8004f46:	bf00      	nop
 8004f48:	08004e8d 	.word	0x08004e8d
 8004f4c:	20000388 	.word	0x20000388

08004f50 <_fwalk_sglue>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	4607      	mov	r7, r0
 8004f56:	4688      	mov	r8, r1
 8004f58:	4614      	mov	r4, r2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f60:	f1b9 0901 	subs.w	r9, r9, #1
 8004f64:	d505      	bpl.n	8004f72 <_fwalk_sglue+0x22>
 8004f66:	6824      	ldr	r4, [r4, #0]
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	d1f7      	bne.n	8004f5c <_fwalk_sglue+0xc>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f72:	89ab      	ldrh	r3, [r5, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d907      	bls.n	8004f88 <_fwalk_sglue+0x38>
 8004f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	d003      	beq.n	8004f88 <_fwalk_sglue+0x38>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c0      	blx	r8
 8004f86:	4306      	orrs	r6, r0
 8004f88:	3568      	adds	r5, #104	@ 0x68
 8004f8a:	e7e9      	b.n	8004f60 <_fwalk_sglue+0x10>

08004f8c <iprintf>:
 8004f8c:	b40f      	push	{r0, r1, r2, r3}
 8004f8e:	b507      	push	{r0, r1, r2, lr}
 8004f90:	4906      	ldr	r1, [pc, #24]	@ (8004fac <iprintf+0x20>)
 8004f92:	ab04      	add	r3, sp, #16
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f9a:	6881      	ldr	r1, [r0, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	f001 fcb7 	bl	8006910 <_vfiprintf_r>
 8004fa2:	b003      	add	sp, #12
 8004fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	20000018 	.word	0x20000018

08004fb0 <_puts_r>:
 8004fb0:	6a03      	ldr	r3, [r0, #32]
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	6884      	ldr	r4, [r0, #8]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	460e      	mov	r6, r1
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_puts_r+0x10>
 8004fbc:	f7ff ffb0 	bl	8004f20 <__sinit>
 8004fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fc2:	07db      	lsls	r3, r3, #31
 8004fc4:	d405      	bmi.n	8004fd2 <_puts_r+0x22>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	0598      	lsls	r0, r3, #22
 8004fca:	d402      	bmi.n	8004fd2 <_puts_r+0x22>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fce:	f000 f9a2 	bl	8005316 <__retarget_lock_acquire_recursive>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	0719      	lsls	r1, r3, #28
 8004fd6:	d502      	bpl.n	8004fde <_puts_r+0x2e>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d135      	bne.n	800504a <_puts_r+0x9a>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f8c5 	bl	8005170 <__swsetup_r>
 8004fe6:	b380      	cbz	r0, 800504a <_puts_r+0x9a>
 8004fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fee:	07da      	lsls	r2, r3, #31
 8004ff0:	d405      	bmi.n	8004ffe <_puts_r+0x4e>
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	059b      	lsls	r3, r3, #22
 8004ff6:	d402      	bmi.n	8004ffe <_puts_r+0x4e>
 8004ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffa:	f000 f98d 	bl	8005318 <__retarget_lock_release_recursive>
 8004ffe:	4628      	mov	r0, r5
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	2b00      	cmp	r3, #0
 8005004:	da04      	bge.n	8005010 <_puts_r+0x60>
 8005006:	69a2      	ldr	r2, [r4, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	dc17      	bgt.n	800503c <_puts_r+0x8c>
 800500c:	290a      	cmp	r1, #10
 800500e:	d015      	beq.n	800503c <_puts_r+0x8c>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	7019      	strb	r1, [r3, #0]
 8005018:	68a3      	ldr	r3, [r4, #8]
 800501a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800501e:	3b01      	subs	r3, #1
 8005020:	60a3      	str	r3, [r4, #8]
 8005022:	2900      	cmp	r1, #0
 8005024:	d1ed      	bne.n	8005002 <_puts_r+0x52>
 8005026:	2b00      	cmp	r3, #0
 8005028:	da11      	bge.n	800504e <_puts_r+0x9e>
 800502a:	4622      	mov	r2, r4
 800502c:	210a      	movs	r1, #10
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f85f 	bl	80050f2 <__swbuf_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d0d7      	beq.n	8004fe8 <_puts_r+0x38>
 8005038:	250a      	movs	r5, #10
 800503a:	e7d7      	b.n	8004fec <_puts_r+0x3c>
 800503c:	4622      	mov	r2, r4
 800503e:	4628      	mov	r0, r5
 8005040:	f000 f857 	bl	80050f2 <__swbuf_r>
 8005044:	3001      	adds	r0, #1
 8005046:	d1e7      	bne.n	8005018 <_puts_r+0x68>
 8005048:	e7ce      	b.n	8004fe8 <_puts_r+0x38>
 800504a:	3e01      	subs	r6, #1
 800504c:	e7e4      	b.n	8005018 <_puts_r+0x68>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	220a      	movs	r2, #10
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e7ee      	b.n	8005038 <_puts_r+0x88>
	...

0800505c <puts>:
 800505c:	4b02      	ldr	r3, [pc, #8]	@ (8005068 <puts+0xc>)
 800505e:	4601      	mov	r1, r0
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	f7ff bfa5 	b.w	8004fb0 <_puts_r>
 8005066:	bf00      	nop
 8005068:	20000018 	.word	0x20000018

0800506c <__sread>:
 800506c:	b510      	push	{r4, lr}
 800506e:	460c      	mov	r4, r1
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	f000 f900 	bl	8005278 <_read_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	bfab      	itete	ge
 800507c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800507e:	89a3      	ldrhlt	r3, [r4, #12]
 8005080:	181b      	addge	r3, r3, r0
 8005082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005086:	bfac      	ite	ge
 8005088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800508a:	81a3      	strhlt	r3, [r4, #12]
 800508c:	bd10      	pop	{r4, pc}

0800508e <__swrite>:
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	461f      	mov	r7, r3
 8005094:	898b      	ldrh	r3, [r1, #12]
 8005096:	05db      	lsls	r3, r3, #23
 8005098:	4605      	mov	r5, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4616      	mov	r6, r2
 800509e:	d505      	bpl.n	80050ac <__swrite+0x1e>
 80050a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a4:	2302      	movs	r3, #2
 80050a6:	2200      	movs	r2, #0
 80050a8:	f000 f8d4 	bl	8005254 <_lseek_r>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	4632      	mov	r2, r6
 80050ba:	463b      	mov	r3, r7
 80050bc:	4628      	mov	r0, r5
 80050be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c2:	f000 b8eb 	b.w	800529c <_write_r>

080050c6 <__sseek>:
 80050c6:	b510      	push	{r4, lr}
 80050c8:	460c      	mov	r4, r1
 80050ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ce:	f000 f8c1 	bl	8005254 <_lseek_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	bf15      	itete	ne
 80050d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050e2:	81a3      	strheq	r3, [r4, #12]
 80050e4:	bf18      	it	ne
 80050e6:	81a3      	strhne	r3, [r4, #12]
 80050e8:	bd10      	pop	{r4, pc}

080050ea <__sclose>:
 80050ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ee:	f000 b8a1 	b.w	8005234 <_close_r>

080050f2 <__swbuf_r>:
 80050f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f4:	460e      	mov	r6, r1
 80050f6:	4614      	mov	r4, r2
 80050f8:	4605      	mov	r5, r0
 80050fa:	b118      	cbz	r0, 8005104 <__swbuf_r+0x12>
 80050fc:	6a03      	ldr	r3, [r0, #32]
 80050fe:	b90b      	cbnz	r3, 8005104 <__swbuf_r+0x12>
 8005100:	f7ff ff0e 	bl	8004f20 <__sinit>
 8005104:	69a3      	ldr	r3, [r4, #24]
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	071a      	lsls	r2, r3, #28
 800510c:	d501      	bpl.n	8005112 <__swbuf_r+0x20>
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	b943      	cbnz	r3, 8005124 <__swbuf_r+0x32>
 8005112:	4621      	mov	r1, r4
 8005114:	4628      	mov	r0, r5
 8005116:	f000 f82b 	bl	8005170 <__swsetup_r>
 800511a:	b118      	cbz	r0, 8005124 <__swbuf_r+0x32>
 800511c:	f04f 37ff 	mov.w	r7, #4294967295
 8005120:	4638      	mov	r0, r7
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	6922      	ldr	r2, [r4, #16]
 8005128:	1a98      	subs	r0, r3, r2
 800512a:	6963      	ldr	r3, [r4, #20]
 800512c:	b2f6      	uxtb	r6, r6
 800512e:	4283      	cmp	r3, r0
 8005130:	4637      	mov	r7, r6
 8005132:	dc05      	bgt.n	8005140 <__swbuf_r+0x4e>
 8005134:	4621      	mov	r1, r4
 8005136:	4628      	mov	r0, r5
 8005138:	f001 fd82 	bl	8006c40 <_fflush_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	d1ed      	bne.n	800511c <__swbuf_r+0x2a>
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	3b01      	subs	r3, #1
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	6022      	str	r2, [r4, #0]
 800514c:	701e      	strb	r6, [r3, #0]
 800514e:	6962      	ldr	r2, [r4, #20]
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	429a      	cmp	r2, r3
 8005154:	d004      	beq.n	8005160 <__swbuf_r+0x6e>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d5e1      	bpl.n	8005120 <__swbuf_r+0x2e>
 800515c:	2e0a      	cmp	r6, #10
 800515e:	d1df      	bne.n	8005120 <__swbuf_r+0x2e>
 8005160:	4621      	mov	r1, r4
 8005162:	4628      	mov	r0, r5
 8005164:	f001 fd6c 	bl	8006c40 <_fflush_r>
 8005168:	2800      	cmp	r0, #0
 800516a:	d0d9      	beq.n	8005120 <__swbuf_r+0x2e>
 800516c:	e7d6      	b.n	800511c <__swbuf_r+0x2a>
	...

08005170 <__swsetup_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <__swsetup_r+0xa8>)
 8005174:	4605      	mov	r5, r0
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	460c      	mov	r4, r1
 800517a:	b118      	cbz	r0, 8005184 <__swsetup_r+0x14>
 800517c:	6a03      	ldr	r3, [r0, #32]
 800517e:	b90b      	cbnz	r3, 8005184 <__swsetup_r+0x14>
 8005180:	f7ff fece 	bl	8004f20 <__sinit>
 8005184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d422      	bmi.n	80051d2 <__swsetup_r+0x62>
 800518c:	06da      	lsls	r2, r3, #27
 800518e:	d407      	bmi.n	80051a0 <__swsetup_r+0x30>
 8005190:	2209      	movs	r2, #9
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e033      	b.n	8005208 <__swsetup_r+0x98>
 80051a0:	0758      	lsls	r0, r3, #29
 80051a2:	d512      	bpl.n	80051ca <__swsetup_r+0x5a>
 80051a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051a6:	b141      	cbz	r1, 80051ba <__swsetup_r+0x4a>
 80051a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ac:	4299      	cmp	r1, r3
 80051ae:	d002      	beq.n	80051b6 <__swsetup_r+0x46>
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 ff05 	bl	8005fc0 <_free_r>
 80051b6:	2300      	movs	r3, #0
 80051b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	2300      	movs	r3, #0
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	b94b      	cbnz	r3, 80051ea <__swsetup_r+0x7a>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e0:	d003      	beq.n	80051ea <__swsetup_r+0x7a>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f001 fd79 	bl	8006cdc <__smakebuf_r>
 80051ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ee:	f013 0201 	ands.w	r2, r3, #1
 80051f2:	d00a      	beq.n	800520a <__swsetup_r+0x9a>
 80051f4:	2200      	movs	r2, #0
 80051f6:	60a2      	str	r2, [r4, #8]
 80051f8:	6962      	ldr	r2, [r4, #20]
 80051fa:	4252      	negs	r2, r2
 80051fc:	61a2      	str	r2, [r4, #24]
 80051fe:	6922      	ldr	r2, [r4, #16]
 8005200:	b942      	cbnz	r2, 8005214 <__swsetup_r+0xa4>
 8005202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005206:	d1c5      	bne.n	8005194 <__swsetup_r+0x24>
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	0799      	lsls	r1, r3, #30
 800520c:	bf58      	it	pl
 800520e:	6962      	ldrpl	r2, [r4, #20]
 8005210:	60a2      	str	r2, [r4, #8]
 8005212:	e7f4      	b.n	80051fe <__swsetup_r+0x8e>
 8005214:	2000      	movs	r0, #0
 8005216:	e7f7      	b.n	8005208 <__swsetup_r+0x98>
 8005218:	20000018 	.word	0x20000018

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <_localeconv_r>:
 800522c:	4800      	ldr	r0, [pc, #0]	@ (8005230 <_localeconv_r+0x4>)
 800522e:	4770      	bx	lr
 8005230:	20000158 	.word	0x20000158

08005234 <_close_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d06      	ldr	r5, [pc, #24]	@ (8005250 <_close_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f7fc f99f 	bl	8001582 <_close>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_close_r+0x1a>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_close_r+0x1a>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	2000038c 	.word	0x2000038c

08005254 <_lseek_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d07      	ldr	r5, [pc, #28]	@ (8005274 <_lseek_r+0x20>)
 8005258:	4604      	mov	r4, r0
 800525a:	4608      	mov	r0, r1
 800525c:	4611      	mov	r1, r2
 800525e:	2200      	movs	r2, #0
 8005260:	602a      	str	r2, [r5, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f7fc f9b1 	bl	80015ca <_lseek>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_lseek_r+0x1e>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_lseek_r+0x1e>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	2000038c 	.word	0x2000038c

08005278 <_read_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4d07      	ldr	r5, [pc, #28]	@ (8005298 <_read_r+0x20>)
 800527c:	4604      	mov	r4, r0
 800527e:	4608      	mov	r0, r1
 8005280:	4611      	mov	r1, r2
 8005282:	2200      	movs	r2, #0
 8005284:	602a      	str	r2, [r5, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	f7fc f942 	bl	8001510 <_read>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_read_r+0x1e>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_read_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	2000038c 	.word	0x2000038c

0800529c <_write_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4d07      	ldr	r5, [pc, #28]	@ (80052bc <_write_r+0x20>)
 80052a0:	4604      	mov	r4, r0
 80052a2:	4608      	mov	r0, r1
 80052a4:	4611      	mov	r1, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	602a      	str	r2, [r5, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fc f94d 	bl	800154a <_write>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_write_r+0x1e>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_write_r+0x1e>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	2000038c 	.word	0x2000038c

080052c0 <__errno>:
 80052c0:	4b01      	ldr	r3, [pc, #4]	@ (80052c8 <__errno+0x8>)
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000018 	.word	0x20000018

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005304 <__libc_init_array+0x38>)
 80052d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005308 <__libc_init_array+0x3c>)
 80052d2:	1b64      	subs	r4, r4, r5
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	2600      	movs	r6, #0
 80052d8:	42a6      	cmp	r6, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	4d0b      	ldr	r5, [pc, #44]	@ (800530c <__libc_init_array+0x40>)
 80052de:	4c0c      	ldr	r4, [pc, #48]	@ (8005310 <__libc_init_array+0x44>)
 80052e0:	f001 fe28 	bl	8006f34 <_init>
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	2600      	movs	r6, #0
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f4:	4798      	blx	r3
 80052f6:	3601      	adds	r6, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fe:	4798      	blx	r3
 8005300:	3601      	adds	r6, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	08007410 	.word	0x08007410
 8005308:	08007410 	.word	0x08007410
 800530c:	08007410 	.word	0x08007410
 8005310:	08007414 	.word	0x08007414

08005314 <__retarget_lock_init_recursive>:
 8005314:	4770      	bx	lr

08005316 <__retarget_lock_acquire_recursive>:
 8005316:	4770      	bx	lr

08005318 <__retarget_lock_release_recursive>:
 8005318:	4770      	bx	lr

0800531a <quorem>:
 800531a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531e:	6903      	ldr	r3, [r0, #16]
 8005320:	690c      	ldr	r4, [r1, #16]
 8005322:	42a3      	cmp	r3, r4
 8005324:	4607      	mov	r7, r0
 8005326:	db7e      	blt.n	8005426 <quorem+0x10c>
 8005328:	3c01      	subs	r4, #1
 800532a:	f101 0814 	add.w	r8, r1, #20
 800532e:	00a3      	lsls	r3, r4, #2
 8005330:	f100 0514 	add.w	r5, r0, #20
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005344:	3301      	adds	r3, #1
 8005346:	429a      	cmp	r2, r3
 8005348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800534c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005350:	d32e      	bcc.n	80053b0 <quorem+0x96>
 8005352:	f04f 0a00 	mov.w	sl, #0
 8005356:	46c4      	mov	ip, r8
 8005358:	46ae      	mov	lr, r5
 800535a:	46d3      	mov	fp, sl
 800535c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005360:	b298      	uxth	r0, r3
 8005362:	fb06 a000 	mla	r0, r6, r0, sl
 8005366:	0c02      	lsrs	r2, r0, #16
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	fb06 2303 	mla	r3, r6, r3, r2
 800536e:	f8de 2000 	ldr.w	r2, [lr]
 8005372:	b280      	uxth	r0, r0
 8005374:	b292      	uxth	r2, r2
 8005376:	1a12      	subs	r2, r2, r0
 8005378:	445a      	add	r2, fp
 800537a:	f8de 0000 	ldr.w	r0, [lr]
 800537e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005382:	b29b      	uxth	r3, r3
 8005384:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005388:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800538c:	b292      	uxth	r2, r2
 800538e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005392:	45e1      	cmp	r9, ip
 8005394:	f84e 2b04 	str.w	r2, [lr], #4
 8005398:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800539c:	d2de      	bcs.n	800535c <quorem+0x42>
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	58eb      	ldr	r3, [r5, r3]
 80053a2:	b92b      	cbnz	r3, 80053b0 <quorem+0x96>
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	429d      	cmp	r5, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	d32f      	bcc.n	800540e <quorem+0xf4>
 80053ae:	613c      	str	r4, [r7, #16]
 80053b0:	4638      	mov	r0, r7
 80053b2:	f001 f97f 	bl	80066b4 <__mcmp>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	db25      	blt.n	8005406 <quorem+0xec>
 80053ba:	4629      	mov	r1, r5
 80053bc:	2000      	movs	r0, #0
 80053be:	f858 2b04 	ldr.w	r2, [r8], #4
 80053c2:	f8d1 c000 	ldr.w	ip, [r1]
 80053c6:	fa1f fe82 	uxth.w	lr, r2
 80053ca:	fa1f f38c 	uxth.w	r3, ip
 80053ce:	eba3 030e 	sub.w	r3, r3, lr
 80053d2:	4403      	add	r3, r0
 80053d4:	0c12      	lsrs	r2, r2, #16
 80053d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e4:	45c1      	cmp	r9, r8
 80053e6:	f841 3b04 	str.w	r3, [r1], #4
 80053ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053ee:	d2e6      	bcs.n	80053be <quorem+0xa4>
 80053f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053f8:	b922      	cbnz	r2, 8005404 <quorem+0xea>
 80053fa:	3b04      	subs	r3, #4
 80053fc:	429d      	cmp	r5, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	d30b      	bcc.n	800541a <quorem+0x100>
 8005402:	613c      	str	r4, [r7, #16]
 8005404:	3601      	adds	r6, #1
 8005406:	4630      	mov	r0, r6
 8005408:	b003      	add	sp, #12
 800540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	3b04      	subs	r3, #4
 8005412:	2a00      	cmp	r2, #0
 8005414:	d1cb      	bne.n	80053ae <quorem+0x94>
 8005416:	3c01      	subs	r4, #1
 8005418:	e7c6      	b.n	80053a8 <quorem+0x8e>
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	3b04      	subs	r3, #4
 800541e:	2a00      	cmp	r2, #0
 8005420:	d1ef      	bne.n	8005402 <quorem+0xe8>
 8005422:	3c01      	subs	r4, #1
 8005424:	e7ea      	b.n	80053fc <quorem+0xe2>
 8005426:	2000      	movs	r0, #0
 8005428:	e7ee      	b.n	8005408 <quorem+0xee>
 800542a:	0000      	movs	r0, r0
 800542c:	0000      	movs	r0, r0
	...

08005430 <_dtoa_r>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	69c7      	ldr	r7, [r0, #28]
 8005436:	b097      	sub	sp, #92	@ 0x5c
 8005438:	4614      	mov	r4, r2
 800543a:	461d      	mov	r5, r3
 800543c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005440:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005442:	4683      	mov	fp, r0
 8005444:	b97f      	cbnz	r7, 8005466 <_dtoa_r+0x36>
 8005446:	2010      	movs	r0, #16
 8005448:	f000 fe04 	bl	8006054 <malloc>
 800544c:	4602      	mov	r2, r0
 800544e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005452:	b920      	cbnz	r0, 800545e <_dtoa_r+0x2e>
 8005454:	4ba8      	ldr	r3, [pc, #672]	@ (80056f8 <_dtoa_r+0x2c8>)
 8005456:	21ef      	movs	r1, #239	@ 0xef
 8005458:	48a8      	ldr	r0, [pc, #672]	@ (80056fc <_dtoa_r+0x2cc>)
 800545a:	f001 fcbb 	bl	8006dd4 <__assert_func>
 800545e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005462:	6007      	str	r7, [r0, #0]
 8005464:	60c7      	str	r7, [r0, #12]
 8005466:	f8db 301c 	ldr.w	r3, [fp, #28]
 800546a:	6819      	ldr	r1, [r3, #0]
 800546c:	b159      	cbz	r1, 8005486 <_dtoa_r+0x56>
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	604a      	str	r2, [r1, #4]
 8005472:	2301      	movs	r3, #1
 8005474:	4093      	lsls	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
 8005478:	4658      	mov	r0, fp
 800547a:	f000 fee1 	bl	8006240 <_Bfree>
 800547e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	1e2b      	subs	r3, r5, #0
 8005488:	bfb9      	ittee	lt
 800548a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800548e:	9303      	strlt	r3, [sp, #12]
 8005490:	2300      	movge	r3, #0
 8005492:	6033      	strge	r3, [r6, #0]
 8005494:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005498:	4b99      	ldr	r3, [pc, #612]	@ (8005700 <_dtoa_r+0x2d0>)
 800549a:	bfbc      	itt	lt
 800549c:	2201      	movlt	r2, #1
 800549e:	6032      	strlt	r2, [r6, #0]
 80054a0:	ea33 0308 	bics.w	r3, r3, r8
 80054a4:	d112      	bne.n	80054cc <_dtoa_r+0x9c>
 80054a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80054a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80054b2:	4323      	orrs	r3, r4
 80054b4:	f000 8551 	beq.w	8005f5a <_dtoa_r+0xb2a>
 80054b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054ba:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8005704 <_dtoa_r+0x2d4>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8553 	beq.w	8005f6a <_dtoa_r+0xb3a>
 80054c4:	f10a 0303 	add.w	r3, sl, #3
 80054c8:	f000 bd4d 	b.w	8005f66 <_dtoa_r+0xb36>
 80054cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80054d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054d8:	2200      	movs	r2, #0
 80054da:	2300      	movs	r3, #0
 80054dc:	f7fb faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e0:	4607      	mov	r7, r0
 80054e2:	b158      	cbz	r0, 80054fc <_dtoa_r+0xcc>
 80054e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80054e6:	2301      	movs	r3, #1
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054ec:	b113      	cbz	r3, 80054f4 <_dtoa_r+0xc4>
 80054ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80054f0:	4b85      	ldr	r3, [pc, #532]	@ (8005708 <_dtoa_r+0x2d8>)
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800570c <_dtoa_r+0x2dc>
 80054f8:	f000 bd37 	b.w	8005f6a <_dtoa_r+0xb3a>
 80054fc:	ab14      	add	r3, sp, #80	@ 0x50
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	ab15      	add	r3, sp, #84	@ 0x54
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4658      	mov	r0, fp
 8005506:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800550a:	f001 f981 	bl	8006810 <__d2b>
 800550e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005512:	4681      	mov	r9, r0
 8005514:	2e00      	cmp	r6, #0
 8005516:	d076      	beq.n	8005606 <_dtoa_r+0x1d6>
 8005518:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800551a:	9712      	str	r7, [sp, #72]	@ 0x48
 800551c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005524:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005528:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800552c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005530:	4619      	mov	r1, r3
 8005532:	2200      	movs	r2, #0
 8005534:	4b76      	ldr	r3, [pc, #472]	@ (8005710 <_dtoa_r+0x2e0>)
 8005536:	f7fa fea7 	bl	8000288 <__aeabi_dsub>
 800553a:	a369      	add	r3, pc, #420	@ (adr r3, 80056e0 <_dtoa_r+0x2b0>)
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fb f85a 	bl	80005f8 <__aeabi_dmul>
 8005544:	a368      	add	r3, pc, #416	@ (adr r3, 80056e8 <_dtoa_r+0x2b8>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa fe9f 	bl	800028c <__adddf3>
 800554e:	4604      	mov	r4, r0
 8005550:	4630      	mov	r0, r6
 8005552:	460d      	mov	r5, r1
 8005554:	f7fa ffe6 	bl	8000524 <__aeabi_i2d>
 8005558:	a365      	add	r3, pc, #404	@ (adr r3, 80056f0 <_dtoa_r+0x2c0>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fb f84b 	bl	80005f8 <__aeabi_dmul>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fa fe8f 	bl	800028c <__adddf3>
 800556e:	4604      	mov	r4, r0
 8005570:	460d      	mov	r5, r1
 8005572:	f7fb faf1 	bl	8000b58 <__aeabi_d2iz>
 8005576:	2200      	movs	r2, #0
 8005578:	4607      	mov	r7, r0
 800557a:	2300      	movs	r3, #0
 800557c:	4620      	mov	r0, r4
 800557e:	4629      	mov	r1, r5
 8005580:	f7fb faac 	bl	8000adc <__aeabi_dcmplt>
 8005584:	b140      	cbz	r0, 8005598 <_dtoa_r+0x168>
 8005586:	4638      	mov	r0, r7
 8005588:	f7fa ffcc 	bl	8000524 <__aeabi_i2d>
 800558c:	4622      	mov	r2, r4
 800558e:	462b      	mov	r3, r5
 8005590:	f7fb fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005594:	b900      	cbnz	r0, 8005598 <_dtoa_r+0x168>
 8005596:	3f01      	subs	r7, #1
 8005598:	2f16      	cmp	r7, #22
 800559a:	d852      	bhi.n	8005642 <_dtoa_r+0x212>
 800559c:	4b5d      	ldr	r3, [pc, #372]	@ (8005714 <_dtoa_r+0x2e4>)
 800559e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055aa:	f7fb fa97 	bl	8000adc <__aeabi_dcmplt>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d049      	beq.n	8005646 <_dtoa_r+0x216>
 80055b2:	3f01      	subs	r7, #1
 80055b4:	2300      	movs	r3, #0
 80055b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055ba:	1b9b      	subs	r3, r3, r6
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	bf44      	itt	mi
 80055c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80055c4:	2300      	movmi	r3, #0
 80055c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80055c8:	bf54      	ite	pl
 80055ca:	f04f 0800 	movpl.w	r8, #0
 80055ce:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	db3a      	blt.n	800564a <_dtoa_r+0x21a>
 80055d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d6:	970e      	str	r7, [sp, #56]	@ 0x38
 80055d8:	443b      	add	r3, r7
 80055da:	9309      	str	r3, [sp, #36]	@ 0x24
 80055dc:	2300      	movs	r3, #0
 80055de:	930a      	str	r3, [sp, #40]	@ 0x28
 80055e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d865      	bhi.n	80056b2 <_dtoa_r+0x282>
 80055e6:	2b05      	cmp	r3, #5
 80055e8:	bfc4      	itt	gt
 80055ea:	3b04      	subgt	r3, #4
 80055ec:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80055ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055f0:	f1a3 0302 	sub.w	r3, r3, #2
 80055f4:	bfcc      	ite	gt
 80055f6:	2400      	movgt	r4, #0
 80055f8:	2401      	movle	r4, #1
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d864      	bhi.n	80056c8 <_dtoa_r+0x298>
 80055fe:	e8df f003 	tbb	[pc, r3]
 8005602:	382b      	.short	0x382b
 8005604:	5636      	.short	0x5636
 8005606:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800560a:	441e      	add	r6, r3
 800560c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005610:	2b20      	cmp	r3, #32
 8005612:	bfc1      	itttt	gt
 8005614:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005618:	fa08 f803 	lslgt.w	r8, r8, r3
 800561c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005620:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005624:	bfd6      	itet	le
 8005626:	f1c3 0320 	rsble	r3, r3, #32
 800562a:	ea48 0003 	orrgt.w	r0, r8, r3
 800562e:	fa04 f003 	lslle.w	r0, r4, r3
 8005632:	f7fa ff67 	bl	8000504 <__aeabi_ui2d>
 8005636:	2201      	movs	r2, #1
 8005638:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800563c:	3e01      	subs	r6, #1
 800563e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005640:	e776      	b.n	8005530 <_dtoa_r+0x100>
 8005642:	2301      	movs	r3, #1
 8005644:	e7b7      	b.n	80055b6 <_dtoa_r+0x186>
 8005646:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005648:	e7b6      	b.n	80055b8 <_dtoa_r+0x188>
 800564a:	427b      	negs	r3, r7
 800564c:	930a      	str	r3, [sp, #40]	@ 0x28
 800564e:	2300      	movs	r3, #0
 8005650:	eba8 0807 	sub.w	r8, r8, r7
 8005654:	930e      	str	r3, [sp, #56]	@ 0x38
 8005656:	e7c3      	b.n	80055e0 <_dtoa_r+0x1b0>
 8005658:	2300      	movs	r3, #0
 800565a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800565c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800565e:	2b00      	cmp	r3, #0
 8005660:	dc35      	bgt.n	80056ce <_dtoa_r+0x29e>
 8005662:	2301      	movs	r3, #1
 8005664:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005668:	461a      	mov	r2, r3
 800566a:	9221      	str	r2, [sp, #132]	@ 0x84
 800566c:	e00b      	b.n	8005686 <_dtoa_r+0x256>
 800566e:	2301      	movs	r3, #1
 8005670:	e7f3      	b.n	800565a <_dtoa_r+0x22a>
 8005672:	2300      	movs	r3, #0
 8005674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005676:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	3301      	adds	r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	9307      	str	r3, [sp, #28]
 8005682:	bfb8      	it	lt
 8005684:	2301      	movlt	r3, #1
 8005686:	f8db 001c 	ldr.w	r0, [fp, #28]
 800568a:	2100      	movs	r1, #0
 800568c:	2204      	movs	r2, #4
 800568e:	f102 0514 	add.w	r5, r2, #20
 8005692:	429d      	cmp	r5, r3
 8005694:	d91f      	bls.n	80056d6 <_dtoa_r+0x2a6>
 8005696:	6041      	str	r1, [r0, #4]
 8005698:	4658      	mov	r0, fp
 800569a:	f000 fd91 	bl	80061c0 <_Balloc>
 800569e:	4682      	mov	sl, r0
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d13b      	bne.n	800571c <_dtoa_r+0x2ec>
 80056a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <_dtoa_r+0x2e8>)
 80056a6:	4602      	mov	r2, r0
 80056a8:	f240 11af 	movw	r1, #431	@ 0x1af
 80056ac:	e6d4      	b.n	8005458 <_dtoa_r+0x28>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e7e0      	b.n	8005674 <_dtoa_r+0x244>
 80056b2:	2401      	movs	r4, #1
 80056b4:	2300      	movs	r3, #0
 80056b6:	9320      	str	r3, [sp, #128]	@ 0x80
 80056b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2312      	movs	r3, #18
 80056c6:	e7d0      	b.n	800566a <_dtoa_r+0x23a>
 80056c8:	2301      	movs	r3, #1
 80056ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056cc:	e7f5      	b.n	80056ba <_dtoa_r+0x28a>
 80056ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80056d4:	e7d7      	b.n	8005686 <_dtoa_r+0x256>
 80056d6:	3101      	adds	r1, #1
 80056d8:	0052      	lsls	r2, r2, #1
 80056da:	e7d8      	b.n	800568e <_dtoa_r+0x25e>
 80056dc:	f3af 8000 	nop.w
 80056e0:	636f4361 	.word	0x636f4361
 80056e4:	3fd287a7 	.word	0x3fd287a7
 80056e8:	8b60c8b3 	.word	0x8b60c8b3
 80056ec:	3fc68a28 	.word	0x3fc68a28
 80056f0:	509f79fb 	.word	0x509f79fb
 80056f4:	3fd34413 	.word	0x3fd34413
 80056f8:	080070d5 	.word	0x080070d5
 80056fc:	080070ec 	.word	0x080070ec
 8005700:	7ff00000 	.word	0x7ff00000
 8005704:	080070d1 	.word	0x080070d1
 8005708:	080070a5 	.word	0x080070a5
 800570c:	080070a4 	.word	0x080070a4
 8005710:	3ff80000 	.word	0x3ff80000
 8005714:	080071e8 	.word	0x080071e8
 8005718:	08007144 	.word	0x08007144
 800571c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005720:	6018      	str	r0, [r3, #0]
 8005722:	9b07      	ldr	r3, [sp, #28]
 8005724:	2b0e      	cmp	r3, #14
 8005726:	f200 80a4 	bhi.w	8005872 <_dtoa_r+0x442>
 800572a:	2c00      	cmp	r4, #0
 800572c:	f000 80a1 	beq.w	8005872 <_dtoa_r+0x442>
 8005730:	2f00      	cmp	r7, #0
 8005732:	dd33      	ble.n	800579c <_dtoa_r+0x36c>
 8005734:	4b86      	ldr	r3, [pc, #536]	@ (8005950 <_dtoa_r+0x520>)
 8005736:	f007 020f 	and.w	r2, r7, #15
 800573a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800573e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005742:	05f8      	lsls	r0, r7, #23
 8005744:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005748:	ea4f 1427 	mov.w	r4, r7, asr #4
 800574c:	d516      	bpl.n	800577c <_dtoa_r+0x34c>
 800574e:	4b81      	ldr	r3, [pc, #516]	@ (8005954 <_dtoa_r+0x524>)
 8005750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005758:	f7fb f878 	bl	800084c <__aeabi_ddiv>
 800575c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005760:	f004 040f 	and.w	r4, r4, #15
 8005764:	2603      	movs	r6, #3
 8005766:	4d7b      	ldr	r5, [pc, #492]	@ (8005954 <_dtoa_r+0x524>)
 8005768:	b954      	cbnz	r4, 8005780 <_dtoa_r+0x350>
 800576a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005772:	f7fb f86b 	bl	800084c <__aeabi_ddiv>
 8005776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577a:	e028      	b.n	80057ce <_dtoa_r+0x39e>
 800577c:	2602      	movs	r6, #2
 800577e:	e7f2      	b.n	8005766 <_dtoa_r+0x336>
 8005780:	07e1      	lsls	r1, r4, #31
 8005782:	d508      	bpl.n	8005796 <_dtoa_r+0x366>
 8005784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800578c:	f7fa ff34 	bl	80005f8 <__aeabi_dmul>
 8005790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005794:	3601      	adds	r6, #1
 8005796:	1064      	asrs	r4, r4, #1
 8005798:	3508      	adds	r5, #8
 800579a:	e7e5      	b.n	8005768 <_dtoa_r+0x338>
 800579c:	f000 80d2 	beq.w	8005944 <_dtoa_r+0x514>
 80057a0:	427c      	negs	r4, r7
 80057a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <_dtoa_r+0x520>)
 80057a4:	4d6b      	ldr	r5, [pc, #428]	@ (8005954 <_dtoa_r+0x524>)
 80057a6:	f004 020f 	and.w	r2, r4, #15
 80057aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057b6:	f7fa ff1f 	bl	80005f8 <__aeabi_dmul>
 80057ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057be:	1124      	asrs	r4, r4, #4
 80057c0:	2300      	movs	r3, #0
 80057c2:	2602      	movs	r6, #2
 80057c4:	2c00      	cmp	r4, #0
 80057c6:	f040 80b2 	bne.w	800592e <_dtoa_r+0x4fe>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1d3      	bne.n	8005776 <_dtoa_r+0x346>
 80057ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80b7 	beq.w	8005948 <_dtoa_r+0x518>
 80057da:	4b5f      	ldr	r3, [pc, #380]	@ (8005958 <_dtoa_r+0x528>)
 80057dc:	2200      	movs	r2, #0
 80057de:	4620      	mov	r0, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7fb f97b 	bl	8000adc <__aeabi_dcmplt>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f000 80ae 	beq.w	8005948 <_dtoa_r+0x518>
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80aa 	beq.w	8005948 <_dtoa_r+0x518>
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd37      	ble.n	800586a <_dtoa_r+0x43a>
 80057fa:	1e7b      	subs	r3, r7, #1
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	4620      	mov	r0, r4
 8005800:	4b56      	ldr	r3, [pc, #344]	@ (800595c <_dtoa_r+0x52c>)
 8005802:	2200      	movs	r2, #0
 8005804:	4629      	mov	r1, r5
 8005806:	f7fa fef7 	bl	80005f8 <__aeabi_dmul>
 800580a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800580e:	9c08      	ldr	r4, [sp, #32]
 8005810:	3601      	adds	r6, #1
 8005812:	4630      	mov	r0, r6
 8005814:	f7fa fe86 	bl	8000524 <__aeabi_i2d>
 8005818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581c:	f7fa feec 	bl	80005f8 <__aeabi_dmul>
 8005820:	4b4f      	ldr	r3, [pc, #316]	@ (8005960 <_dtoa_r+0x530>)
 8005822:	2200      	movs	r2, #0
 8005824:	f7fa fd32 	bl	800028c <__adddf3>
 8005828:	4605      	mov	r5, r0
 800582a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800582e:	2c00      	cmp	r4, #0
 8005830:	f040 809a 	bne.w	8005968 <_dtoa_r+0x538>
 8005834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005838:	4b4a      	ldr	r3, [pc, #296]	@ (8005964 <_dtoa_r+0x534>)
 800583a:	2200      	movs	r2, #0
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005848:	462a      	mov	r2, r5
 800584a:	4633      	mov	r3, r6
 800584c:	f7fb f964 	bl	8000b18 <__aeabi_dcmpgt>
 8005850:	2800      	cmp	r0, #0
 8005852:	f040 828e 	bne.w	8005d72 <_dtoa_r+0x942>
 8005856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585a:	462a      	mov	r2, r5
 800585c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005860:	f7fb f93c 	bl	8000adc <__aeabi_dcmplt>
 8005864:	2800      	cmp	r0, #0
 8005866:	f040 8127 	bne.w	8005ab8 <_dtoa_r+0x688>
 800586a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800586e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005872:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005874:	2b00      	cmp	r3, #0
 8005876:	f2c0 8163 	blt.w	8005b40 <_dtoa_r+0x710>
 800587a:	2f0e      	cmp	r7, #14
 800587c:	f300 8160 	bgt.w	8005b40 <_dtoa_r+0x710>
 8005880:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <_dtoa_r+0x520>)
 8005882:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005886:	e9d3 3400 	ldrd	r3, r4, [r3]
 800588a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800588e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005890:	2b00      	cmp	r3, #0
 8005892:	da03      	bge.n	800589c <_dtoa_r+0x46c>
 8005894:	9b07      	ldr	r3, [sp, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f340 8100 	ble.w	8005a9c <_dtoa_r+0x66c>
 800589c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80058a0:	4656      	mov	r6, sl
 80058a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7fa ffcf 	bl	800084c <__aeabi_ddiv>
 80058ae:	f7fb f953 	bl	8000b58 <__aeabi_d2iz>
 80058b2:	4680      	mov	r8, r0
 80058b4:	f7fa fe36 	bl	8000524 <__aeabi_i2d>
 80058b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058bc:	f7fa fe9c 	bl	80005f8 <__aeabi_dmul>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	f806 4b01 	strb.w	r4, [r6], #1
 80058d4:	9d07      	ldr	r5, [sp, #28]
 80058d6:	eba6 040a 	sub.w	r4, r6, sl
 80058da:	42a5      	cmp	r5, r4
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	f040 8116 	bne.w	8005b10 <_dtoa_r+0x6e0>
 80058e4:	f7fa fcd2 	bl	800028c <__adddf3>
 80058e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	f7fb f912 	bl	8000b18 <__aeabi_dcmpgt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f040 80f8 	bne.w	8005aea <_dtoa_r+0x6ba>
 80058fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058fe:	4620      	mov	r0, r4
 8005900:	4629      	mov	r1, r5
 8005902:	f7fb f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005906:	b118      	cbz	r0, 8005910 <_dtoa_r+0x4e0>
 8005908:	f018 0f01 	tst.w	r8, #1
 800590c:	f040 80ed 	bne.w	8005aea <_dtoa_r+0x6ba>
 8005910:	4649      	mov	r1, r9
 8005912:	4658      	mov	r0, fp
 8005914:	f000 fc94 	bl	8006240 <_Bfree>
 8005918:	2300      	movs	r3, #0
 800591a:	7033      	strb	r3, [r6, #0]
 800591c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800591e:	3701      	adds	r7, #1
 8005920:	601f      	str	r7, [r3, #0]
 8005922:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8320 	beq.w	8005f6a <_dtoa_r+0xb3a>
 800592a:	601e      	str	r6, [r3, #0]
 800592c:	e31d      	b.n	8005f6a <_dtoa_r+0xb3a>
 800592e:	07e2      	lsls	r2, r4, #31
 8005930:	d505      	bpl.n	800593e <_dtoa_r+0x50e>
 8005932:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005936:	f7fa fe5f 	bl	80005f8 <__aeabi_dmul>
 800593a:	3601      	adds	r6, #1
 800593c:	2301      	movs	r3, #1
 800593e:	1064      	asrs	r4, r4, #1
 8005940:	3508      	adds	r5, #8
 8005942:	e73f      	b.n	80057c4 <_dtoa_r+0x394>
 8005944:	2602      	movs	r6, #2
 8005946:	e742      	b.n	80057ce <_dtoa_r+0x39e>
 8005948:	9c07      	ldr	r4, [sp, #28]
 800594a:	9704      	str	r7, [sp, #16]
 800594c:	e761      	b.n	8005812 <_dtoa_r+0x3e2>
 800594e:	bf00      	nop
 8005950:	080071e8 	.word	0x080071e8
 8005954:	080071c0 	.word	0x080071c0
 8005958:	3ff00000 	.word	0x3ff00000
 800595c:	40240000 	.word	0x40240000
 8005960:	401c0000 	.word	0x401c0000
 8005964:	40140000 	.word	0x40140000
 8005968:	4b70      	ldr	r3, [pc, #448]	@ (8005b2c <_dtoa_r+0x6fc>)
 800596a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800596c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005970:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005974:	4454      	add	r4, sl
 8005976:	2900      	cmp	r1, #0
 8005978:	d045      	beq.n	8005a06 <_dtoa_r+0x5d6>
 800597a:	496d      	ldr	r1, [pc, #436]	@ (8005b30 <_dtoa_r+0x700>)
 800597c:	2000      	movs	r0, #0
 800597e:	f7fa ff65 	bl	800084c <__aeabi_ddiv>
 8005982:	4633      	mov	r3, r6
 8005984:	462a      	mov	r2, r5
 8005986:	f7fa fc7f 	bl	8000288 <__aeabi_dsub>
 800598a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800598e:	4656      	mov	r6, sl
 8005990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005994:	f7fb f8e0 	bl	8000b58 <__aeabi_d2iz>
 8005998:	4605      	mov	r5, r0
 800599a:	f7fa fdc3 	bl	8000524 <__aeabi_i2d>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a6:	f7fa fc6f 	bl	8000288 <__aeabi_dsub>
 80059aa:	3530      	adds	r5, #48	@ 0x30
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059b4:	f806 5b01 	strb.w	r5, [r6], #1
 80059b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059bc:	f7fb f88e 	bl	8000adc <__aeabi_dcmplt>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d163      	bne.n	8005a8c <_dtoa_r+0x65c>
 80059c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c8:	495a      	ldr	r1, [pc, #360]	@ (8005b34 <_dtoa_r+0x704>)
 80059ca:	2000      	movs	r0, #0
 80059cc:	f7fa fc5c 	bl	8000288 <__aeabi_dsub>
 80059d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059d4:	f7fb f882 	bl	8000adc <__aeabi_dcmplt>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f040 8087 	bne.w	8005aec <_dtoa_r+0x6bc>
 80059de:	42a6      	cmp	r6, r4
 80059e0:	f43f af43 	beq.w	800586a <_dtoa_r+0x43a>
 80059e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059e8:	4b53      	ldr	r3, [pc, #332]	@ (8005b38 <_dtoa_r+0x708>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	f7fa fe04 	bl	80005f8 <__aeabi_dmul>
 80059f0:	4b51      	ldr	r3, [pc, #324]	@ (8005b38 <_dtoa_r+0x708>)
 80059f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059f6:	2200      	movs	r2, #0
 80059f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059fc:	f7fa fdfc 	bl	80005f8 <__aeabi_dmul>
 8005a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a04:	e7c4      	b.n	8005990 <_dtoa_r+0x560>
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f7fa fdf5 	bl	80005f8 <__aeabi_dmul>
 8005a0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a12:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a14:	4656      	mov	r6, sl
 8005a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a1a:	f7fb f89d 	bl	8000b58 <__aeabi_d2iz>
 8005a1e:	4605      	mov	r5, r0
 8005a20:	f7fa fd80 	bl	8000524 <__aeabi_i2d>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2c:	f7fa fc2c 	bl	8000288 <__aeabi_dsub>
 8005a30:	3530      	adds	r5, #48	@ 0x30
 8005a32:	f806 5b01 	strb.w	r5, [r6], #1
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	d124      	bne.n	8005a90 <_dtoa_r+0x660>
 8005a46:	4b3a      	ldr	r3, [pc, #232]	@ (8005b30 <_dtoa_r+0x700>)
 8005a48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a4c:	f7fa fc1e 	bl	800028c <__adddf3>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a58:	f7fb f85e 	bl	8000b18 <__aeabi_dcmpgt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d145      	bne.n	8005aec <_dtoa_r+0x6bc>
 8005a60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a64:	4932      	ldr	r1, [pc, #200]	@ (8005b30 <_dtoa_r+0x700>)
 8005a66:	2000      	movs	r0, #0
 8005a68:	f7fa fc0e 	bl	8000288 <__aeabi_dsub>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a74:	f7fb f832 	bl	8000adc <__aeabi_dcmplt>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f43f aef6 	beq.w	800586a <_dtoa_r+0x43a>
 8005a7e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a80:	1e73      	subs	r3, r6, #1
 8005a82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a88:	2b30      	cmp	r3, #48	@ 0x30
 8005a8a:	d0f8      	beq.n	8005a7e <_dtoa_r+0x64e>
 8005a8c:	9f04      	ldr	r7, [sp, #16]
 8005a8e:	e73f      	b.n	8005910 <_dtoa_r+0x4e0>
 8005a90:	4b29      	ldr	r3, [pc, #164]	@ (8005b38 <_dtoa_r+0x708>)
 8005a92:	f7fa fdb1 	bl	80005f8 <__aeabi_dmul>
 8005a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a9a:	e7bc      	b.n	8005a16 <_dtoa_r+0x5e6>
 8005a9c:	d10c      	bne.n	8005ab8 <_dtoa_r+0x688>
 8005a9e:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <_dtoa_r+0x70c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa6:	f7fa fda7 	bl	80005f8 <__aeabi_dmul>
 8005aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aae:	f7fb f829 	bl	8000b04 <__aeabi_dcmpge>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f000 815b 	beq.w	8005d6e <_dtoa_r+0x93e>
 8005ab8:	2400      	movs	r4, #0
 8005aba:	4625      	mov	r5, r4
 8005abc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	4656      	mov	r6, sl
 8005ac4:	2700      	movs	r7, #0
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4658      	mov	r0, fp
 8005aca:	f000 fbb9 	bl	8006240 <_Bfree>
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	d0dc      	beq.n	8005a8c <_dtoa_r+0x65c>
 8005ad2:	b12f      	cbz	r7, 8005ae0 <_dtoa_r+0x6b0>
 8005ad4:	42af      	cmp	r7, r5
 8005ad6:	d003      	beq.n	8005ae0 <_dtoa_r+0x6b0>
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4658      	mov	r0, fp
 8005adc:	f000 fbb0 	bl	8006240 <_Bfree>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4658      	mov	r0, fp
 8005ae4:	f000 fbac 	bl	8006240 <_Bfree>
 8005ae8:	e7d0      	b.n	8005a8c <_dtoa_r+0x65c>
 8005aea:	9704      	str	r7, [sp, #16]
 8005aec:	4633      	mov	r3, r6
 8005aee:	461e      	mov	r6, r3
 8005af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af4:	2a39      	cmp	r2, #57	@ 0x39
 8005af6:	d107      	bne.n	8005b08 <_dtoa_r+0x6d8>
 8005af8:	459a      	cmp	sl, r3
 8005afa:	d1f8      	bne.n	8005aee <_dtoa_r+0x6be>
 8005afc:	9a04      	ldr	r2, [sp, #16]
 8005afe:	3201      	adds	r2, #1
 8005b00:	9204      	str	r2, [sp, #16]
 8005b02:	2230      	movs	r2, #48	@ 0x30
 8005b04:	f88a 2000 	strb.w	r2, [sl]
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	3201      	adds	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e7bd      	b.n	8005a8c <_dtoa_r+0x65c>
 8005b10:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <_dtoa_r+0x708>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	f7fa ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f43f aebc 	beq.w	80058a2 <_dtoa_r+0x472>
 8005b2a:	e6f1      	b.n	8005910 <_dtoa_r+0x4e0>
 8005b2c:	080071e8 	.word	0x080071e8
 8005b30:	3fe00000 	.word	0x3fe00000
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	40240000 	.word	0x40240000
 8005b3c:	40140000 	.word	0x40140000
 8005b40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	f000 80db 	beq.w	8005cfe <_dtoa_r+0x8ce>
 8005b48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b4a:	2a01      	cmp	r2, #1
 8005b4c:	f300 80bf 	bgt.w	8005cce <_dtoa_r+0x89e>
 8005b50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	f000 80b7 	beq.w	8005cc6 <_dtoa_r+0x896>
 8005b58:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b5e:	4646      	mov	r6, r8
 8005b60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b62:	2101      	movs	r1, #1
 8005b64:	441a      	add	r2, r3
 8005b66:	4658      	mov	r0, fp
 8005b68:	4498      	add	r8, r3
 8005b6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b6c:	f000 fc1c 	bl	80063a8 <__i2b>
 8005b70:	4605      	mov	r5, r0
 8005b72:	b15e      	cbz	r6, 8005b8c <_dtoa_r+0x75c>
 8005b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd08      	ble.n	8005b8c <_dtoa_r+0x75c>
 8005b7a:	42b3      	cmp	r3, r6
 8005b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b7e:	bfa8      	it	ge
 8005b80:	4633      	movge	r3, r6
 8005b82:	eba8 0803 	sub.w	r8, r8, r3
 8005b86:	1af6      	subs	r6, r6, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b8e:	b1f3      	cbz	r3, 8005bce <_dtoa_r+0x79e>
 8005b90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80b7 	beq.w	8005d06 <_dtoa_r+0x8d6>
 8005b98:	b18c      	cbz	r4, 8005bbe <_dtoa_r+0x78e>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	f000 fcc2 	bl	8006528 <__pow5mult>
 8005ba4:	464a      	mov	r2, r9
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4605      	mov	r5, r0
 8005baa:	4658      	mov	r0, fp
 8005bac:	f000 fc12 	bl	80063d4 <__multiply>
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	9004      	str	r0, [sp, #16]
 8005bb4:	4658      	mov	r0, fp
 8005bb6:	f000 fb43 	bl	8006240 <_Bfree>
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	4699      	mov	r9, r3
 8005bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bc0:	1b1a      	subs	r2, r3, r4
 8005bc2:	d004      	beq.n	8005bce <_dtoa_r+0x79e>
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	4658      	mov	r0, fp
 8005bc8:	f000 fcae 	bl	8006528 <__pow5mult>
 8005bcc:	4681      	mov	r9, r0
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4658      	mov	r0, fp
 8005bd2:	f000 fbe9 	bl	80063a8 <__i2b>
 8005bd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bd8:	4604      	mov	r4, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 81c9 	beq.w	8005f72 <_dtoa_r+0xb42>
 8005be0:	461a      	mov	r2, r3
 8005be2:	4601      	mov	r1, r0
 8005be4:	4658      	mov	r0, fp
 8005be6:	f000 fc9f 	bl	8006528 <__pow5mult>
 8005bea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f300 808f 	bgt.w	8005d12 <_dtoa_r+0x8e2>
 8005bf4:	9b02      	ldr	r3, [sp, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 8087 	bne.w	8005d0a <_dtoa_r+0x8da>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 8083 	bne.w	8005d0e <_dtoa_r+0x8de>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c0e:	0d1b      	lsrs	r3, r3, #20
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	b12b      	cbz	r3, 8005c20 <_dtoa_r+0x7f0>
 8005c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c16:	3301      	adds	r3, #1
 8005c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c1a:	f108 0801 	add.w	r8, r8, #1
 8005c1e:	2301      	movs	r3, #1
 8005c20:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 81aa 	beq.w	8005f7e <_dtoa_r+0xb4e>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c30:	6918      	ldr	r0, [r3, #16]
 8005c32:	f000 fb6d 	bl	8006310 <__hi0bits>
 8005c36:	f1c0 0020 	rsb	r0, r0, #32
 8005c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c3c:	4418      	add	r0, r3
 8005c3e:	f010 001f 	ands.w	r0, r0, #31
 8005c42:	d071      	beq.n	8005d28 <_dtoa_r+0x8f8>
 8005c44:	f1c0 0320 	rsb	r3, r0, #32
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	dd65      	ble.n	8005d18 <_dtoa_r+0x8e8>
 8005c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4e:	f1c0 001c 	rsb	r0, r0, #28
 8005c52:	4403      	add	r3, r0
 8005c54:	4480      	add	r8, r0
 8005c56:	4406      	add	r6, r0
 8005c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	dd05      	ble.n	8005c6c <_dtoa_r+0x83c>
 8005c60:	4649      	mov	r1, r9
 8005c62:	4642      	mov	r2, r8
 8005c64:	4658      	mov	r0, fp
 8005c66:	f000 fcb9 	bl	80065dc <__lshift>
 8005c6a:	4681      	mov	r9, r0
 8005c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	dd05      	ble.n	8005c7e <_dtoa_r+0x84e>
 8005c72:	4621      	mov	r1, r4
 8005c74:	461a      	mov	r2, r3
 8005c76:	4658      	mov	r0, fp
 8005c78:	f000 fcb0 	bl	80065dc <__lshift>
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d053      	beq.n	8005d2c <_dtoa_r+0x8fc>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4648      	mov	r0, r9
 8005c88:	f000 fd14 	bl	80066b4 <__mcmp>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	da4d      	bge.n	8005d2c <_dtoa_r+0x8fc>
 8005c90:	1e7b      	subs	r3, r7, #1
 8005c92:	9304      	str	r3, [sp, #16]
 8005c94:	4649      	mov	r1, r9
 8005c96:	2300      	movs	r3, #0
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4658      	mov	r0, fp
 8005c9c:	f000 faf2 	bl	8006284 <__multadd>
 8005ca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ca2:	4681      	mov	r9, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 816c 	beq.w	8005f82 <_dtoa_r+0xb52>
 8005caa:	2300      	movs	r3, #0
 8005cac:	4629      	mov	r1, r5
 8005cae:	220a      	movs	r2, #10
 8005cb0:	4658      	mov	r0, fp
 8005cb2:	f000 fae7 	bl	8006284 <__multadd>
 8005cb6:	9b08      	ldr	r3, [sp, #32]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	4605      	mov	r5, r0
 8005cbc:	dc61      	bgt.n	8005d82 <_dtoa_r+0x952>
 8005cbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	dc3b      	bgt.n	8005d3c <_dtoa_r+0x90c>
 8005cc4:	e05d      	b.n	8005d82 <_dtoa_r+0x952>
 8005cc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cc8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005ccc:	e746      	b.n	8005b5c <_dtoa_r+0x72c>
 8005cce:	9b07      	ldr	r3, [sp, #28]
 8005cd0:	1e5c      	subs	r4, r3, #1
 8005cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	bfbf      	itttt	lt
 8005cd8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005cda:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005cdc:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005cde:	1ae3      	sublt	r3, r4, r3
 8005ce0:	bfb4      	ite	lt
 8005ce2:	18d2      	addlt	r2, r2, r3
 8005ce4:	1b1c      	subge	r4, r3, r4
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	bfbc      	itt	lt
 8005cea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005cec:	2400      	movlt	r4, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bfb5      	itete	lt
 8005cf2:	eba8 0603 	sublt.w	r6, r8, r3
 8005cf6:	9b07      	ldrge	r3, [sp, #28]
 8005cf8:	2300      	movlt	r3, #0
 8005cfa:	4646      	movge	r6, r8
 8005cfc:	e730      	b.n	8005b60 <_dtoa_r+0x730>
 8005cfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d00:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d02:	4646      	mov	r6, r8
 8005d04:	e735      	b.n	8005b72 <_dtoa_r+0x742>
 8005d06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d08:	e75c      	b.n	8005bc4 <_dtoa_r+0x794>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e788      	b.n	8005c20 <_dtoa_r+0x7f0>
 8005d0e:	9b02      	ldr	r3, [sp, #8]
 8005d10:	e786      	b.n	8005c20 <_dtoa_r+0x7f0>
 8005d12:	2300      	movs	r3, #0
 8005d14:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d16:	e788      	b.n	8005c2a <_dtoa_r+0x7fa>
 8005d18:	d09f      	beq.n	8005c5a <_dtoa_r+0x82a>
 8005d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d1c:	331c      	adds	r3, #28
 8005d1e:	441a      	add	r2, r3
 8005d20:	4498      	add	r8, r3
 8005d22:	441e      	add	r6, r3
 8005d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d26:	e798      	b.n	8005c5a <_dtoa_r+0x82a>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	e7f6      	b.n	8005d1a <_dtoa_r+0x8ea>
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	9704      	str	r7, [sp, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	dc20      	bgt.n	8005d76 <_dtoa_r+0x946>
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	dd1e      	ble.n	8005d7a <_dtoa_r+0x94a>
 8005d3c:	9b08      	ldr	r3, [sp, #32]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f47f aebc 	bne.w	8005abc <_dtoa_r+0x68c>
 8005d44:	4621      	mov	r1, r4
 8005d46:	2205      	movs	r2, #5
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f000 fa9b 	bl	8006284 <__multadd>
 8005d4e:	4601      	mov	r1, r0
 8005d50:	4604      	mov	r4, r0
 8005d52:	4648      	mov	r0, r9
 8005d54:	f000 fcae 	bl	80066b4 <__mcmp>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f77f aeaf 	ble.w	8005abc <_dtoa_r+0x68c>
 8005d5e:	4656      	mov	r6, sl
 8005d60:	2331      	movs	r3, #49	@ 0x31
 8005d62:	f806 3b01 	strb.w	r3, [r6], #1
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	9304      	str	r3, [sp, #16]
 8005d6c:	e6aa      	b.n	8005ac4 <_dtoa_r+0x694>
 8005d6e:	9c07      	ldr	r4, [sp, #28]
 8005d70:	9704      	str	r7, [sp, #16]
 8005d72:	4625      	mov	r5, r4
 8005d74:	e7f3      	b.n	8005d5e <_dtoa_r+0x92e>
 8005d76:	9b07      	ldr	r3, [sp, #28]
 8005d78:	9308      	str	r3, [sp, #32]
 8005d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8104 	beq.w	8005f8a <_dtoa_r+0xb5a>
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	dd05      	ble.n	8005d92 <_dtoa_r+0x962>
 8005d86:	4629      	mov	r1, r5
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4658      	mov	r0, fp
 8005d8c:	f000 fc26 	bl	80065dc <__lshift>
 8005d90:	4605      	mov	r5, r0
 8005d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d05a      	beq.n	8005e4e <_dtoa_r+0xa1e>
 8005d98:	6869      	ldr	r1, [r5, #4]
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f000 fa10 	bl	80061c0 <_Balloc>
 8005da0:	4606      	mov	r6, r0
 8005da2:	b928      	cbnz	r0, 8005db0 <_dtoa_r+0x980>
 8005da4:	4b84      	ldr	r3, [pc, #528]	@ (8005fb8 <_dtoa_r+0xb88>)
 8005da6:	4602      	mov	r2, r0
 8005da8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005dac:	f7ff bb54 	b.w	8005458 <_dtoa_r+0x28>
 8005db0:	692a      	ldr	r2, [r5, #16]
 8005db2:	3202      	adds	r2, #2
 8005db4:	0092      	lsls	r2, r2, #2
 8005db6:	f105 010c 	add.w	r1, r5, #12
 8005dba:	300c      	adds	r0, #12
 8005dbc:	f000 fffc 	bl	8006db8 <memcpy>
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4658      	mov	r0, fp
 8005dc6:	f000 fc09 	bl	80065dc <__lshift>
 8005dca:	f10a 0301 	add.w	r3, sl, #1
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	9b08      	ldr	r3, [sp, #32]
 8005dd2:	4453      	add	r3, sl
 8005dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd6:	9b02      	ldr	r3, [sp, #8]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	462f      	mov	r7, r5
 8005dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de0:	4605      	mov	r5, r0
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	4621      	mov	r1, r4
 8005de6:	3b01      	subs	r3, #1
 8005de8:	4648      	mov	r0, r9
 8005dea:	9302      	str	r3, [sp, #8]
 8005dec:	f7ff fa95 	bl	800531a <quorem>
 8005df0:	4639      	mov	r1, r7
 8005df2:	9008      	str	r0, [sp, #32]
 8005df4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005df8:	4648      	mov	r0, r9
 8005dfa:	f000 fc5b 	bl	80066b4 <__mcmp>
 8005dfe:	462a      	mov	r2, r5
 8005e00:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e02:	4621      	mov	r1, r4
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 fc71 	bl	80066ec <__mdiff>
 8005e0a:	68c2      	ldr	r2, [r0, #12]
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	bb02      	cbnz	r2, 8005e52 <_dtoa_r+0xa22>
 8005e10:	4601      	mov	r1, r0
 8005e12:	4648      	mov	r0, r9
 8005e14:	f000 fc4e 	bl	80066b4 <__mcmp>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4658      	mov	r0, fp
 8005e1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e20:	f000 fa0e 	bl	8006240 <_Bfree>
 8005e24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e28:	9e07      	ldr	r6, [sp, #28]
 8005e2a:	ea43 0102 	orr.w	r1, r3, r2
 8005e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e30:	4319      	orrs	r1, r3
 8005e32:	d110      	bne.n	8005e56 <_dtoa_r+0xa26>
 8005e34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e38:	d029      	beq.n	8005e8e <_dtoa_r+0xa5e>
 8005e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd02      	ble.n	8005e46 <_dtoa_r+0xa16>
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005e46:	9b02      	ldr	r3, [sp, #8]
 8005e48:	f883 8000 	strb.w	r8, [r3]
 8005e4c:	e63b      	b.n	8005ac6 <_dtoa_r+0x696>
 8005e4e:	4628      	mov	r0, r5
 8005e50:	e7bb      	b.n	8005dca <_dtoa_r+0x99a>
 8005e52:	2201      	movs	r2, #1
 8005e54:	e7e1      	b.n	8005e1a <_dtoa_r+0x9ea>
 8005e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	db04      	blt.n	8005e66 <_dtoa_r+0xa36>
 8005e5c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e62:	430b      	orrs	r3, r1
 8005e64:	d120      	bne.n	8005ea8 <_dtoa_r+0xa78>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	dded      	ble.n	8005e46 <_dtoa_r+0xa16>
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 fbb4 	bl	80065dc <__lshift>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4681      	mov	r9, r0
 8005e78:	f000 fc1c 	bl	80066b4 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	dc03      	bgt.n	8005e88 <_dtoa_r+0xa58>
 8005e80:	d1e1      	bne.n	8005e46 <_dtoa_r+0xa16>
 8005e82:	f018 0f01 	tst.w	r8, #1
 8005e86:	d0de      	beq.n	8005e46 <_dtoa_r+0xa16>
 8005e88:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e8c:	d1d8      	bne.n	8005e40 <_dtoa_r+0xa10>
 8005e8e:	9a02      	ldr	r2, [sp, #8]
 8005e90:	2339      	movs	r3, #57	@ 0x39
 8005e92:	7013      	strb	r3, [r2, #0]
 8005e94:	4633      	mov	r3, r6
 8005e96:	461e      	mov	r6, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e9e:	2a39      	cmp	r2, #57	@ 0x39
 8005ea0:	d052      	beq.n	8005f48 <_dtoa_r+0xb18>
 8005ea2:	3201      	adds	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e60e      	b.n	8005ac6 <_dtoa_r+0x696>
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	dd07      	ble.n	8005ebc <_dtoa_r+0xa8c>
 8005eac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005eb0:	d0ed      	beq.n	8005e8e <_dtoa_r+0xa5e>
 8005eb2:	9a02      	ldr	r2, [sp, #8]
 8005eb4:	f108 0301 	add.w	r3, r8, #1
 8005eb8:	7013      	strb	r3, [r2, #0]
 8005eba:	e604      	b.n	8005ac6 <_dtoa_r+0x696>
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	9a07      	ldr	r2, [sp, #28]
 8005ec0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d028      	beq.n	8005f1c <_dtoa_r+0xaec>
 8005eca:	4649      	mov	r1, r9
 8005ecc:	2300      	movs	r3, #0
 8005ece:	220a      	movs	r2, #10
 8005ed0:	4658      	mov	r0, fp
 8005ed2:	f000 f9d7 	bl	8006284 <__multadd>
 8005ed6:	42af      	cmp	r7, r5
 8005ed8:	4681      	mov	r9, r0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	f04f 020a 	mov.w	r2, #10
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4658      	mov	r0, fp
 8005ee6:	d107      	bne.n	8005ef8 <_dtoa_r+0xac8>
 8005ee8:	f000 f9cc 	bl	8006284 <__multadd>
 8005eec:	4607      	mov	r7, r0
 8005eee:	4605      	mov	r5, r0
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	9307      	str	r3, [sp, #28]
 8005ef6:	e774      	b.n	8005de2 <_dtoa_r+0x9b2>
 8005ef8:	f000 f9c4 	bl	8006284 <__multadd>
 8005efc:	4629      	mov	r1, r5
 8005efe:	4607      	mov	r7, r0
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	4658      	mov	r0, fp
 8005f06:	f000 f9bd 	bl	8006284 <__multadd>
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	e7f0      	b.n	8005ef0 <_dtoa_r+0xac0>
 8005f0e:	9b08      	ldr	r3, [sp, #32]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfcc      	ite	gt
 8005f14:	461e      	movgt	r6, r3
 8005f16:	2601      	movle	r6, #1
 8005f18:	4456      	add	r6, sl
 8005f1a:	2700      	movs	r7, #0
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4658      	mov	r0, fp
 8005f22:	f000 fb5b 	bl	80065dc <__lshift>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4681      	mov	r9, r0
 8005f2a:	f000 fbc3 	bl	80066b4 <__mcmp>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	dcb0      	bgt.n	8005e94 <_dtoa_r+0xa64>
 8005f32:	d102      	bne.n	8005f3a <_dtoa_r+0xb0a>
 8005f34:	f018 0f01 	tst.w	r8, #1
 8005f38:	d1ac      	bne.n	8005e94 <_dtoa_r+0xa64>
 8005f3a:	4633      	mov	r3, r6
 8005f3c:	461e      	mov	r6, r3
 8005f3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f42:	2a30      	cmp	r2, #48	@ 0x30
 8005f44:	d0fa      	beq.n	8005f3c <_dtoa_r+0xb0c>
 8005f46:	e5be      	b.n	8005ac6 <_dtoa_r+0x696>
 8005f48:	459a      	cmp	sl, r3
 8005f4a:	d1a4      	bne.n	8005e96 <_dtoa_r+0xa66>
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	2331      	movs	r3, #49	@ 0x31
 8005f54:	f88a 3000 	strb.w	r3, [sl]
 8005f58:	e5b5      	b.n	8005ac6 <_dtoa_r+0x696>
 8005f5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f5c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005fbc <_dtoa_r+0xb8c>
 8005f60:	b11b      	cbz	r3, 8005f6a <_dtoa_r+0xb3a>
 8005f62:	f10a 0308 	add.w	r3, sl, #8
 8005f66:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	b017      	add	sp, #92	@ 0x5c
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f77f ae3d 	ble.w	8005bf4 <_dtoa_r+0x7c4>
 8005f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f7e:	2001      	movs	r0, #1
 8005f80:	e65b      	b.n	8005c3a <_dtoa_r+0x80a>
 8005f82:	9b08      	ldr	r3, [sp, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f77f aed6 	ble.w	8005d36 <_dtoa_r+0x906>
 8005f8a:	4656      	mov	r6, sl
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f7ff f9c3 	bl	800531a <quorem>
 8005f94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f98:	f806 8b01 	strb.w	r8, [r6], #1
 8005f9c:	9b08      	ldr	r3, [sp, #32]
 8005f9e:	eba6 020a 	sub.w	r2, r6, sl
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	ddb3      	ble.n	8005f0e <_dtoa_r+0xade>
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	2300      	movs	r3, #0
 8005faa:	220a      	movs	r2, #10
 8005fac:	4658      	mov	r0, fp
 8005fae:	f000 f969 	bl	8006284 <__multadd>
 8005fb2:	4681      	mov	r9, r0
 8005fb4:	e7ea      	b.n	8005f8c <_dtoa_r+0xb5c>
 8005fb6:	bf00      	nop
 8005fb8:	08007144 	.word	0x08007144
 8005fbc:	080070c8 	.word	0x080070c8

08005fc0 <_free_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d041      	beq.n	800604c <_free_r+0x8c>
 8005fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fcc:	1f0c      	subs	r4, r1, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bfb8      	it	lt
 8005fd2:	18e4      	addlt	r4, r4, r3
 8005fd4:	f000 f8e8 	bl	80061a8 <__malloc_lock>
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <_free_r+0x90>)
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	b933      	cbnz	r3, 8005fec <_free_r+0x2c>
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	6014      	str	r4, [r2, #0]
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe8:	f000 b8e4 	b.w	80061b4 <__malloc_unlock>
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d908      	bls.n	8006002 <_free_r+0x42>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	1821      	adds	r1, r4, r0
 8005ff4:	428b      	cmp	r3, r1
 8005ff6:	bf01      	itttt	eq
 8005ff8:	6819      	ldreq	r1, [r3, #0]
 8005ffa:	685b      	ldreq	r3, [r3, #4]
 8005ffc:	1809      	addeq	r1, r1, r0
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	e7ed      	b.n	8005fde <_free_r+0x1e>
 8006002:	461a      	mov	r2, r3
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b10b      	cbz	r3, 800600c <_free_r+0x4c>
 8006008:	42a3      	cmp	r3, r4
 800600a:	d9fa      	bls.n	8006002 <_free_r+0x42>
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	1850      	adds	r0, r2, r1
 8006010:	42a0      	cmp	r0, r4
 8006012:	d10b      	bne.n	800602c <_free_r+0x6c>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	4401      	add	r1, r0
 8006018:	1850      	adds	r0, r2, r1
 800601a:	4283      	cmp	r3, r0
 800601c:	6011      	str	r1, [r2, #0]
 800601e:	d1e0      	bne.n	8005fe2 <_free_r+0x22>
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	4408      	add	r0, r1
 8006028:	6010      	str	r0, [r2, #0]
 800602a:	e7da      	b.n	8005fe2 <_free_r+0x22>
 800602c:	d902      	bls.n	8006034 <_free_r+0x74>
 800602e:	230c      	movs	r3, #12
 8006030:	602b      	str	r3, [r5, #0]
 8006032:	e7d6      	b.n	8005fe2 <_free_r+0x22>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	1821      	adds	r1, r4, r0
 8006038:	428b      	cmp	r3, r1
 800603a:	bf04      	itt	eq
 800603c:	6819      	ldreq	r1, [r3, #0]
 800603e:	685b      	ldreq	r3, [r3, #4]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	bf04      	itt	eq
 8006044:	1809      	addeq	r1, r1, r0
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	6054      	str	r4, [r2, #4]
 800604a:	e7ca      	b.n	8005fe2 <_free_r+0x22>
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	bf00      	nop
 8006050:	20000398 	.word	0x20000398

08006054 <malloc>:
 8006054:	4b02      	ldr	r3, [pc, #8]	@ (8006060 <malloc+0xc>)
 8006056:	4601      	mov	r1, r0
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	f000 b825 	b.w	80060a8 <_malloc_r>
 800605e:	bf00      	nop
 8006060:	20000018 	.word	0x20000018

08006064 <sbrk_aligned>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4e0f      	ldr	r6, [pc, #60]	@ (80060a4 <sbrk_aligned+0x40>)
 8006068:	460c      	mov	r4, r1
 800606a:	6831      	ldr	r1, [r6, #0]
 800606c:	4605      	mov	r5, r0
 800606e:	b911      	cbnz	r1, 8006076 <sbrk_aligned+0x12>
 8006070:	f000 fe92 	bl	8006d98 <_sbrk_r>
 8006074:	6030      	str	r0, [r6, #0]
 8006076:	4621      	mov	r1, r4
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fe8d 	bl	8006d98 <_sbrk_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d103      	bne.n	800608a <sbrk_aligned+0x26>
 8006082:	f04f 34ff 	mov.w	r4, #4294967295
 8006086:	4620      	mov	r0, r4
 8006088:	bd70      	pop	{r4, r5, r6, pc}
 800608a:	1cc4      	adds	r4, r0, #3
 800608c:	f024 0403 	bic.w	r4, r4, #3
 8006090:	42a0      	cmp	r0, r4
 8006092:	d0f8      	beq.n	8006086 <sbrk_aligned+0x22>
 8006094:	1a21      	subs	r1, r4, r0
 8006096:	4628      	mov	r0, r5
 8006098:	f000 fe7e 	bl	8006d98 <_sbrk_r>
 800609c:	3001      	adds	r0, #1
 800609e:	d1f2      	bne.n	8006086 <sbrk_aligned+0x22>
 80060a0:	e7ef      	b.n	8006082 <sbrk_aligned+0x1e>
 80060a2:	bf00      	nop
 80060a4:	20000394 	.word	0x20000394

080060a8 <_malloc_r>:
 80060a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	1ccd      	adds	r5, r1, #3
 80060ae:	f025 0503 	bic.w	r5, r5, #3
 80060b2:	3508      	adds	r5, #8
 80060b4:	2d0c      	cmp	r5, #12
 80060b6:	bf38      	it	cc
 80060b8:	250c      	movcc	r5, #12
 80060ba:	2d00      	cmp	r5, #0
 80060bc:	4606      	mov	r6, r0
 80060be:	db01      	blt.n	80060c4 <_malloc_r+0x1c>
 80060c0:	42a9      	cmp	r1, r5
 80060c2:	d904      	bls.n	80060ce <_malloc_r+0x26>
 80060c4:	230c      	movs	r3, #12
 80060c6:	6033      	str	r3, [r6, #0]
 80060c8:	2000      	movs	r0, #0
 80060ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061a4 <_malloc_r+0xfc>
 80060d2:	f000 f869 	bl	80061a8 <__malloc_lock>
 80060d6:	f8d8 3000 	ldr.w	r3, [r8]
 80060da:	461c      	mov	r4, r3
 80060dc:	bb44      	cbnz	r4, 8006130 <_malloc_r+0x88>
 80060de:	4629      	mov	r1, r5
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff ffbf 	bl	8006064 <sbrk_aligned>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	4604      	mov	r4, r0
 80060ea:	d158      	bne.n	800619e <_malloc_r+0xf6>
 80060ec:	f8d8 4000 	ldr.w	r4, [r8]
 80060f0:	4627      	mov	r7, r4
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d143      	bne.n	800617e <_malloc_r+0xd6>
 80060f6:	2c00      	cmp	r4, #0
 80060f8:	d04b      	beq.n	8006192 <_malloc_r+0xea>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	4639      	mov	r1, r7
 80060fe:	4630      	mov	r0, r6
 8006100:	eb04 0903 	add.w	r9, r4, r3
 8006104:	f000 fe48 	bl	8006d98 <_sbrk_r>
 8006108:	4581      	cmp	r9, r0
 800610a:	d142      	bne.n	8006192 <_malloc_r+0xea>
 800610c:	6821      	ldr	r1, [r4, #0]
 800610e:	1a6d      	subs	r5, r5, r1
 8006110:	4629      	mov	r1, r5
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ffa6 	bl	8006064 <sbrk_aligned>
 8006118:	3001      	adds	r0, #1
 800611a:	d03a      	beq.n	8006192 <_malloc_r+0xea>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	442b      	add	r3, r5
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	f8d8 3000 	ldr.w	r3, [r8]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	bb62      	cbnz	r2, 8006184 <_malloc_r+0xdc>
 800612a:	f8c8 7000 	str.w	r7, [r8]
 800612e:	e00f      	b.n	8006150 <_malloc_r+0xa8>
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	1b52      	subs	r2, r2, r5
 8006134:	d420      	bmi.n	8006178 <_malloc_r+0xd0>
 8006136:	2a0b      	cmp	r2, #11
 8006138:	d917      	bls.n	800616a <_malloc_r+0xc2>
 800613a:	1961      	adds	r1, r4, r5
 800613c:	42a3      	cmp	r3, r4
 800613e:	6025      	str	r5, [r4, #0]
 8006140:	bf18      	it	ne
 8006142:	6059      	strne	r1, [r3, #4]
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	bf08      	it	eq
 8006148:	f8c8 1000 	streq.w	r1, [r8]
 800614c:	5162      	str	r2, [r4, r5]
 800614e:	604b      	str	r3, [r1, #4]
 8006150:	4630      	mov	r0, r6
 8006152:	f000 f82f 	bl	80061b4 <__malloc_unlock>
 8006156:	f104 000b 	add.w	r0, r4, #11
 800615a:	1d23      	adds	r3, r4, #4
 800615c:	f020 0007 	bic.w	r0, r0, #7
 8006160:	1ac2      	subs	r2, r0, r3
 8006162:	bf1c      	itt	ne
 8006164:	1a1b      	subne	r3, r3, r0
 8006166:	50a3      	strne	r3, [r4, r2]
 8006168:	e7af      	b.n	80060ca <_malloc_r+0x22>
 800616a:	6862      	ldr	r2, [r4, #4]
 800616c:	42a3      	cmp	r3, r4
 800616e:	bf0c      	ite	eq
 8006170:	f8c8 2000 	streq.w	r2, [r8]
 8006174:	605a      	strne	r2, [r3, #4]
 8006176:	e7eb      	b.n	8006150 <_malloc_r+0xa8>
 8006178:	4623      	mov	r3, r4
 800617a:	6864      	ldr	r4, [r4, #4]
 800617c:	e7ae      	b.n	80060dc <_malloc_r+0x34>
 800617e:	463c      	mov	r4, r7
 8006180:	687f      	ldr	r7, [r7, #4]
 8006182:	e7b6      	b.n	80060f2 <_malloc_r+0x4a>
 8006184:	461a      	mov	r2, r3
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	42a3      	cmp	r3, r4
 800618a:	d1fb      	bne.n	8006184 <_malloc_r+0xdc>
 800618c:	2300      	movs	r3, #0
 800618e:	6053      	str	r3, [r2, #4]
 8006190:	e7de      	b.n	8006150 <_malloc_r+0xa8>
 8006192:	230c      	movs	r3, #12
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	4630      	mov	r0, r6
 8006198:	f000 f80c 	bl	80061b4 <__malloc_unlock>
 800619c:	e794      	b.n	80060c8 <_malloc_r+0x20>
 800619e:	6005      	str	r5, [r0, #0]
 80061a0:	e7d6      	b.n	8006150 <_malloc_r+0xa8>
 80061a2:	bf00      	nop
 80061a4:	20000398 	.word	0x20000398

080061a8 <__malloc_lock>:
 80061a8:	4801      	ldr	r0, [pc, #4]	@ (80061b0 <__malloc_lock+0x8>)
 80061aa:	f7ff b8b4 	b.w	8005316 <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	20000390 	.word	0x20000390

080061b4 <__malloc_unlock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	@ (80061bc <__malloc_unlock+0x8>)
 80061b6:	f7ff b8af 	b.w	8005318 <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	20000390 	.word	0x20000390

080061c0 <_Balloc>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	69c6      	ldr	r6, [r0, #28]
 80061c4:	4604      	mov	r4, r0
 80061c6:	460d      	mov	r5, r1
 80061c8:	b976      	cbnz	r6, 80061e8 <_Balloc+0x28>
 80061ca:	2010      	movs	r0, #16
 80061cc:	f7ff ff42 	bl	8006054 <malloc>
 80061d0:	4602      	mov	r2, r0
 80061d2:	61e0      	str	r0, [r4, #28]
 80061d4:	b920      	cbnz	r0, 80061e0 <_Balloc+0x20>
 80061d6:	4b18      	ldr	r3, [pc, #96]	@ (8006238 <_Balloc+0x78>)
 80061d8:	4818      	ldr	r0, [pc, #96]	@ (800623c <_Balloc+0x7c>)
 80061da:	216b      	movs	r1, #107	@ 0x6b
 80061dc:	f000 fdfa 	bl	8006dd4 <__assert_func>
 80061e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061e4:	6006      	str	r6, [r0, #0]
 80061e6:	60c6      	str	r6, [r0, #12]
 80061e8:	69e6      	ldr	r6, [r4, #28]
 80061ea:	68f3      	ldr	r3, [r6, #12]
 80061ec:	b183      	cbz	r3, 8006210 <_Balloc+0x50>
 80061ee:	69e3      	ldr	r3, [r4, #28]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061f6:	b9b8      	cbnz	r0, 8006228 <_Balloc+0x68>
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f605 	lsl.w	r6, r1, r5
 80061fe:	1d72      	adds	r2, r6, #5
 8006200:	0092      	lsls	r2, r2, #2
 8006202:	4620      	mov	r0, r4
 8006204:	f000 fe04 	bl	8006e10 <_calloc_r>
 8006208:	b160      	cbz	r0, 8006224 <_Balloc+0x64>
 800620a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800620e:	e00e      	b.n	800622e <_Balloc+0x6e>
 8006210:	2221      	movs	r2, #33	@ 0x21
 8006212:	2104      	movs	r1, #4
 8006214:	4620      	mov	r0, r4
 8006216:	f000 fdfb 	bl	8006e10 <_calloc_r>
 800621a:	69e3      	ldr	r3, [r4, #28]
 800621c:	60f0      	str	r0, [r6, #12]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e4      	bne.n	80061ee <_Balloc+0x2e>
 8006224:	2000      	movs	r0, #0
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	6802      	ldr	r2, [r0, #0]
 800622a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800622e:	2300      	movs	r3, #0
 8006230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006234:	e7f7      	b.n	8006226 <_Balloc+0x66>
 8006236:	bf00      	nop
 8006238:	080070d5 	.word	0x080070d5
 800623c:	08007155 	.word	0x08007155

08006240 <_Bfree>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	69c6      	ldr	r6, [r0, #28]
 8006244:	4605      	mov	r5, r0
 8006246:	460c      	mov	r4, r1
 8006248:	b976      	cbnz	r6, 8006268 <_Bfree+0x28>
 800624a:	2010      	movs	r0, #16
 800624c:	f7ff ff02 	bl	8006054 <malloc>
 8006250:	4602      	mov	r2, r0
 8006252:	61e8      	str	r0, [r5, #28]
 8006254:	b920      	cbnz	r0, 8006260 <_Bfree+0x20>
 8006256:	4b09      	ldr	r3, [pc, #36]	@ (800627c <_Bfree+0x3c>)
 8006258:	4809      	ldr	r0, [pc, #36]	@ (8006280 <_Bfree+0x40>)
 800625a:	218f      	movs	r1, #143	@ 0x8f
 800625c:	f000 fdba 	bl	8006dd4 <__assert_func>
 8006260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006264:	6006      	str	r6, [r0, #0]
 8006266:	60c6      	str	r6, [r0, #12]
 8006268:	b13c      	cbz	r4, 800627a <_Bfree+0x3a>
 800626a:	69eb      	ldr	r3, [r5, #28]
 800626c:	6862      	ldr	r2, [r4, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006274:	6021      	str	r1, [r4, #0]
 8006276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	080070d5 	.word	0x080070d5
 8006280:	08007155 	.word	0x08007155

08006284 <__multadd>:
 8006284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006288:	690d      	ldr	r5, [r1, #16]
 800628a:	4607      	mov	r7, r0
 800628c:	460c      	mov	r4, r1
 800628e:	461e      	mov	r6, r3
 8006290:	f101 0c14 	add.w	ip, r1, #20
 8006294:	2000      	movs	r0, #0
 8006296:	f8dc 3000 	ldr.w	r3, [ip]
 800629a:	b299      	uxth	r1, r3
 800629c:	fb02 6101 	mla	r1, r2, r1, r6
 80062a0:	0c1e      	lsrs	r6, r3, #16
 80062a2:	0c0b      	lsrs	r3, r1, #16
 80062a4:	fb02 3306 	mla	r3, r2, r6, r3
 80062a8:	b289      	uxth	r1, r1
 80062aa:	3001      	adds	r0, #1
 80062ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062b0:	4285      	cmp	r5, r0
 80062b2:	f84c 1b04 	str.w	r1, [ip], #4
 80062b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062ba:	dcec      	bgt.n	8006296 <__multadd+0x12>
 80062bc:	b30e      	cbz	r6, 8006302 <__multadd+0x7e>
 80062be:	68a3      	ldr	r3, [r4, #8]
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc19      	bgt.n	80062f8 <__multadd+0x74>
 80062c4:	6861      	ldr	r1, [r4, #4]
 80062c6:	4638      	mov	r0, r7
 80062c8:	3101      	adds	r1, #1
 80062ca:	f7ff ff79 	bl	80061c0 <_Balloc>
 80062ce:	4680      	mov	r8, r0
 80062d0:	b928      	cbnz	r0, 80062de <__multadd+0x5a>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <__multadd+0x84>)
 80062d6:	480d      	ldr	r0, [pc, #52]	@ (800630c <__multadd+0x88>)
 80062d8:	21ba      	movs	r1, #186	@ 0xba
 80062da:	f000 fd7b 	bl	8006dd4 <__assert_func>
 80062de:	6922      	ldr	r2, [r4, #16]
 80062e0:	3202      	adds	r2, #2
 80062e2:	f104 010c 	add.w	r1, r4, #12
 80062e6:	0092      	lsls	r2, r2, #2
 80062e8:	300c      	adds	r0, #12
 80062ea:	f000 fd65 	bl	8006db8 <memcpy>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4638      	mov	r0, r7
 80062f2:	f7ff ffa5 	bl	8006240 <_Bfree>
 80062f6:	4644      	mov	r4, r8
 80062f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062fc:	3501      	adds	r5, #1
 80062fe:	615e      	str	r6, [r3, #20]
 8006300:	6125      	str	r5, [r4, #16]
 8006302:	4620      	mov	r0, r4
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	08007144 	.word	0x08007144
 800630c:	08007155 	.word	0x08007155

08006310 <__hi0bits>:
 8006310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006314:	4603      	mov	r3, r0
 8006316:	bf36      	itet	cc
 8006318:	0403      	lslcc	r3, r0, #16
 800631a:	2000      	movcs	r0, #0
 800631c:	2010      	movcc	r0, #16
 800631e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006322:	bf3c      	itt	cc
 8006324:	021b      	lslcc	r3, r3, #8
 8006326:	3008      	addcc	r0, #8
 8006328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800632c:	bf3c      	itt	cc
 800632e:	011b      	lslcc	r3, r3, #4
 8006330:	3004      	addcc	r0, #4
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006336:	bf3c      	itt	cc
 8006338:	009b      	lslcc	r3, r3, #2
 800633a:	3002      	addcc	r0, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	db05      	blt.n	800634c <__hi0bits+0x3c>
 8006340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006344:	f100 0001 	add.w	r0, r0, #1
 8006348:	bf08      	it	eq
 800634a:	2020      	moveq	r0, #32
 800634c:	4770      	bx	lr

0800634e <__lo0bits>:
 800634e:	6803      	ldr	r3, [r0, #0]
 8006350:	4602      	mov	r2, r0
 8006352:	f013 0007 	ands.w	r0, r3, #7
 8006356:	d00b      	beq.n	8006370 <__lo0bits+0x22>
 8006358:	07d9      	lsls	r1, r3, #31
 800635a:	d421      	bmi.n	80063a0 <__lo0bits+0x52>
 800635c:	0798      	lsls	r0, r3, #30
 800635e:	bf49      	itett	mi
 8006360:	085b      	lsrmi	r3, r3, #1
 8006362:	089b      	lsrpl	r3, r3, #2
 8006364:	2001      	movmi	r0, #1
 8006366:	6013      	strmi	r3, [r2, #0]
 8006368:	bf5c      	itt	pl
 800636a:	6013      	strpl	r3, [r2, #0]
 800636c:	2002      	movpl	r0, #2
 800636e:	4770      	bx	lr
 8006370:	b299      	uxth	r1, r3
 8006372:	b909      	cbnz	r1, 8006378 <__lo0bits+0x2a>
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	2010      	movs	r0, #16
 8006378:	b2d9      	uxtb	r1, r3
 800637a:	b909      	cbnz	r1, 8006380 <__lo0bits+0x32>
 800637c:	3008      	adds	r0, #8
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	0719      	lsls	r1, r3, #28
 8006382:	bf04      	itt	eq
 8006384:	091b      	lsreq	r3, r3, #4
 8006386:	3004      	addeq	r0, #4
 8006388:	0799      	lsls	r1, r3, #30
 800638a:	bf04      	itt	eq
 800638c:	089b      	lsreq	r3, r3, #2
 800638e:	3002      	addeq	r0, #2
 8006390:	07d9      	lsls	r1, r3, #31
 8006392:	d403      	bmi.n	800639c <__lo0bits+0x4e>
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	f100 0001 	add.w	r0, r0, #1
 800639a:	d003      	beq.n	80063a4 <__lo0bits+0x56>
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4770      	bx	lr
 80063a0:	2000      	movs	r0, #0
 80063a2:	4770      	bx	lr
 80063a4:	2020      	movs	r0, #32
 80063a6:	4770      	bx	lr

080063a8 <__i2b>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	460c      	mov	r4, r1
 80063ac:	2101      	movs	r1, #1
 80063ae:	f7ff ff07 	bl	80061c0 <_Balloc>
 80063b2:	4602      	mov	r2, r0
 80063b4:	b928      	cbnz	r0, 80063c2 <__i2b+0x1a>
 80063b6:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <__i2b+0x24>)
 80063b8:	4805      	ldr	r0, [pc, #20]	@ (80063d0 <__i2b+0x28>)
 80063ba:	f240 1145 	movw	r1, #325	@ 0x145
 80063be:	f000 fd09 	bl	8006dd4 <__assert_func>
 80063c2:	2301      	movs	r3, #1
 80063c4:	6144      	str	r4, [r0, #20]
 80063c6:	6103      	str	r3, [r0, #16]
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	bf00      	nop
 80063cc:	08007144 	.word	0x08007144
 80063d0:	08007155 	.word	0x08007155

080063d4 <__multiply>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	4614      	mov	r4, r2
 80063da:	690a      	ldr	r2, [r1, #16]
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	429a      	cmp	r2, r3
 80063e0:	bfa8      	it	ge
 80063e2:	4623      	movge	r3, r4
 80063e4:	460f      	mov	r7, r1
 80063e6:	bfa4      	itt	ge
 80063e8:	460c      	movge	r4, r1
 80063ea:	461f      	movge	r7, r3
 80063ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80063f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80063f4:	68a3      	ldr	r3, [r4, #8]
 80063f6:	6861      	ldr	r1, [r4, #4]
 80063f8:	eb0a 0609 	add.w	r6, sl, r9
 80063fc:	42b3      	cmp	r3, r6
 80063fe:	b085      	sub	sp, #20
 8006400:	bfb8      	it	lt
 8006402:	3101      	addlt	r1, #1
 8006404:	f7ff fedc 	bl	80061c0 <_Balloc>
 8006408:	b930      	cbnz	r0, 8006418 <__multiply+0x44>
 800640a:	4602      	mov	r2, r0
 800640c:	4b44      	ldr	r3, [pc, #272]	@ (8006520 <__multiply+0x14c>)
 800640e:	4845      	ldr	r0, [pc, #276]	@ (8006524 <__multiply+0x150>)
 8006410:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006414:	f000 fcde 	bl	8006dd4 <__assert_func>
 8006418:	f100 0514 	add.w	r5, r0, #20
 800641c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006420:	462b      	mov	r3, r5
 8006422:	2200      	movs	r2, #0
 8006424:	4543      	cmp	r3, r8
 8006426:	d321      	bcc.n	800646c <__multiply+0x98>
 8006428:	f107 0114 	add.w	r1, r7, #20
 800642c:	f104 0214 	add.w	r2, r4, #20
 8006430:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006434:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006438:	9302      	str	r3, [sp, #8]
 800643a:	1b13      	subs	r3, r2, r4
 800643c:	3b15      	subs	r3, #21
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	3304      	adds	r3, #4
 8006444:	f104 0715 	add.w	r7, r4, #21
 8006448:	42ba      	cmp	r2, r7
 800644a:	bf38      	it	cc
 800644c:	2304      	movcc	r3, #4
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	9103      	str	r1, [sp, #12]
 8006454:	428b      	cmp	r3, r1
 8006456:	d80c      	bhi.n	8006472 <__multiply+0x9e>
 8006458:	2e00      	cmp	r6, #0
 800645a:	dd03      	ble.n	8006464 <__multiply+0x90>
 800645c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006460:	2b00      	cmp	r3, #0
 8006462:	d05a      	beq.n	800651a <__multiply+0x146>
 8006464:	6106      	str	r6, [r0, #16]
 8006466:	b005      	add	sp, #20
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	f843 2b04 	str.w	r2, [r3], #4
 8006470:	e7d8      	b.n	8006424 <__multiply+0x50>
 8006472:	f8b1 a000 	ldrh.w	sl, [r1]
 8006476:	f1ba 0f00 	cmp.w	sl, #0
 800647a:	d023      	beq.n	80064c4 <__multiply+0xf0>
 800647c:	f104 0e14 	add.w	lr, r4, #20
 8006480:	46a9      	mov	r9, r5
 8006482:	f04f 0c00 	mov.w	ip, #0
 8006486:	f85e 7b04 	ldr.w	r7, [lr], #4
 800648a:	f8d9 3000 	ldr.w	r3, [r9]
 800648e:	fa1f fb87 	uxth.w	fp, r7
 8006492:	b29b      	uxth	r3, r3
 8006494:	fb0a 330b 	mla	r3, sl, fp, r3
 8006498:	4463      	add	r3, ip
 800649a:	f8d9 c000 	ldr.w	ip, [r9]
 800649e:	0c3f      	lsrs	r7, r7, #16
 80064a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80064a4:	fb0a c707 	mla	r7, sl, r7, ip
 80064a8:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064b2:	4572      	cmp	r2, lr
 80064b4:	f849 3b04 	str.w	r3, [r9], #4
 80064b8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80064bc:	d8e3      	bhi.n	8006486 <__multiply+0xb2>
 80064be:	9b01      	ldr	r3, [sp, #4]
 80064c0:	f845 c003 	str.w	ip, [r5, r3]
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064ca:	3104      	adds	r1, #4
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	d021      	beq.n	8006516 <__multiply+0x142>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	f104 0c14 	add.w	ip, r4, #20
 80064d8:	46ae      	mov	lr, r5
 80064da:	f04f 0a00 	mov.w	sl, #0
 80064de:	f8bc b000 	ldrh.w	fp, [ip]
 80064e2:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80064e6:	fb09 770b 	mla	r7, r9, fp, r7
 80064ea:	4457      	add	r7, sl
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064f2:	f84e 3b04 	str.w	r3, [lr], #4
 80064f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064fe:	f8be 3000 	ldrh.w	r3, [lr]
 8006502:	fb09 330a 	mla	r3, r9, sl, r3
 8006506:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800650a:	4562      	cmp	r2, ip
 800650c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006510:	d8e5      	bhi.n	80064de <__multiply+0x10a>
 8006512:	9f01      	ldr	r7, [sp, #4]
 8006514:	51eb      	str	r3, [r5, r7]
 8006516:	3504      	adds	r5, #4
 8006518:	e79a      	b.n	8006450 <__multiply+0x7c>
 800651a:	3e01      	subs	r6, #1
 800651c:	e79c      	b.n	8006458 <__multiply+0x84>
 800651e:	bf00      	nop
 8006520:	08007144 	.word	0x08007144
 8006524:	08007155 	.word	0x08007155

08006528 <__pow5mult>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	4615      	mov	r5, r2
 800652e:	f012 0203 	ands.w	r2, r2, #3
 8006532:	4607      	mov	r7, r0
 8006534:	460e      	mov	r6, r1
 8006536:	d007      	beq.n	8006548 <__pow5mult+0x20>
 8006538:	4c25      	ldr	r4, [pc, #148]	@ (80065d0 <__pow5mult+0xa8>)
 800653a:	3a01      	subs	r2, #1
 800653c:	2300      	movs	r3, #0
 800653e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006542:	f7ff fe9f 	bl	8006284 <__multadd>
 8006546:	4606      	mov	r6, r0
 8006548:	10ad      	asrs	r5, r5, #2
 800654a:	d03d      	beq.n	80065c8 <__pow5mult+0xa0>
 800654c:	69fc      	ldr	r4, [r7, #28]
 800654e:	b97c      	cbnz	r4, 8006570 <__pow5mult+0x48>
 8006550:	2010      	movs	r0, #16
 8006552:	f7ff fd7f 	bl	8006054 <malloc>
 8006556:	4602      	mov	r2, r0
 8006558:	61f8      	str	r0, [r7, #28]
 800655a:	b928      	cbnz	r0, 8006568 <__pow5mult+0x40>
 800655c:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <__pow5mult+0xac>)
 800655e:	481e      	ldr	r0, [pc, #120]	@ (80065d8 <__pow5mult+0xb0>)
 8006560:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006564:	f000 fc36 	bl	8006dd4 <__assert_func>
 8006568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800656c:	6004      	str	r4, [r0, #0]
 800656e:	60c4      	str	r4, [r0, #12]
 8006570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006578:	b94c      	cbnz	r4, 800658e <__pow5mult+0x66>
 800657a:	f240 2171 	movw	r1, #625	@ 0x271
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff ff12 	bl	80063a8 <__i2b>
 8006584:	2300      	movs	r3, #0
 8006586:	f8c8 0008 	str.w	r0, [r8, #8]
 800658a:	4604      	mov	r4, r0
 800658c:	6003      	str	r3, [r0, #0]
 800658e:	f04f 0900 	mov.w	r9, #0
 8006592:	07eb      	lsls	r3, r5, #31
 8006594:	d50a      	bpl.n	80065ac <__pow5mult+0x84>
 8006596:	4631      	mov	r1, r6
 8006598:	4622      	mov	r2, r4
 800659a:	4638      	mov	r0, r7
 800659c:	f7ff ff1a 	bl	80063d4 <__multiply>
 80065a0:	4631      	mov	r1, r6
 80065a2:	4680      	mov	r8, r0
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff fe4b 	bl	8006240 <_Bfree>
 80065aa:	4646      	mov	r6, r8
 80065ac:	106d      	asrs	r5, r5, #1
 80065ae:	d00b      	beq.n	80065c8 <__pow5mult+0xa0>
 80065b0:	6820      	ldr	r0, [r4, #0]
 80065b2:	b938      	cbnz	r0, 80065c4 <__pow5mult+0x9c>
 80065b4:	4622      	mov	r2, r4
 80065b6:	4621      	mov	r1, r4
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ff0b 	bl	80063d4 <__multiply>
 80065be:	6020      	str	r0, [r4, #0]
 80065c0:	f8c0 9000 	str.w	r9, [r0]
 80065c4:	4604      	mov	r4, r0
 80065c6:	e7e4      	b.n	8006592 <__pow5mult+0x6a>
 80065c8:	4630      	mov	r0, r6
 80065ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ce:	bf00      	nop
 80065d0:	080071b0 	.word	0x080071b0
 80065d4:	080070d5 	.word	0x080070d5
 80065d8:	08007155 	.word	0x08007155

080065dc <__lshift>:
 80065dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	6849      	ldr	r1, [r1, #4]
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	4607      	mov	r7, r0
 80065ee:	4691      	mov	r9, r2
 80065f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065f4:	f108 0601 	add.w	r6, r8, #1
 80065f8:	42b3      	cmp	r3, r6
 80065fa:	db0b      	blt.n	8006614 <__lshift+0x38>
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff fddf 	bl	80061c0 <_Balloc>
 8006602:	4605      	mov	r5, r0
 8006604:	b948      	cbnz	r0, 800661a <__lshift+0x3e>
 8006606:	4602      	mov	r2, r0
 8006608:	4b28      	ldr	r3, [pc, #160]	@ (80066ac <__lshift+0xd0>)
 800660a:	4829      	ldr	r0, [pc, #164]	@ (80066b0 <__lshift+0xd4>)
 800660c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006610:	f000 fbe0 	bl	8006dd4 <__assert_func>
 8006614:	3101      	adds	r1, #1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	e7ee      	b.n	80065f8 <__lshift+0x1c>
 800661a:	2300      	movs	r3, #0
 800661c:	f100 0114 	add.w	r1, r0, #20
 8006620:	f100 0210 	add.w	r2, r0, #16
 8006624:	4618      	mov	r0, r3
 8006626:	4553      	cmp	r3, sl
 8006628:	db33      	blt.n	8006692 <__lshift+0xb6>
 800662a:	6920      	ldr	r0, [r4, #16]
 800662c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006630:	f104 0314 	add.w	r3, r4, #20
 8006634:	f019 091f 	ands.w	r9, r9, #31
 8006638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800663c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006640:	d02b      	beq.n	800669a <__lshift+0xbe>
 8006642:	f1c9 0e20 	rsb	lr, r9, #32
 8006646:	468a      	mov	sl, r1
 8006648:	2200      	movs	r2, #0
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	fa00 f009 	lsl.w	r0, r0, r9
 8006650:	4310      	orrs	r0, r2
 8006652:	f84a 0b04 	str.w	r0, [sl], #4
 8006656:	f853 2b04 	ldr.w	r2, [r3], #4
 800665a:	459c      	cmp	ip, r3
 800665c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006660:	d8f3      	bhi.n	800664a <__lshift+0x6e>
 8006662:	ebac 0304 	sub.w	r3, ip, r4
 8006666:	3b15      	subs	r3, #21
 8006668:	f023 0303 	bic.w	r3, r3, #3
 800666c:	3304      	adds	r3, #4
 800666e:	f104 0015 	add.w	r0, r4, #21
 8006672:	4584      	cmp	ip, r0
 8006674:	bf38      	it	cc
 8006676:	2304      	movcc	r3, #4
 8006678:	50ca      	str	r2, [r1, r3]
 800667a:	b10a      	cbz	r2, 8006680 <__lshift+0xa4>
 800667c:	f108 0602 	add.w	r6, r8, #2
 8006680:	3e01      	subs	r6, #1
 8006682:	4638      	mov	r0, r7
 8006684:	612e      	str	r6, [r5, #16]
 8006686:	4621      	mov	r1, r4
 8006688:	f7ff fdda 	bl	8006240 <_Bfree>
 800668c:	4628      	mov	r0, r5
 800668e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006692:	f842 0f04 	str.w	r0, [r2, #4]!
 8006696:	3301      	adds	r3, #1
 8006698:	e7c5      	b.n	8006626 <__lshift+0x4a>
 800669a:	3904      	subs	r1, #4
 800669c:	f853 2b04 	ldr.w	r2, [r3], #4
 80066a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80066a4:	459c      	cmp	ip, r3
 80066a6:	d8f9      	bhi.n	800669c <__lshift+0xc0>
 80066a8:	e7ea      	b.n	8006680 <__lshift+0xa4>
 80066aa:	bf00      	nop
 80066ac:	08007144 	.word	0x08007144
 80066b0:	08007155 	.word	0x08007155

080066b4 <__mcmp>:
 80066b4:	690a      	ldr	r2, [r1, #16]
 80066b6:	4603      	mov	r3, r0
 80066b8:	6900      	ldr	r0, [r0, #16]
 80066ba:	1a80      	subs	r0, r0, r2
 80066bc:	b530      	push	{r4, r5, lr}
 80066be:	d10e      	bne.n	80066de <__mcmp+0x2a>
 80066c0:	3314      	adds	r3, #20
 80066c2:	3114      	adds	r1, #20
 80066c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066d4:	4295      	cmp	r5, r2
 80066d6:	d003      	beq.n	80066e0 <__mcmp+0x2c>
 80066d8:	d205      	bcs.n	80066e6 <__mcmp+0x32>
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	bd30      	pop	{r4, r5, pc}
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d3f3      	bcc.n	80066cc <__mcmp+0x18>
 80066e4:	e7fb      	b.n	80066de <__mcmp+0x2a>
 80066e6:	2001      	movs	r0, #1
 80066e8:	e7f9      	b.n	80066de <__mcmp+0x2a>
	...

080066ec <__mdiff>:
 80066ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	4689      	mov	r9, r1
 80066f2:	4606      	mov	r6, r0
 80066f4:	4611      	mov	r1, r2
 80066f6:	4648      	mov	r0, r9
 80066f8:	4614      	mov	r4, r2
 80066fa:	f7ff ffdb 	bl	80066b4 <__mcmp>
 80066fe:	1e05      	subs	r5, r0, #0
 8006700:	d112      	bne.n	8006728 <__mdiff+0x3c>
 8006702:	4629      	mov	r1, r5
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff fd5b 	bl	80061c0 <_Balloc>
 800670a:	4602      	mov	r2, r0
 800670c:	b928      	cbnz	r0, 800671a <__mdiff+0x2e>
 800670e:	4b3e      	ldr	r3, [pc, #248]	@ (8006808 <__mdiff+0x11c>)
 8006710:	f240 2137 	movw	r1, #567	@ 0x237
 8006714:	483d      	ldr	r0, [pc, #244]	@ (800680c <__mdiff+0x120>)
 8006716:	f000 fb5d 	bl	8006dd4 <__assert_func>
 800671a:	2301      	movs	r3, #1
 800671c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006720:	4610      	mov	r0, r2
 8006722:	b003      	add	sp, #12
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	bfbc      	itt	lt
 800672a:	464b      	movlt	r3, r9
 800672c:	46a1      	movlt	r9, r4
 800672e:	4630      	mov	r0, r6
 8006730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006734:	bfba      	itte	lt
 8006736:	461c      	movlt	r4, r3
 8006738:	2501      	movlt	r5, #1
 800673a:	2500      	movge	r5, #0
 800673c:	f7ff fd40 	bl	80061c0 <_Balloc>
 8006740:	4602      	mov	r2, r0
 8006742:	b918      	cbnz	r0, 800674c <__mdiff+0x60>
 8006744:	4b30      	ldr	r3, [pc, #192]	@ (8006808 <__mdiff+0x11c>)
 8006746:	f240 2145 	movw	r1, #581	@ 0x245
 800674a:	e7e3      	b.n	8006714 <__mdiff+0x28>
 800674c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006750:	6926      	ldr	r6, [r4, #16]
 8006752:	60c5      	str	r5, [r0, #12]
 8006754:	f109 0310 	add.w	r3, r9, #16
 8006758:	f109 0514 	add.w	r5, r9, #20
 800675c:	f104 0e14 	add.w	lr, r4, #20
 8006760:	f100 0b14 	add.w	fp, r0, #20
 8006764:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006768:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	46d9      	mov	r9, fp
 8006770:	f04f 0c00 	mov.w	ip, #0
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	f85e 0b04 	ldr.w	r0, [lr], #4
 800677a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	b281      	uxth	r1, r0
 8006782:	fa1f f38a 	uxth.w	r3, sl
 8006786:	1a5b      	subs	r3, r3, r1
 8006788:	0c00      	lsrs	r0, r0, #16
 800678a:	4463      	add	r3, ip
 800678c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006790:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006794:	b29b      	uxth	r3, r3
 8006796:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800679a:	4576      	cmp	r6, lr
 800679c:	f849 3b04 	str.w	r3, [r9], #4
 80067a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067a4:	d8e6      	bhi.n	8006774 <__mdiff+0x88>
 80067a6:	1b33      	subs	r3, r6, r4
 80067a8:	3b15      	subs	r3, #21
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	3415      	adds	r4, #21
 80067b0:	3304      	adds	r3, #4
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	bf38      	it	cc
 80067b6:	2304      	movcc	r3, #4
 80067b8:	441d      	add	r5, r3
 80067ba:	445b      	add	r3, fp
 80067bc:	461e      	mov	r6, r3
 80067be:	462c      	mov	r4, r5
 80067c0:	4544      	cmp	r4, r8
 80067c2:	d30e      	bcc.n	80067e2 <__mdiff+0xf6>
 80067c4:	f108 0103 	add.w	r1, r8, #3
 80067c8:	1b49      	subs	r1, r1, r5
 80067ca:	f021 0103 	bic.w	r1, r1, #3
 80067ce:	3d03      	subs	r5, #3
 80067d0:	45a8      	cmp	r8, r5
 80067d2:	bf38      	it	cc
 80067d4:	2100      	movcc	r1, #0
 80067d6:	440b      	add	r3, r1
 80067d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067dc:	b191      	cbz	r1, 8006804 <__mdiff+0x118>
 80067de:	6117      	str	r7, [r2, #16]
 80067e0:	e79e      	b.n	8006720 <__mdiff+0x34>
 80067e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80067e6:	46e6      	mov	lr, ip
 80067e8:	0c08      	lsrs	r0, r1, #16
 80067ea:	fa1c fc81 	uxtah	ip, ip, r1
 80067ee:	4471      	add	r1, lr
 80067f0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80067f4:	b289      	uxth	r1, r1
 80067f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067fa:	f846 1b04 	str.w	r1, [r6], #4
 80067fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006802:	e7dd      	b.n	80067c0 <__mdiff+0xd4>
 8006804:	3f01      	subs	r7, #1
 8006806:	e7e7      	b.n	80067d8 <__mdiff+0xec>
 8006808:	08007144 	.word	0x08007144
 800680c:	08007155 	.word	0x08007155

08006810 <__d2b>:
 8006810:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006814:	2101      	movs	r1, #1
 8006816:	9e08      	ldr	r6, [sp, #32]
 8006818:	4690      	mov	r8, r2
 800681a:	4699      	mov	r9, r3
 800681c:	f7ff fcd0 	bl	80061c0 <_Balloc>
 8006820:	4604      	mov	r4, r0
 8006822:	b930      	cbnz	r0, 8006832 <__d2b+0x22>
 8006824:	4602      	mov	r2, r0
 8006826:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <__d2b+0xa8>)
 8006828:	4824      	ldr	r0, [pc, #144]	@ (80068bc <__d2b+0xac>)
 800682a:	f240 310f 	movw	r1, #783	@ 0x30f
 800682e:	f000 fad1 	bl	8006dd4 <__assert_func>
 8006832:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006836:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800683a:	b10d      	cbz	r5, 8006840 <__d2b+0x30>
 800683c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	f1b8 0300 	subs.w	r3, r8, #0
 8006846:	d024      	beq.n	8006892 <__d2b+0x82>
 8006848:	4668      	mov	r0, sp
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	f7ff fd7f 	bl	800634e <__lo0bits>
 8006850:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006854:	b1d8      	cbz	r0, 800688e <__d2b+0x7e>
 8006856:	f1c0 0320 	rsb	r3, r0, #32
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	430b      	orrs	r3, r1
 8006860:	40c2      	lsrs	r2, r0
 8006862:	6163      	str	r3, [r4, #20]
 8006864:	9201      	str	r2, [sp, #4]
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	61a3      	str	r3, [r4, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf0c      	ite	eq
 800686e:	2201      	moveq	r2, #1
 8006870:	2202      	movne	r2, #2
 8006872:	6122      	str	r2, [r4, #16]
 8006874:	b1ad      	cbz	r5, 80068a2 <__d2b+0x92>
 8006876:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800687a:	4405      	add	r5, r0
 800687c:	6035      	str	r5, [r6, #0]
 800687e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006884:	6018      	str	r0, [r3, #0]
 8006886:	4620      	mov	r0, r4
 8006888:	b002      	add	sp, #8
 800688a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800688e:	6161      	str	r1, [r4, #20]
 8006890:	e7e9      	b.n	8006866 <__d2b+0x56>
 8006892:	a801      	add	r0, sp, #4
 8006894:	f7ff fd5b 	bl	800634e <__lo0bits>
 8006898:	9b01      	ldr	r3, [sp, #4]
 800689a:	6163      	str	r3, [r4, #20]
 800689c:	3020      	adds	r0, #32
 800689e:	2201      	movs	r2, #1
 80068a0:	e7e7      	b.n	8006872 <__d2b+0x62>
 80068a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80068aa:	6030      	str	r0, [r6, #0]
 80068ac:	6918      	ldr	r0, [r3, #16]
 80068ae:	f7ff fd2f 	bl	8006310 <__hi0bits>
 80068b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068b6:	e7e4      	b.n	8006882 <__d2b+0x72>
 80068b8:	08007144 	.word	0x08007144
 80068bc:	08007155 	.word	0x08007155

080068c0 <__sfputc_r>:
 80068c0:	6893      	ldr	r3, [r2, #8]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	b410      	push	{r4}
 80068c8:	6093      	str	r3, [r2, #8]
 80068ca:	da07      	bge.n	80068dc <__sfputc_r+0x1c>
 80068cc:	6994      	ldr	r4, [r2, #24]
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	db01      	blt.n	80068d6 <__sfputc_r+0x16>
 80068d2:	290a      	cmp	r1, #10
 80068d4:	d102      	bne.n	80068dc <__sfputc_r+0x1c>
 80068d6:	bc10      	pop	{r4}
 80068d8:	f7fe bc0b 	b.w	80050f2 <__swbuf_r>
 80068dc:	6813      	ldr	r3, [r2, #0]
 80068de:	1c58      	adds	r0, r3, #1
 80068e0:	6010      	str	r0, [r2, #0]
 80068e2:	7019      	strb	r1, [r3, #0]
 80068e4:	4608      	mov	r0, r1
 80068e6:	bc10      	pop	{r4}
 80068e8:	4770      	bx	lr

080068ea <__sfputs_r>:
 80068ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ec:	4606      	mov	r6, r0
 80068ee:	460f      	mov	r7, r1
 80068f0:	4614      	mov	r4, r2
 80068f2:	18d5      	adds	r5, r2, r3
 80068f4:	42ac      	cmp	r4, r5
 80068f6:	d101      	bne.n	80068fc <__sfputs_r+0x12>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e007      	b.n	800690c <__sfputs_r+0x22>
 80068fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006900:	463a      	mov	r2, r7
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ffdc 	bl	80068c0 <__sfputc_r>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d1f3      	bne.n	80068f4 <__sfputs_r+0xa>
 800690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006910 <_vfiprintf_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	460d      	mov	r5, r1
 8006916:	b09d      	sub	sp, #116	@ 0x74
 8006918:	4614      	mov	r4, r2
 800691a:	4698      	mov	r8, r3
 800691c:	4606      	mov	r6, r0
 800691e:	b118      	cbz	r0, 8006928 <_vfiprintf_r+0x18>
 8006920:	6a03      	ldr	r3, [r0, #32]
 8006922:	b90b      	cbnz	r3, 8006928 <_vfiprintf_r+0x18>
 8006924:	f7fe fafc 	bl	8004f20 <__sinit>
 8006928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800692a:	07d9      	lsls	r1, r3, #31
 800692c:	d405      	bmi.n	800693a <_vfiprintf_r+0x2a>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	059a      	lsls	r2, r3, #22
 8006932:	d402      	bmi.n	800693a <_vfiprintf_r+0x2a>
 8006934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006936:	f7fe fcee 	bl	8005316 <__retarget_lock_acquire_recursive>
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	071b      	lsls	r3, r3, #28
 800693e:	d501      	bpl.n	8006944 <_vfiprintf_r+0x34>
 8006940:	692b      	ldr	r3, [r5, #16]
 8006942:	b99b      	cbnz	r3, 800696c <_vfiprintf_r+0x5c>
 8006944:	4629      	mov	r1, r5
 8006946:	4630      	mov	r0, r6
 8006948:	f7fe fc12 	bl	8005170 <__swsetup_r>
 800694c:	b170      	cbz	r0, 800696c <_vfiprintf_r+0x5c>
 800694e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006950:	07dc      	lsls	r4, r3, #31
 8006952:	d504      	bpl.n	800695e <_vfiprintf_r+0x4e>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b01d      	add	sp, #116	@ 0x74
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	0598      	lsls	r0, r3, #22
 8006962:	d4f7      	bmi.n	8006954 <_vfiprintf_r+0x44>
 8006964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006966:	f7fe fcd7 	bl	8005318 <__retarget_lock_release_recursive>
 800696a:	e7f3      	b.n	8006954 <_vfiprintf_r+0x44>
 800696c:	2300      	movs	r3, #0
 800696e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006970:	2320      	movs	r3, #32
 8006972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006976:	f8cd 800c 	str.w	r8, [sp, #12]
 800697a:	2330      	movs	r3, #48	@ 0x30
 800697c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b2c <_vfiprintf_r+0x21c>
 8006980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006984:	f04f 0901 	mov.w	r9, #1
 8006988:	4623      	mov	r3, r4
 800698a:	469a      	mov	sl, r3
 800698c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006990:	b10a      	cbz	r2, 8006996 <_vfiprintf_r+0x86>
 8006992:	2a25      	cmp	r2, #37	@ 0x25
 8006994:	d1f9      	bne.n	800698a <_vfiprintf_r+0x7a>
 8006996:	ebba 0b04 	subs.w	fp, sl, r4
 800699a:	d00b      	beq.n	80069b4 <_vfiprintf_r+0xa4>
 800699c:	465b      	mov	r3, fp
 800699e:	4622      	mov	r2, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ffa1 	bl	80068ea <__sfputs_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	f000 80a7 	beq.w	8006afc <_vfiprintf_r+0x1ec>
 80069ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069b0:	445a      	add	r2, fp
 80069b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 809f 	beq.w	8006afc <_vfiprintf_r+0x1ec>
 80069be:	2300      	movs	r3, #0
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c8:	f10a 0a01 	add.w	sl, sl, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80069d6:	4654      	mov	r4, sl
 80069d8:	2205      	movs	r2, #5
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	4853      	ldr	r0, [pc, #332]	@ (8006b2c <_vfiprintf_r+0x21c>)
 80069e0:	f7f9 fbf6 	bl	80001d0 <memchr>
 80069e4:	9a04      	ldr	r2, [sp, #16]
 80069e6:	b9d8      	cbnz	r0, 8006a20 <_vfiprintf_r+0x110>
 80069e8:	06d1      	lsls	r1, r2, #27
 80069ea:	bf44      	itt	mi
 80069ec:	2320      	movmi	r3, #32
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069f2:	0713      	lsls	r3, r2, #28
 80069f4:	bf44      	itt	mi
 80069f6:	232b      	movmi	r3, #43	@ 0x2b
 80069f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a02:	d015      	beq.n	8006a30 <_vfiprintf_r+0x120>
 8006a04:	9a07      	ldr	r2, [sp, #28]
 8006a06:	4654      	mov	r4, sl
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a14:	3b30      	subs	r3, #48	@ 0x30
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d94b      	bls.n	8006ab2 <_vfiprintf_r+0x1a2>
 8006a1a:	b1b0      	cbz	r0, 8006a4a <_vfiprintf_r+0x13a>
 8006a1c:	9207      	str	r2, [sp, #28]
 8006a1e:	e014      	b.n	8006a4a <_vfiprintf_r+0x13a>
 8006a20:	eba0 0308 	sub.w	r3, r0, r8
 8006a24:	fa09 f303 	lsl.w	r3, r9, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	46a2      	mov	sl, r4
 8006a2e:	e7d2      	b.n	80069d6 <_vfiprintf_r+0xc6>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	1d19      	adds	r1, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9103      	str	r1, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfbb      	ittet	lt
 8006a3c:	425b      	neglt	r3, r3
 8006a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a42:	9307      	strge	r3, [sp, #28]
 8006a44:	9307      	strlt	r3, [sp, #28]
 8006a46:	bfb8      	it	lt
 8006a48:	9204      	strlt	r2, [sp, #16]
 8006a4a:	7823      	ldrb	r3, [r4, #0]
 8006a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a4e:	d10a      	bne.n	8006a66 <_vfiprintf_r+0x156>
 8006a50:	7863      	ldrb	r3, [r4, #1]
 8006a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a54:	d132      	bne.n	8006abc <_vfiprintf_r+0x1ac>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	9203      	str	r2, [sp, #12]
 8006a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a62:	3402      	adds	r4, #2
 8006a64:	9305      	str	r3, [sp, #20]
 8006a66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006b30 <_vfiprintf_r+0x220>
 8006a6a:	7821      	ldrb	r1, [r4, #0]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	4650      	mov	r0, sl
 8006a70:	f7f9 fbae 	bl	80001d0 <memchr>
 8006a74:	b138      	cbz	r0, 8006a86 <_vfiprintf_r+0x176>
 8006a76:	9b04      	ldr	r3, [sp, #16]
 8006a78:	eba0 000a 	sub.w	r0, r0, sl
 8006a7c:	2240      	movs	r2, #64	@ 0x40
 8006a7e:	4082      	lsls	r2, r0
 8006a80:	4313      	orrs	r3, r2
 8006a82:	3401      	adds	r4, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8a:	482a      	ldr	r0, [pc, #168]	@ (8006b34 <_vfiprintf_r+0x224>)
 8006a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a90:	2206      	movs	r2, #6
 8006a92:	f7f9 fb9d 	bl	80001d0 <memchr>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d03f      	beq.n	8006b1a <_vfiprintf_r+0x20a>
 8006a9a:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <_vfiprintf_r+0x228>)
 8006a9c:	bb1b      	cbnz	r3, 8006ae6 <_vfiprintf_r+0x1d6>
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aac:	443b      	add	r3, r7
 8006aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab0:	e76a      	b.n	8006988 <_vfiprintf_r+0x78>
 8006ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	2001      	movs	r0, #1
 8006aba:	e7a8      	b.n	8006a0e <_vfiprintf_r+0xfe>
 8006abc:	2300      	movs	r3, #0
 8006abe:	3401      	adds	r4, #1
 8006ac0:	9305      	str	r3, [sp, #20]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0c0a 	mov.w	ip, #10
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ace:	3a30      	subs	r2, #48	@ 0x30
 8006ad0:	2a09      	cmp	r2, #9
 8006ad2:	d903      	bls.n	8006adc <_vfiprintf_r+0x1cc>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0c6      	beq.n	8006a66 <_vfiprintf_r+0x156>
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	e7c4      	b.n	8006a66 <_vfiprintf_r+0x156>
 8006adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e7f0      	b.n	8006ac8 <_vfiprintf_r+0x1b8>
 8006ae6:	ab03      	add	r3, sp, #12
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	462a      	mov	r2, r5
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <_vfiprintf_r+0x22c>)
 8006aee:	a904      	add	r1, sp, #16
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7fd fdcf 	bl	8004694 <_printf_float>
 8006af6:	4607      	mov	r7, r0
 8006af8:	1c78      	adds	r0, r7, #1
 8006afa:	d1d6      	bne.n	8006aaa <_vfiprintf_r+0x19a>
 8006afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d405      	bmi.n	8006b0e <_vfiprintf_r+0x1fe>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_vfiprintf_r+0x1fe>
 8006b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b0a:	f7fe fc05 	bl	8005318 <__retarget_lock_release_recursive>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	065b      	lsls	r3, r3, #25
 8006b12:	f53f af1f 	bmi.w	8006954 <_vfiprintf_r+0x44>
 8006b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b18:	e71e      	b.n	8006958 <_vfiprintf_r+0x48>
 8006b1a:	ab03      	add	r3, sp, #12
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <_vfiprintf_r+0x22c>)
 8006b22:	a904      	add	r1, sp, #16
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7fe f84f 	bl	8004bc8 <_printf_i>
 8006b2a:	e7e4      	b.n	8006af6 <_vfiprintf_r+0x1e6>
 8006b2c:	080072b0 	.word	0x080072b0
 8006b30:	080072b6 	.word	0x080072b6
 8006b34:	080072ba 	.word	0x080072ba
 8006b38:	08004695 	.word	0x08004695
 8006b3c:	080068eb 	.word	0x080068eb

08006b40 <__sflush_r>:
 8006b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	0716      	lsls	r6, r2, #28
 8006b48:	4605      	mov	r5, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	d454      	bmi.n	8006bf8 <__sflush_r+0xb8>
 8006b4e:	684b      	ldr	r3, [r1, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dc02      	bgt.n	8006b5a <__sflush_r+0x1a>
 8006b54:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dd48      	ble.n	8006bec <__sflush_r+0xac>
 8006b5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	d045      	beq.n	8006bec <__sflush_r+0xac>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b66:	682f      	ldr	r7, [r5, #0]
 8006b68:	6a21      	ldr	r1, [r4, #32]
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	d030      	beq.n	8006bd0 <__sflush_r+0x90>
 8006b6e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	0759      	lsls	r1, r3, #29
 8006b74:	d505      	bpl.n	8006b82 <__sflush_r+0x42>
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	1ad2      	subs	r2, r2, r3
 8006b7a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b7c:	b10b      	cbz	r3, 8006b82 <__sflush_r+0x42>
 8006b7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	2300      	movs	r3, #0
 8006b84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b86:	6a21      	ldr	r1, [r4, #32]
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b0      	blx	r6
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	d106      	bne.n	8006ba0 <__sflush_r+0x60>
 8006b92:	6829      	ldr	r1, [r5, #0]
 8006b94:	291d      	cmp	r1, #29
 8006b96:	d82b      	bhi.n	8006bf0 <__sflush_r+0xb0>
 8006b98:	4a28      	ldr	r2, [pc, #160]	@ (8006c3c <__sflush_r+0xfc>)
 8006b9a:	410a      	asrs	r2, r1
 8006b9c:	07d6      	lsls	r6, r2, #31
 8006b9e:	d427      	bmi.n	8006bf0 <__sflush_r+0xb0>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	6062      	str	r2, [r4, #4]
 8006ba4:	04d9      	lsls	r1, r3, #19
 8006ba6:	6922      	ldr	r2, [r4, #16]
 8006ba8:	6022      	str	r2, [r4, #0]
 8006baa:	d504      	bpl.n	8006bb6 <__sflush_r+0x76>
 8006bac:	1c42      	adds	r2, r0, #1
 8006bae:	d101      	bne.n	8006bb4 <__sflush_r+0x74>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b903      	cbnz	r3, 8006bb6 <__sflush_r+0x76>
 8006bb4:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bb8:	602f      	str	r7, [r5, #0]
 8006bba:	b1b9      	cbz	r1, 8006bec <__sflush_r+0xac>
 8006bbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d002      	beq.n	8006bca <__sflush_r+0x8a>
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f7ff f9fb 	bl	8005fc0 <_free_r>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bce:	e00d      	b.n	8006bec <__sflush_r+0xac>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b0      	blx	r6
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	1c50      	adds	r0, r2, #1
 8006bda:	d1c9      	bne.n	8006b70 <__sflush_r+0x30>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0c6      	beq.n	8006b70 <__sflush_r+0x30>
 8006be2:	2b1d      	cmp	r3, #29
 8006be4:	d001      	beq.n	8006bea <__sflush_r+0xaa>
 8006be6:	2b16      	cmp	r3, #22
 8006be8:	d11d      	bne.n	8006c26 <__sflush_r+0xe6>
 8006bea:	602f      	str	r7, [r5, #0]
 8006bec:	2000      	movs	r0, #0
 8006bee:	e021      	b.n	8006c34 <__sflush_r+0xf4>
 8006bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf4:	b21b      	sxth	r3, r3
 8006bf6:	e01a      	b.n	8006c2e <__sflush_r+0xee>
 8006bf8:	690f      	ldr	r7, [r1, #16]
 8006bfa:	2f00      	cmp	r7, #0
 8006bfc:	d0f6      	beq.n	8006bec <__sflush_r+0xac>
 8006bfe:	0793      	lsls	r3, r2, #30
 8006c00:	680e      	ldr	r6, [r1, #0]
 8006c02:	bf08      	it	eq
 8006c04:	694b      	ldreq	r3, [r1, #20]
 8006c06:	600f      	str	r7, [r1, #0]
 8006c08:	bf18      	it	ne
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	1bf6      	subs	r6, r6, r7
 8006c0e:	608b      	str	r3, [r1, #8]
 8006c10:	2e00      	cmp	r6, #0
 8006c12:	ddeb      	ble.n	8006bec <__sflush_r+0xac>
 8006c14:	6a21      	ldr	r1, [r4, #32]
 8006c16:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006c1a:	4633      	mov	r3, r6
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47e0      	blx	ip
 8006c22:	2800      	cmp	r0, #0
 8006c24:	dc07      	bgt.n	8006c36 <__sflush_r+0xf6>
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c36:	4407      	add	r7, r0
 8006c38:	1a36      	subs	r6, r6, r0
 8006c3a:	e7e9      	b.n	8006c10 <__sflush_r+0xd0>
 8006c3c:	dfbffffe 	.word	0xdfbffffe

08006c40 <_fflush_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	690b      	ldr	r3, [r1, #16]
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b913      	cbnz	r3, 8006c50 <_fflush_r+0x10>
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	b118      	cbz	r0, 8006c5a <_fflush_r+0x1a>
 8006c52:	6a03      	ldr	r3, [r0, #32]
 8006c54:	b90b      	cbnz	r3, 8006c5a <_fflush_r+0x1a>
 8006c56:	f7fe f963 	bl	8004f20 <__sinit>
 8006c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f3      	beq.n	8006c4a <_fflush_r+0xa>
 8006c62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d404      	bmi.n	8006c72 <_fflush_r+0x32>
 8006c68:	0599      	lsls	r1, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_fflush_r+0x32>
 8006c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c6e:	f7fe fb52 	bl	8005316 <__retarget_lock_acquire_recursive>
 8006c72:	4628      	mov	r0, r5
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7ff ff63 	bl	8006b40 <__sflush_r>
 8006c7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c7c:	07da      	lsls	r2, r3, #31
 8006c7e:	4605      	mov	r5, r0
 8006c80:	d4e4      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	059b      	lsls	r3, r3, #22
 8006c86:	d4e1      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c8a:	f7fe fb45 	bl	8005318 <__retarget_lock_release_recursive>
 8006c8e:	e7dd      	b.n	8006c4c <_fflush_r+0xc>

08006c90 <__swhatbuf_r>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	460c      	mov	r4, r1
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	b096      	sub	sp, #88	@ 0x58
 8006c9c:	4615      	mov	r5, r2
 8006c9e:	461e      	mov	r6, r3
 8006ca0:	da0d      	bge.n	8006cbe <__swhatbuf_r+0x2e>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	bf14      	ite	ne
 8006cae:	2340      	movne	r3, #64	@ 0x40
 8006cb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	6031      	str	r1, [r6, #0]
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	b016      	add	sp, #88	@ 0x58
 8006cbc:	bd70      	pop	{r4, r5, r6, pc}
 8006cbe:	466a      	mov	r2, sp
 8006cc0:	f000 f848 	bl	8006d54 <_fstat_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	dbec      	blt.n	8006ca2 <__swhatbuf_r+0x12>
 8006cc8:	9901      	ldr	r1, [sp, #4]
 8006cca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cd2:	4259      	negs	r1, r3
 8006cd4:	4159      	adcs	r1, r3
 8006cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cda:	e7eb      	b.n	8006cb4 <__swhatbuf_r+0x24>

08006cdc <__smakebuf_r>:
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce0:	079d      	lsls	r5, r3, #30
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	d507      	bpl.n	8006cf8 <__smakebuf_r+0x1c>
 8006ce8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	6163      	str	r3, [r4, #20]
 8006cf4:	b003      	add	sp, #12
 8006cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf8:	ab01      	add	r3, sp, #4
 8006cfa:	466a      	mov	r2, sp
 8006cfc:	f7ff ffc8 	bl	8006c90 <__swhatbuf_r>
 8006d00:	9f00      	ldr	r7, [sp, #0]
 8006d02:	4605      	mov	r5, r0
 8006d04:	4639      	mov	r1, r7
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff f9ce 	bl	80060a8 <_malloc_r>
 8006d0c:	b948      	cbnz	r0, 8006d22 <__smakebuf_r+0x46>
 8006d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d12:	059a      	lsls	r2, r3, #22
 8006d14:	d4ee      	bmi.n	8006cf4 <__smakebuf_r+0x18>
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	f043 0302 	orr.w	r3, r3, #2
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	e7e2      	b.n	8006ce8 <__smakebuf_r+0xc>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	6020      	str	r0, [r4, #0]
 8006d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d32:	b15b      	cbz	r3, 8006d4c <__smakebuf_r+0x70>
 8006d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 f81d 	bl	8006d78 <_isatty_r>
 8006d3e:	b128      	cbz	r0, 8006d4c <__smakebuf_r+0x70>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	431d      	orrs	r5, r3
 8006d50:	81a5      	strh	r5, [r4, #12]
 8006d52:	e7cf      	b.n	8006cf4 <__smakebuf_r+0x18>

08006d54 <_fstat_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	@ (8006d74 <_fstat_r+0x20>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	4611      	mov	r1, r2
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	f7fa fc19 	bl	8001598 <_fstat>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	d102      	bne.n	8006d70 <_fstat_r+0x1c>
 8006d6a:	682b      	ldr	r3, [r5, #0]
 8006d6c:	b103      	cbz	r3, 8006d70 <_fstat_r+0x1c>
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	bd38      	pop	{r3, r4, r5, pc}
 8006d72:	bf00      	nop
 8006d74:	2000038c 	.word	0x2000038c

08006d78 <_isatty_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	@ (8006d94 <_isatty_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa fc17 	bl	80015b6 <_isatty>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_isatty_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_isatty_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	2000038c 	.word	0x2000038c

08006d98 <_sbrk_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	@ (8006db4 <_sbrk_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fa fc1e 	bl	80015e4 <_sbrk>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_sbrk_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_sbrk_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	2000038c 	.word	0x2000038c

08006db8 <memcpy>:
 8006db8:	440a      	add	r2, r1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc0:	d100      	bne.n	8006dc4 <memcpy+0xc>
 8006dc2:	4770      	bx	lr
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d1f9      	bne.n	8006dc6 <memcpy+0xe>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <__assert_func>:
 8006dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4b09      	ldr	r3, [pc, #36]	@ (8006e00 <__assert_func+0x2c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4605      	mov	r5, r0
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	b954      	cbnz	r4, 8006dfa <__assert_func+0x26>
 8006de4:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <__assert_func+0x30>)
 8006de6:	461c      	mov	r4, r3
 8006de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dec:	9100      	str	r1, [sp, #0]
 8006dee:	462b      	mov	r3, r5
 8006df0:	4905      	ldr	r1, [pc, #20]	@ (8006e08 <__assert_func+0x34>)
 8006df2:	f000 f841 	bl	8006e78 <fiprintf>
 8006df6:	f000 f851 	bl	8006e9c <abort>
 8006dfa:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <__assert_func+0x38>)
 8006dfc:	e7f4      	b.n	8006de8 <__assert_func+0x14>
 8006dfe:	bf00      	nop
 8006e00:	20000018 	.word	0x20000018
 8006e04:	08007306 	.word	0x08007306
 8006e08:	080072d8 	.word	0x080072d8
 8006e0c:	080072cb 	.word	0x080072cb

08006e10 <_calloc_r>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	fba1 5402 	umull	r5, r4, r1, r2
 8006e16:	b93c      	cbnz	r4, 8006e28 <_calloc_r+0x18>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7ff f945 	bl	80060a8 <_malloc_r>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	b928      	cbnz	r0, 8006e2e <_calloc_r+0x1e>
 8006e22:	2600      	movs	r6, #0
 8006e24:	4630      	mov	r0, r6
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	220c      	movs	r2, #12
 8006e2a:	6002      	str	r2, [r0, #0]
 8006e2c:	e7f9      	b.n	8006e22 <_calloc_r+0x12>
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4621      	mov	r1, r4
 8006e32:	f7fe f9f3 	bl	800521c <memset>
 8006e36:	e7f5      	b.n	8006e24 <_calloc_r+0x14>

08006e38 <__ascii_mbtowc>:
 8006e38:	b082      	sub	sp, #8
 8006e3a:	b901      	cbnz	r1, 8006e3e <__ascii_mbtowc+0x6>
 8006e3c:	a901      	add	r1, sp, #4
 8006e3e:	b142      	cbz	r2, 8006e52 <__ascii_mbtowc+0x1a>
 8006e40:	b14b      	cbz	r3, 8006e56 <__ascii_mbtowc+0x1e>
 8006e42:	7813      	ldrb	r3, [r2, #0]
 8006e44:	600b      	str	r3, [r1, #0]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	1e10      	subs	r0, r2, #0
 8006e4a:	bf18      	it	ne
 8006e4c:	2001      	movne	r0, #1
 8006e4e:	b002      	add	sp, #8
 8006e50:	4770      	bx	lr
 8006e52:	4610      	mov	r0, r2
 8006e54:	e7fb      	b.n	8006e4e <__ascii_mbtowc+0x16>
 8006e56:	f06f 0001 	mvn.w	r0, #1
 8006e5a:	e7f8      	b.n	8006e4e <__ascii_mbtowc+0x16>

08006e5c <__ascii_wctomb>:
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4608      	mov	r0, r1
 8006e60:	b141      	cbz	r1, 8006e74 <__ascii_wctomb+0x18>
 8006e62:	2aff      	cmp	r2, #255	@ 0xff
 8006e64:	d904      	bls.n	8006e70 <__ascii_wctomb+0x14>
 8006e66:	228a      	movs	r2, #138	@ 0x8a
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	4770      	bx	lr
 8006e70:	700a      	strb	r2, [r1, #0]
 8006e72:	2001      	movs	r0, #1
 8006e74:	4770      	bx	lr
	...

08006e78 <fiprintf>:
 8006e78:	b40e      	push	{r1, r2, r3}
 8006e7a:	b503      	push	{r0, r1, lr}
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	ab03      	add	r3, sp, #12
 8006e80:	4805      	ldr	r0, [pc, #20]	@ (8006e98 <fiprintf+0x20>)
 8006e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e86:	6800      	ldr	r0, [r0, #0]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	f7ff fd41 	bl	8006910 <_vfiprintf_r>
 8006e8e:	b002      	add	sp, #8
 8006e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e94:	b003      	add	sp, #12
 8006e96:	4770      	bx	lr
 8006e98:	20000018 	.word	0x20000018

08006e9c <abort>:
 8006e9c:	b508      	push	{r3, lr}
 8006e9e:	2006      	movs	r0, #6
 8006ea0:	f000 f82c 	bl	8006efc <raise>
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f7fa fb28 	bl	80014fa <_exit>

08006eaa <_raise_r>:
 8006eaa:	291f      	cmp	r1, #31
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4605      	mov	r5, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	d904      	bls.n	8006ebe <_raise_r+0x14>
 8006eb4:	2316      	movs	r3, #22
 8006eb6:	6003      	str	r3, [r0, #0]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	bd38      	pop	{r3, r4, r5, pc}
 8006ebe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ec0:	b112      	cbz	r2, 8006ec8 <_raise_r+0x1e>
 8006ec2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ec6:	b94b      	cbnz	r3, 8006edc <_raise_r+0x32>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f831 	bl	8006f30 <_getpid_r>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed8:	f000 b818 	b.w	8006f0c <_kill_r>
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d00a      	beq.n	8006ef6 <_raise_r+0x4c>
 8006ee0:	1c59      	adds	r1, r3, #1
 8006ee2:	d103      	bne.n	8006eec <_raise_r+0x42>
 8006ee4:	2316      	movs	r3, #22
 8006ee6:	6003      	str	r3, [r0, #0]
 8006ee8:	2001      	movs	r0, #1
 8006eea:	e7e7      	b.n	8006ebc <_raise_r+0x12>
 8006eec:	2100      	movs	r1, #0
 8006eee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4798      	blx	r3
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e7e0      	b.n	8006ebc <_raise_r+0x12>
	...

08006efc <raise>:
 8006efc:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <raise+0xc>)
 8006efe:	4601      	mov	r1, r0
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	f7ff bfd2 	b.w	8006eaa <_raise_r>
 8006f06:	bf00      	nop
 8006f08:	20000018 	.word	0x20000018

08006f0c <_kill_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4d07      	ldr	r5, [pc, #28]	@ (8006f2c <_kill_r+0x20>)
 8006f10:	2300      	movs	r3, #0
 8006f12:	4604      	mov	r4, r0
 8006f14:	4608      	mov	r0, r1
 8006f16:	4611      	mov	r1, r2
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	f7fa fade 	bl	80014da <_kill>
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	d102      	bne.n	8006f28 <_kill_r+0x1c>
 8006f22:	682b      	ldr	r3, [r5, #0]
 8006f24:	b103      	cbz	r3, 8006f28 <_kill_r+0x1c>
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	bd38      	pop	{r3, r4, r5, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2000038c 	.word	0x2000038c

08006f30 <_getpid_r>:
 8006f30:	f7fa bacc 	b.w	80014cc <_getpid>

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
